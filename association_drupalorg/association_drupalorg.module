<?php

function association_drupalorg_menu() {
  return array(
    'membership' => array(
      'title' => 'Association Memberships',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_membership_page'),
      'type' => MENU_CALLBACK,
    ),
    'donate' => array(
      'title' => 'Donating to the Drupal Association',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_donate_page'),
      'type' => MENU_CALLBACK,
    ),
    'membership-redirect' => array(
      'access arguments' => array('access content'),
      'page callback' => 'association_drupalorg_membership_redirect',
      'type' => MENU_CALLBACK,
    ),
    'admin/reports/drupalcon' => array(
      'title' => 'DrupalCon',
      'description' => 'Registration',
      'access arguments' => array('view all orders'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_drupalcon_report_page'),
    ),
    'admin/reports/drupalcon/registration.csv' => array(
      'access arguments' => array('view all orders'),
      'page callback' => 'association_drupalorg_drupalcon_registration_csv',
      'type' => MENU_CALLBACK,
    ),
  );
}

function association_drupalorg_theme() {
  return array(
    'association_drupalorg_membership_page' => array(
      'template' => 'association-drupalorg-membership-page',
    ),
    'association_drupalorg_donate_page' => array(
      'template' => 'association-drupalorg-donate-page',
    ),
    'association_drupalorg_drupalcon_report_page' => array(
      'template' => 'association-drupalorg-drupalcon-report-page',
    ),
  );
}

/**
 * When bakery pulls users, it first creates a dummy account with no email
 * address. This confuses CiviCRM and it doesn't make a contact. Having
 * contacts is useful, so we don't have to check that they exist when doing
 * other operations.
 */
function association_drupalorg_user($op, &$edit, &$user, $category = NULL) {
  if ($op === 'after_update' && civicrm_initialize()) {
    require_once 'CRM/Core/BAO/UFMatch.php';
    if (!CRM_Core_BAO_UFMatch::getContactId($user->uid)) {
      CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal', civicrm_get_ctype('Individual'));
    }
  }
}

function association_drupalorg_cron() {
  google_dfp_api_replace_creative_view(6734416973, 'association_sponsors_admin', 'page_2'); // All logos
  google_dfp_api_replace_creative_view(6980741093, 'association_sponsors_admin', 'page_3'); // Diamond
  google_dfp_api_replace_creative_view(6980741213, 'association_sponsors_admin', 'page_4'); // Platinum
}

function association_drupalorg_preprocess_association_drupalorg_membership_page(&$variables) {
  $variables['individual_usd_url'] = url('cart/add/e-p1629_a34o134_m0', array('query' => array('destination' => 'cart/checkout')));
  $variables['organization_usd_url'] = url('cart/add/e-p1629_a34o139_m0', array('query' => array('destination' => 'cart/checkout')));
  $variables['individual_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 1)));
  $variables['organization_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 2)));

  if (user_is_logged_in()) {
    global $user;

    $variables['memberships'] = array();
    foreach (association_drupalorg_civicrm_current_memberships($user) as $membership) {
      $variables['memberships'][] = t('@membership_type membership expiring @date', array('@membership_type' => $membership['membership_name'], '@date' => format_date(strtotime($membership['end_date']), 'custom', 'M j, Y')));
    }
    if (count($variables['memberships']) === 0) {
      $variables['memberships'][] = t('No current membership.');
    }
  }
  else {
    $variables['individual_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['individual_usd_url'])));
    $variables['organization_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['organization_usd_url'])));
    $variables['individual_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['individual_eur_url'])));
    $variables['organization_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['organization_eur_url'])));
  }
}

function association_drupalorg_preprocess_association_drupalorg_donate_page(&$variables) {
  $variables['donate_usd_url'] = url('node/1639');
  $variables['donate_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 29)));
  if (!user_is_logged_in()) {
    $variables['donate_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['donate_usd_url'])));
    $variables['donate_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['donate_eur_url'])));
  }
}

function association_drupalorg_preprocess_association_drupalorg_drupalcon_report_page(&$variables) {
  $variables['time_left'] = t('<strong>@time</strong> until DrupalCon', array('@time' => format_interval(strtotime('2012-03-19 8:00:00 MDT') - time())));
  $variables['total_registration'] = l(t('<strong>@count</strong> registrations', array('@count' => db_result(db_query("SELECT count(DISTINCT o.order_id) FROM {uc_orders} o INNER JOIN {uc_order_products} op ON op.order_id = o.order_id AND op.nid = 1484 WHERE o.order_status IN ('completed', 'payment_received')")))), 'admin/reports/drupalcon/registration.csv', array('html' => TRUE));
}

function association_drupalorg_drupalcon_registration_csv() {
  header('Content-Type: text/csv');
  $result = db_query("SELECT o.order_id FROM {uc_orders} o INNER JOIN {uc_order_products} op ON op.order_id = o.order_id AND op.nid = 1484 WHERE o.order_status IN ('completed', 'payment_received')");
  $fp = fopen('php://output', 'w');
  fputcsv($fp, array(
    t('Order'),
    t('Date'),
    t('Name'),
    t('Username'),
    t('Company'),
    t('Title'),
    t('Country'),
    t('Email'),
    t('Shirt'),
    t('Meal'),
    t('Other'),
    t('Services'),
    t('Training'),
    t('Drupalgängers'),
    t('Sponsorship'),
    t('Coupon'),
    t('Total'),
    t('Payment'),
  ));
  while ($order_id = db_result($result)) {
    $order = uc_order_load($order_id);
    $account = user_load($order->uid);
    foreach ($order->products as $product) {
      if ($product->nid === 1484) {
        break;
      }
    }
    $contact = array(
      'training' => '',
      'Drupalgängers' => '',
      'sponsorship' => '',
    );
    foreach ($product->data['attributes']['Please contact me'] as $contact_about) {
      foreach (array_keys($contact) as $type) {
        if (strpos($contact_about, $type) !== FALSE) {
          $contact[$type] = t('yes');
        }
      }
    }
    fputcsv($fp, array(
      $order->order_id,
      date('Y-m-d', $order->created),
      $account->profile_full_name,
      $account->name,
      $account->profile_current_company_organization,
      $account->profile_job,
      $account->country,
      $account->mail,
      $product->data['attributes']['T-shirt'][0],
      $product->data['attributes']['Meal preference'][0],
      $product->data['attributes']['Other meal preference'][0],
      implode(', ', $product->data['attributes']['Services you require']),
      $contact['training'],
      $contact['Drupalgängers'],
      $contact['sponsorship'],
      $order->data['coupon'],
      $order->order_total,
      $order->payment_method,
    ));
  }
  fclose($fp);
}

/**
 * Set a message for the login page and redirect to it.
 */
function association_drupalorg_membership_redirect() {
  drupal_set_message(t('Please log in to buy your membership or donate.'));
  drupal_goto('user', array('destination' => preg_replace('!^' . url() . '!', '', $_REQUEST['to'])));
}

/**
 * Query CiviCRM's API for an account's contact ID.
 *
 * @param $account
 *   An account object representing the user who's membership details should be
 *   returned.
 */
function association_drupalorg_civicrm_contact_id($account) {
  if (module_exists('civicrm')) {
    civicrm_initialize();

    $contact_id = civicrm_api('uf_match', 'getvalue', array(
      'version' => 3,
      'domain_id' => 1,
      'uf_id' => $account->uid,
      'return' => 'contact_id',
    ));
    if (is_array($contact_id) && $contact_id['is_error'] && !empty($account->mail)) {
      // CiviCRM contacts can only have one Drupal user. Look up by email. An
      // email being used multiple times does happen, so can't use getvalue.
      $result = civicrm_api('email', 'get', array(
        'version' => 3,
        'sequential' => TRUE,
        'email' => $account->mail,
      ));
      $contact_id = $result['values'][0]['contact_id'];
    }
  }

  if (!is_numeric($contact_id)) {
    watchdog('association_drupalorg', 'Could not find CiviCRM contact for %name', array('%name' => $account->name), WATCHDOG_ERROR, l(t('View user'), 'user/' . $account->uid));
    return FALSE;
  }

  return $contact_id;
}

/**
 * Query CiviCRM's API for an account's current memberships.
 *
 * @param $account
 *   An account object representing the user who's membership details should be
 *   returned.
 */
function association_drupalorg_civicrm_current_memberships($account) {
  $current_memberships = array();
  $contact_id = association_drupalorg_civicrm_contact_id($account);

  if ($contact_id !== FALSE) {
    $statuses = civicrm_api('membership_status', 'get', array(
      'version' => 3,
    ));
    $memberships = civicrm_api('membership', 'get', array(
      'version' => 3,
      'contact_id' => $contact_id,
    ));
    foreach ($memberships['values'] as $membership) {
      if ($statuses['values'][$membership['status_id']]['is_current_member']) {
        $current_memberships[] = $membership;
      }
    }
  }

  return $current_memberships;
}

function association_drupalorg_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op === 'view') {
    if ($node->type === 'association_membership_benefit') {
      global $user;

      if (count(association_drupalorg_civicrm_current_memberships($user)) > 0) {
        $node->content['field_assoc_benefit_link']['#suffix'] = '<p>' . t('Discount code: <strong>@code</strong>', array('@code' => $node->field_assoc_benefit_code[0]['value'])) . '</p>';
      }
      else {
        unset($node->content['field_assoc_benefit_link']['field']);
        if (user_is_logged_in()) {
          $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Become a member!'), 'membership') . '</strong></p>';
        }
        else {
          $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Sign in to get this discount'), 'user/login', array('query' => drupal_get_destination())) . '</strong></p>';
        }
      }

      $node->content['field_assoc_benefit_restrictions']['#weight'] = 10;
    }
    elseif ($node->type === 'association_sponsorship_level') {
      $node->content['field_assoc_level_notes']['#weight'] = 8;
    }
    elseif ($node->type === 'product') {
      // Hide zero price.
      if ($node->sell_price == 0) {
        $node->content['display_price']['#access'] = FALSE;
      }
    }
    elseif ($node->nid == 1104) {
      // Add example ads for https://association.drupal.org/advertising/web.
      $node->content['exmaple_ads'] = array(
        '#prefix' => '<h2 id="examples">' . t('Examples') . '</h2>',
        '#weight' => 1,
        '#sorted' => TRUE,
      );
      $node->content['exmaple_ads']['row_1'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_2'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_1']['column_1']['#value'] = '<h3>' . t('300 x 250 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x250');
      $node->content['exmaple_ads']['row_1']['column_2']['#value'] = '<h3>' . t('300 x 250 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x250');
      $node->content['exmaple_ads']['row_2']['column_1']['#value'] = '<h3>' . t('300 x 100 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x100');
      $node->content['exmaple_ads']['row_2']['column_2']['#value'] = '<h3>' . t('300 x 100 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x100');
    }
  }
}

function association_drupalorg_preprocess_node(&$variables) {
  if ($variables['type'] === 'association_sponsorship_level') {
    $variables['classes'][] = drupal_strtolower(str_replace(' ', '-', $variables['node']->field_assoc_level[0]['view']));
  }
}

function association_drupalorg_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id === 'association_sponsor_node_form' && empty($form['field_assoc_sponsor_users'][0]['#default_value']['uid'])) {
    // Default the first sponsor user to the current user.
    $form['field_assoc_sponsor_users'][0]['#default_value']['uid'] = $user->uid;
  }
  elseif ($form_id === 'association_sponsorship_node_form') {
    // There isn't anything good to put in the sponsorship body.
    $form['body_field']['#access'] = FALSE;
  }
  elseif ($form_id === 'uc_cart_view_form') {
    // One ticket per cart.
    foreach (element_children($form['items']) as $key) {
      $node = node_load($form['items'][$key]['nid']['#value']);
      if (isset($node->attributes)) {
        foreach ($node->attributes as $attribute) {
          if ($attribute->name === 'Conference registration') {
            $form['items'][$key]['qty']['#type'] = 'value';
          }
        }
      }
    }
  }
  elseif (strpos($form_id, 'uc_product_add_to_cart_form_') === 0) {
    if ($form['node']['#value']->type === 'association_sponsorship_level' && association_drupalorg_get_sponsor() === FALSE) {
      // Do not allow sponsorships to be bought without a sponsor.
      $form['submit']['#suffix'] = '<br />' . l(t('You must be associated with a sponsor'), $_GET['q'], array('fragment' => 'content'));
      $form['submit']['#disabled'] = TRUE;
    }
    else {
      foreach ($form['node']['#value']->attributes as $attribute_id => $attribute) {
        if ($attribute->name === 'Membership type') {
          // Make membership prices clear
          foreach ($form['attributes'][$attribute_id]['#options'] as $key => $value) {
            $form['attributes'][$attribute_id]['#options'][$key] = preg_replace('!\+(\$\d+\.\d+)!', t('\1 for 1 year'), $value);
          }

          // Add heading and make description larger
          $form['attributes'][$attribute_id]['#prefix'] = '<h2>' . t('Drupal Association Membership') . '</h2>';
          $form['attributes'][$attribute_id]['#prefix'] .= $form['attributes'][$attribute_id]['#description'];
          unset($form['attributes'][$attribute_id]['#description']);

          // Add current memberships
          $memberships = '';
          foreach (association_drupalorg_civicrm_current_memberships($user) as $membership) {
            $memberships .= '<li>' . t('@membership_type membership expiring @date', array('@membership_type' => $membership['membership_name'], '@date' => format_date(strtotime($membership['end_date']), 'custom', 'M j, Y'))) . '</li>';
          }
          if (!empty($memberships)) {
            $form['attributes'][$attribute_id]['#prefix'] .= '<p><strong>' . t('Your current membership') . '</strong></p><ul>' . $memberships . '</ul>';
          }
        }
        elseif ($attribute->name === 'Conference registration') {
          // Make sure user is logged in.
          if (user_is_logged_in()) {
            // And properly working with Bakery.
            if (strpos($user->init, variable_get('bakery_master', 'http://drupal.org/')) === 0 || strpos($user->init, preg_replace('!^http:!', 'https:', variable_get('bakery_master', 'http://drupal.org/'))) === 0) {
              // Load profile data we might show on badges.
              $account = user_load($user->uid);
              $personal_info_fields = array('profile_full_name', 'profile_country', 'profile_irc_nick', 'profile_personal_home_page', 'profile_twitter_url');
              $work_info_fields = array('profile_job', 'profile_current_company_organization');
              $all_fields = array_merge($personal_info_fields, $work_info_fields);
              $fields = array();
              $result = db_query("SELECT name, visibility, type, page, title FROM {profile_fields} WHERE name IN (" . db_placeholders($all_fields, 'text') . ")", $all_fields);
              while ($field = db_fetch_object($result)) {
                $fields[$field->name] = $field;
              }

              $personal_info = '';
              foreach ($personal_info_fields as $name) {
                if ($name === 'profile_full_name' && empty($account->profile_full_name)) {
                  $personal_info .= theme('user_profile_item', array(
                    '#title' => check_plain($fields[$name]->title),
                    '#value' => '<div class="warning">' . t('While not required, your full name is appreciated.') . ' ' . l(t('Edit'), $account->init . '/Personal information', array('query' => array('destination' => 'denver2012-registration'))) . '</div>',
                  ));
                }
                else {
                  $personal_info .= theme('user_profile_item', array(
                    '#title' => check_plain($fields[$name]->title),
                    '#value' => profile_view_field($account, $fields[$name]),
                  ));
                }
              }
              $work_info = '';
              foreach ($work_info_fields as $name) {
                $work_info .= theme('user_profile_item', array(
                  '#title' => check_plain($fields[$name]->title),
                  '#value' => profile_view_field($account, $fields[$name]),
                ));
              }

              $form['attributes'][$attribute_id]['#prefix'] = '<h2>' . t('Personal information') . '</h2>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . t('We use your Drupal.org account. This information can be updated on Drupal.org at any time, and may be printed on your badge.') . '</p>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<div class="profile"><dl class="clear-block">' . $personal_info . '</dl></div>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . l(t('Edit personal information'), $account->init . '/Personal information', array('query' => array('destination' => 'denver2012-registration'))) . '</p>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<h3>' . t('Work') . '</h3>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<div class="profile"><dl class="clear-block">' . $work_info . '</dl></div>';
              $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . l(t('Edit work'), $account->init . '/Work', array('query' => array('destination' => 'denver2012-registration'))) . '</p>';

              // Registration heading
              $form['attributes'][$attribute_id]['#prefix'] .= '<h2>' . $form['attributes'][$attribute_id]['#title'] . '</h2>';
              unset($form['attributes'][$attribute_id]['#title']);

              // Check for existing order. One per user.
              $already_bought = FALSE;
              $result = db_query("SELECT o.order_id, o.order_status, op.data FROM {uc_orders} o INNER JOIN {uc_order_products} op ON op.order_id = o.order_id AND op.nid = %d WHERE o.uid = %d", $form['node']['#value']->nid, $user->uid);
              while ($order = db_fetch_object($result)) {
                $order = drupal_unpack($order);
                if ($order->order_status === 'payment_received') {
                  foreach ($order->attributes['Conference registration'] as $attribute) {
                    foreach ($form['attributes'][$attribute_id]['#options'] as $key => $value) {
                      if (strpos($value, $attribute) === 0) {
                        unset($form['attributes'][$attribute_id]['#options'][$key]);
                        $already_bought = TRUE;
                      }
                    }
                  }
                }
                else {
                  drupal_set_message(t('You already have a <a href="!order">pending order</a>. Please only complete one order per user account.', array('!order' => url('user/' . $user->uid . '/order/' . $order->order_id))), 'warning');
                }
              }

              if (count($form['attributes'][$attribute_id]['#options']) === 0) {
                drupal_set_message(t('You have already bought your conference registration. You can only buy one for each user account.'));
                $form['attributes']['#access'] = FALSE;
                $form['submit']['#access'] = FALSE;
                return;
              }
              elseif ($already_bought) {
                drupal_set_message(t('You have already bought your conference registration. You can only buy one for each user account. You can still add options.'));
              }

              // Make prices clear.
              foreach ($form['attributes'][$attribute_id]['#options'] as $key => $value) {
                $form['attributes'][$attribute_id]['#options'][$key] = preg_replace('!\+(\$\d+\.\d+)!', t('\1'), $value);
              }

              // Need to buy something, first is required.
              $form['attributes'][$attribute_id]['#value'] = array(reset(array_keys($form['attributes'][$attribute_id]['#options'])));
              $form['attributes'][$attribute_id]['#association_drupalorg_disabled'] = array(reset(array_keys($form['attributes'][$attribute_id]['#options'])));
              $form['attributes'][$attribute_id]['#after_build'][] = 'association_drupalorg_conference_registration_after_build';

              // Add to Cart is boring.
              $form['submit']['#value'] = t('I’m going to DrupalCon!');
              $form['#redirect'] = 'cart/checkout';

              array_unshift($form['#submit'], 'association_drupalorg_conference_registration_submit');
            }
            else { // Not synced for bakery.
              drupal_set_message(t('Your account is not synced for single sign on, please <a href="!contact">contact us</a>, select Website feedback category. Include your Drupal.org username and/or email address used.', array('!contact' => url('contact'))), 'warning');
              $form['attributes']['#access'] = FALSE;
              $form['submit']['#access'] = FALSE;
            }
          }
          else {
            // Require login
            drupal_set_message(t('Please <a href="!login">log in</a> to purchase DrupalCon tickets.', array('!login' => url('user', array('query' => drupal_get_destination())))), 'warning');
            $form['attributes']['#access'] = FALSE;
            $form['submit']['#access'] = FALSE;
          }
        }
      }
    }
  }
}

/**
 * Because formapi doesn't hve a way to selectively disable checkboxes.
 */
function association_drupalorg_conference_registration_after_build($form, $form_state) {
  foreach ($form['#association_drupalorg_disabled'] as $key) {
    $form[$key]['#attributes']['disabled'] = 'disabled';
    $form[$key]['#value'] = TRUE;
  }
  return $form;
}

/**
 * One ticket per cart.
 */
function association_drupalorg_conference_registration_submit($form, $form_state) {
  foreach (uc_cart_get_contents($cart_id) as $item) {
    if ($item->nid === $form['node']['#value']->nid) {
      uc_cart_remove_item($item->nid, NULL, $item->data);
    }
  }
}

function association_drupalorg_views_pre_render(&$view) {
  if ($view->name === 'association_store_con_sponsor') {
    // Remind about sponsor associated with, or lack thereof.
    if (user_is_logged_in()) {
      $sponsor = association_drupalorg_get_sponsor();
      if ($sponsor === FALSE) {
        drupal_set_message(t('You currently are not associated with a sponsor. Before you buy, either <a href="!create">create your sponsor</a> or get added to an <a href="!sponsors">existing sponsor</a>.', array('!create' => url('node/add/association-sponsor', array('query' => drupal_get_destination())), '!sponsors' => url('sponsor/sponsors'))), 'warning');
      }
      else {
        drupal_set_message(t('You are buying for !sponsor.', array('!sponsor' => l($sponsor->title, 'node/' . $sponsor->nid))));
      }
    }
    else {
      drupal_set_message(t('You must <a href="!login">log in</a> to buy sponsorships.', array('!login' => url('user', array('query' => drupal_get_destination())))), 'warning');
    }
  }
}

function association_drupalorg_uc_payment_entered($order) {
  foreach ($order->products as $product) {
    $node = node_load($product->nid);
    if ($node->type === 'association_sponsorship_level') {
      // Create a sponsorship with the customer's sponor and the sponsorship
      // level bought.
      $sponsor = association_drupalorg_get_sponsor($order->uid);
      $sponsorship = new stdClass();
      $sponsorship->type = 'association_sponsorship';
      $sponsorship->title = $node->title;
      $sponsorship->field_assoc_sponsorship_level = array(
        array('nid' => $node->nid),
      );
      $sponsorship->field_assoc_sponsorship_sponsor = array(
        array('nid' => $sponsor->nid),
      );
      node_save($sponsorship);
    }
  }
}

/**
 * Set up sponsor nodes, and future associated nodes, in the
 * association_drupalorg_sponsor realm by nid.
 */
function association_drupalorg_node_access_records($node) {
  if (in_array($node->type, array('association_sponsor', 'association_sponsorship'))) {
    return array(
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => 0,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => $node->type === 'association_sponsor' ? $node->nid : $node->field_assoc_sponsorship_sponsor[0]['nid'],
        'grant_view' => TRUE,
        'grant_update' => TRUE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
    );
  }
}

/**
 * If a user is associated with a sponsor, grant them access to that nid in the
 * association_drupalorg_sponsor realm.
 */
function association_drupalorg_node_grants($account, $op) {
  if ($op === 'view') {
    return array('association_drupalorg_sponsor' => array(0));
  }
  elseif ($op === 'update') {
    $sponsor = association_drupalorg_get_sponsor($account->uid);
    if ($sponsor !== FALSE) {
      return array('association_drupalorg_sponsor' => array($sponsor->nid));
    }
  }
}

function association_drupalorg_field_access($op, $field, $account, $node = NULL) {
  if ($op === 'edit') {
    switch ($field['field_name']) {
      // Only allow DfP admins to change DfP info.
      case 'field_assoc_sponsor_dfp':
      case 'field_sponsorship_dfp':
        return user_access('administer Google DfP API');
    }
    switch ($field['display_settings']['parent']) {
      // Do not let sponsors edit their conference information, like
      // sponsorship level.
      case 'group_sponsorship_conference':
        return user_access('edit any association_sponsorship content');

      // Only show web ad information if sponsorship level has it.
      case 'group_sponsorship_web_ad':
        $level = node_load($node->field_assoc_sponsorship_level[0]['nid']);
        return $level->field_assoc_level_web_ads[0]['value'];
    }
  }
  return TRUE;
}

/**
 * Find the sponsor associated with a user.
 *
 * @param $uid
 *   The user ID to check, or omit for the current user.
 * @return
 *   FALSE if there is no sponsor, or an object with nid and title.
 */
function association_drupalorg_get_sponsor($uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }
  return db_fetch_object(db_query_range("SELECT n.title, n.nid FROM {content_field_assoc_sponsor_users} su INNER JOIN {node} n ON n.vid = su.vid AND n.status = 1 WHERE su.field_assoc_sponsor_users_uid = %d", $uid, 0, 1));
}

function association_drupalorg_ca_action() {
  return array(
    'association_drupalorg_membership' => array(
      '#title' => t('Update Association membership'),
      '#category' => t('Association cutstom'),
      '#callback' => 'association_drupalorg_update_membership',
      '#arguments' => array(
        'order' => array('#entity' => 'uc_order', '#title' => t('Order')),
      ),
    ),
  );
}

/**
 * Save membership to CiviCRM and MailChimp subscriptions.
 */
function association_drupalorg_update_membership($order) {
  $account = user_load($order->uid);

  // DrupalCon mailing list.
  $please_contact_me = uc_attribute_load(24);
  foreach ($order->products as $product) {
    if (isset($product->data['attributes'][$please_contact_me->name]) && array_search($please_contact_me->options[124]->name, $product->data['attributes'][$please_contact_me->name]) !== FALSE) {
      $lists = _mailchimp_get_available_lists($account);
      $q = _mailchimp_get_api_object();
      $list_id = '189afc7b7a'; // Denver, todo- don't hardcode
      _mailchimp_subscribe_user($lists[$list_id], $account->mail, _mailchimp_load_user_list_mergevars($account->uid, $list_id, $q->listMergeVars($list_id)), FALSE);
    }
  }

  $contact_id = association_drupalorg_civicrm_contact_id($account);
  if ($contact_id !== FALSE) {
    // Record customer information in CiviCRM.
    $addresses = civicrm_api('address', 'get', array('version' => 3, 'contact_id' => $contact_id));
    $countries = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'country'));
    $state_provinces = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'stateProvince'));
    $address_types = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'locationType'));
    civicrm_api('contact', 'update', array(
      'version' => 3,
      'id' => $contact_id,
      'first_name' => $order->billing_first_name,
      'last_name' => $order->billing_last_name,
      'current_employer' => $order->billing_company,
    ));
    $address = array(
      'contact_id' => $contact_id,
      'street_address' => $order->billing_street1,
      'supplemental_address_1' => $order->billing_street2,
      'city' => $order->billing_city,
      'postal_code' => $order->billing_postal_code,
      'state_province_id' => array_search(uc_zone_get_by_id($order->billing_zone), $state_provinces['values']),
      'country_id' => array_search(uc_country_get_by_id($order->billing_country), $countries['values']),
    );
    $new = TRUE;
    foreach ($addresses['values'] as $existing_address) {
      if (count(array_diff_assoc($address, $existing_address)) === 0) {
        $new = FALSE;
        $existing_address['version'] = 3;
        $existing_address['is_primary'] = TRUE;
        $existing_address['is_billing'] = TRUE;
        civicrm_api('address', 'update', $existing_address);
        break;
      }
      else {
        $existing_address['version'] = 3;
        $existing_address['is_primary'] = FALSE;
        $existing_address['is_billing'] = FALSE;
        civicrm_api('address', 'update', $existing_address);
      }
    }
    if ($new) {
      $address['version'] = 3;
      $address['is_primary'] = TRUE;
      $address['is_billing'] = TRUE;
      $address['location_type_id'] = array_search('Main', $address_types['values']);
      civicrm_api('address', 'create', $address);
    }

    $membership_types = array();
    $membership_remind = array();
    $civicrm_types = civicrm_api('membership_type', 'get', array('version' => 3));
    foreach ($civicrm_types['values'] as $civicrm_type) {
      $membership_types[$civicrm_type['name']] = $civicrm_type['id'];
      $membership_remind[$civicrm_type['name']] = $civicrm_type['renewal_reminder_day'];
    }

    foreach ($order->products as $product) {
      // Record contribution.
      $contribution = civicrm_api('contribution', 'create', array(
        'version' => 3,
        'contact_id' => $contact_id,
        'currency' => $order->currency,
        'total_amount' => number_format($product->price, 2),
        'receive_date' => date('Y-m-d', $order->created),
        'source' => 'UberCart: ' . $product->title,
        'contribution_type' => 'Donation',
        'trxn_id' => l($order->order_id, 'admin/store/orders/' . $order->order_id, array('absolute' => TRUE)),
      ));

      // Record membership.
      if (isset($product->data['attributes']['Membership type'])) {
        foreach ($product->data['attributes']['Membership type'] as $membership_type) {
          $params = array(
            'version' => 3,
            'contact_id' => $contact_id,
            'membership_type_id' => $membership_types[$membership_type],
            'join_date' => date('Y-m-d'),
            'start_date' => date('Y-m-d'),
            'reminder_date' => date('Y-m-d', mktime(0, 0, 0, date('m'), date('d') - 1 - $membership_remind[$membership_type], date('Y') + 1)),
            'end_date' => date('Y-m-d', mktime(0, 0, 0, date('m'), date('d') - 1, date('Y') + 1)),
            'source' => 'UberCart',
          );
          $new = TRUE;
          foreach (association_drupalorg_civicrm_current_memberships($account) as $membership) {
            if ($membership['membership_name'] === $membership_type) {
              // Update existing memebership.
              $new = FALSE;
              $membership['version'] = 3;
              $membership['source'] .= ', ' . t('updated by UberCart @date', array('@date' => date('Y-m-d')));
              $membership['reminder_date'] = date('Y-m-d', mktime(0, 0, 0, date('m', strtotime($membership['end_date'])), date('d', strtotime($membership['end_date'])) - $membership_remind[$membership_type], date('Y', strtotime($membership['end_date'])) + 1));
              $membership['end_date'] = date('Y-m-d', mktime(0, 0, 0, date('m', strtotime($membership['end_date'])), date('d', strtotime($membership['end_date'])), date('Y', strtotime($membership['end_date'])) + 1));
              // todo $membership['status_id'] = current;
              $membership = civicrm_api('membership', 'update', $membership);
              break;
            }
          }
          if ($new) {
            $membership = civicrm_api('membership', 'create', $params);
          }
          civicrm_api('membership_payment', 'create', array(
            'version' => 3,
            'contribution_id' => $contribution['id'],
            'membership_id' => $membership['id'],
          ));
        }
      }
    }
  }
}
