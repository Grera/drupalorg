<?php

function association_drupalorg_menu() {
  return array(
    'membership' => array(
      'title' => 'Association Memberships',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_membership_page'),
      'type' => MENU_CALLBACK,
    ),
    'donate' => array(
      'title' => 'Donating to the Drupal Association',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_donate_page'),
      'type' => MENU_CALLBACK,
    ),
    'membership-redirect' => array(
      'access arguments' => array('access content'),
      'page callback' => 'association_drupalorg_membership_redirect',
      'type' => MENU_CALLBACK,
    ),
  );
}

function association_drupalorg_theme() {
  return array(
    'association_drupalorg_membership_page' => array(
      'template' => 'association-drupalorg-membership-page',
    ),
    'association_drupalorg_donate_page' => array(
      'template' => 'association-drupalorg-donate-page',
    ),
  );
}

function association_drupalorg_preprocess_association_drupalorg_membership_page(&$variables) {
  $variables['individual_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 1)));
  $variables['organization_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 2)));

  if (!user_is_logged_in()) {
    $variables['individual_url'] = url('membership-redirect', array('query' => array('to' => $variables['individual_url'])));
    $variables['organization_url'] = url('membership-redirect', array('query' => array('to' => $variables['organization_url'])));
  }
  else {
    global $user;

    $variables['memberships'] = array();
    foreach (association_drupalorg_get_memberships($user) as $membership) {
      if ($membership->status === 'New' || $membership->status === 'Current') {
        $variables['memberships'][] = t('@membership_type membership expiring @date', array('@membership_type' => $membership->membership_type, '@date' => format_date(strtotime($membership->end_date), 'custom', 'M j, Y')));
      }
    }
    if (count($variables['memberships']) === 0) {
      $variables['memberships'][] = t('No current membership.');
    }
  }
}

function association_drupalorg_preprocess_association_drupalorg_donate_page(&$variables) {
  $variables['donate_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 29)));
  if (!user_is_logged_in()) {
    $variables['donate_url'] = url('membership-redirect', array('query' => array('to' => $variables['donate_url'])));
  }
}

/**
 * Set a message for the login page and redirect to it.
 */
function association_drupalorg_membership_redirect() {
  drupal_set_message(t('Please log in to buy your membership or donate.'));
  drupal_goto('user', array('destination' => preg_replace('!^' . url() . '!', '', $_REQUEST['to'])));
}

/**
 * Query CiviCRM's DB for an account's memberships.
 *
 * @param $account
 *   An account object representing the user who's membership details should be
 *   returned.
 *
 * @todo try using CiviCRM 3.4+'s API
 */
function association_drupalorg_get_memberships($account) {
  global $db_url;

  if (!is_array($db_url) || !isset($db_url['association_civicrm'])) {
    return array();
  }

  $previous_dsn = db_set_active('association_civicrm');

  $contact_id = db_result(db_query("SELECT contact_id FROM {civicrm_uf_match} WHERE uf_id = %d", $account->uid));

  // If a matching contact is found in CiviCRM.
  $memberships = array();
  if ($contact_id) {
    $result = db_query("SELECT cm.id as membership_id, cm.membership_type_id, cmt.name as membership_type, cm.end_date, cms.name as status, cmb.entity_id FROM {civicrm_membership} cm LEFT JOIN {civicrm_membership_type} cmt ON cm.membership_type_id = cmt.id LEFT JOIN {civicrm_membership_status} cms ON cm.status_id = cms.id LEFT JOIN {civicrm_membership_block} cmb ON cm.membership_type_id = cmb.membership_types WHERE cm.contact_id = %d GROUP BY cm.contact_id, cm.id ORDER BY cm.end_date DESC", $contact_id);
    while ($membership = db_fetch_object($result)) {
      $memberships[] = $membership;
    }
  }

  // Change the DSN back to default Drupal $db_url.
  db_set_active($previous_dsn);

  return $memberships;
}

function association_drupalorg_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op === 'view') {
    if ($node->type === 'association_membership_benefit') {
      global $user;

      $has_membership = FALSE;
      foreach (association_drupalorg_get_memberships($user) as $membership) {
        if ($membership->status === 'New' || $membership->status === 'Current') {
          $has_membership = TRUE;
          break;
        }
      }

      if ($has_membership) {
        $node->content['field_assoc_benefit_link']['#suffix'] = '<p>' . t('Discount code: <strong>@code</strong>', array('@code' => $node->field_assoc_benefit_code[0]['value'])) . '</p>';
      }
      else {
        unset($node->content['field_assoc_benefit_link']['field']);
        if (user_is_logged_in()) {
          $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Become a member!'), 'membership') . '</strong></p>';
        }
        else {
          $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Sign in to get this discount'), 'user/login', array('query' => drupal_get_destination())) . '</strong></p>';
        }
      }

      $node->content['field_assoc_benefit_restrictions']['#weight'] = 10;
    }
    elseif ($node->type === 'association_sponsorship_level') {
      $node->content['field_assoc_level_notes']['#weight'] = 8;
    }
    elseif ($node->nid == 1104) {
      // Add example ads for https://association.drupal.org/advertising/web.
      $node->content['exmaple_ads'] = array(
        '#prefix' => '<h2 id="examples">' . t('Examples') . '</h2>',
        '#weight' => 1,
        '#sorted' => TRUE,
      );
      $node->content['exmaple_ads']['row_1'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_2'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_1']['column_1']['#value'] = '<h3>' . t('300 x 250 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x250');
      $node->content['exmaple_ads']['row_1']['column_2']['#value'] = '<h3>' . t('300 x 250 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x250');
      $node->content['exmaple_ads']['row_2']['column_1']['#value'] = '<h3>' . t('300 x 100 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x100');
      $node->content['exmaple_ads']['row_2']['column_2']['#value'] = '<h3>' . t('300 x 100 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x100');
    }
  }
}

function association_drupalorg_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'association_sponsor_node_form' && empty($form['field_assoc_sponsor_users'][0]['#default_value']['uid'])) {
    // Default the first sponsor user to the current user.
    global $user;
    $form['field_assoc_sponsor_users'][0]['#default_value']['uid'] = $user->uid;
  }
  elseif ($form_id === 'association_sponsorship_node_form') {
    // There isn't anything good to put in the sponsorship body.
    $form['body_field']['#access'] = FALSE;
  }
  elseif (strpos($form_id, 'uc_product_add_to_cart_form_') === 0 && $form['node']['#value']->type === 'association_sponsorship_level' && association_drupalorg_get_sponsor() === FALSE) {
    // Do not allow sponsorships to be bought without a sponsor.
    $form['submit']['#suffix'] = '<br />' . l(t('You must be associated with a sponsor'), $_GET['q'], array('fragment' => 'content'));
    $form['submit']['#disabled'] = TRUE;
  }
}

function association_drupalorg_views_pre_render(&$view) {
  if ($view->name === 'association_store_con_sponsor') {
    // Remind about sponsor associated with, or lack thereof.
    if (user_is_logged_in()) {
      $sponsor = association_drupalorg_get_sponsor();
      if ($sponsor === FALSE) {
        drupal_set_message(t('You currently are not associated with a sponsor. Before you buy, either <a href="!create">create your sponsor</a> or get added to an <a href="!sponsors">existing sponsor</a>.', array('!create' => url('node/add/association-sponsor', array('query' => drupal_get_destination())), '!sponsors' => url('sponsor/sponsors'))), 'warning');
      }
      else {
        drupal_set_message(t('You are buying for !sponsor.', array('!sponsor' => l($sponsor->title, 'node/' . $sponsor->nid))));
      }
    }
    else {
      drupal_set_message(t('You must <a href="!login">log in</a> to buy sponsorships.', array('!login' => url('user', array('query' => drupal_get_destination())))), 'warning');
    }
  }
}

function association_drupalorg_uc_payment_entered($order) {
  foreach ($order->products as $product) {
    $node = node_load($product->nid);
    if ($node->type === 'association_sponsorship_level') {
      // Create a sponsorship with the customer's sponor and the sponsorship
      // level bought.
      $sponsor = association_drupalorg_get_sponsor($order->uid);
      $sponsorship = new stdClass();
      $sponsorship->type = 'association_sponsorship';
      $sponsorship->title = $node->title;
      $sponsorship->field_assoc_sponsorship_level = array(
        array('nid' => $node->nid),
      );
      $sponsorship->field_assoc_sponsorship_sponsor = array(
        array('nid' => $sponsor->nid),
      );
      node_save($sponsorship);
    }
  }
}

/**
 * Set up sponsor nodes, and future associated nodes, in the
 * association_drupalorg_sponsor realm by nid.
 */
function association_drupalorg_node_access_records($node) {
  if ($node->type === 'association_sponsor') {
    return array(
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => 0,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => $node->nid,
        'grant_view' => TRUE,
        'grant_update' => TRUE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
    );
  }
}

/**
 * If a user is associated with a sponsor, grant them access to that nid in the
 * association_drupalorg_sponsor realm.
 */
function association_drupalorg_node_grants($account, $op) {
  if ($op === 'view') {
    return array('association_drupalorg_sponsor' => array(0));
  }
  elseif ($op === 'update') {
    $sponsor = association_drupalorg_get_sponsor($account->uid);
    if ($sponsor !== FALSE) {
      return array('association_drupalorg_sponsor' => array($sponsor->nid));
    }
  }
}

/**
 * Find the sponsor associated with a user.
 *
 * @param $uid
 *   The user ID to check, or omit for the current user.
 * @return
 *   FALSE if there is no sponsor, or an object with nid and title.
 */
function association_drupalorg_get_sponsor($uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }
  return db_fetch_object(db_query_range("SELECT n.title, n.nid FROM {content_field_assoc_sponsor_users} su INNER JOIN {node} n ON n.vid = su.vid AND n.status = 1 WHERE su.field_assoc_sponsor_users_uid = %d", $uid, 0, 1));
}
