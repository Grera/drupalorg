<?php

function association_drupalorg_menu() {
  return array(
    'membership' => array(
      'title' => 'Association Memberships',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_membership_page'),
      'type' => MENU_CALLBACK,
    ),
    'donate' => array(
      'title' => 'Donating to the Drupal Association',
      'access arguments' => array('access content'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_donate_page'),
      'type' => MENU_CALLBACK,
    ),
    'membership-redirect' => array(
      'access arguments' => array('access content'),
      'page callback' => 'association_drupalorg_membership_redirect',
      'type' => MENU_CALLBACK,
    ),
    'admin/reports/drupalcon' => array(
      'title' => 'DrupalCon',
      'description' => 'Registration & coupons',
      'access arguments' => array('view all orders'),
      'page callback' => 'theme',
      'page arguments' => array('association_drupalorg_drupalcon_report_page'),
    ),
    'admin/reports/drupalcon/registration.csv' => array(
      'access arguments' => array('view all orders'),
      'page callback' => 'association_drupalorg_drupalcon_registration_csv',
      'type' => MENU_CALLBACK,
    ),
  );
}

function association_drupalorg_theme() {
  return array(
    'association_drupalorg_membership_page' => array(
      'template' => 'association-drupalorg-membership-page',
    ),
    'association_drupalorg_donate_page' => array(
      'template' => 'association-drupalorg-donate-page',
    ),
    'association_drupalorg_drupalcon_report_page' => array(
      'template' => 'association-drupalorg-drupalcon-report-page',
    ),
    'association_drupalorg_campaign_block' => array(
      'template' => 'association-drupalorg-campaign-block',
    ),
  );
}

/**
 * When bakery pulls users, it first creates a dummy account with no email
 * address. This confuses CiviCRM and it doesn't make a contact. Having
 * contacts is useful, so we don't have to check that they exist when doing
 * other operations.
 */
function association_drupalorg_user($op, &$edit, &$user, $category = NULL) {
  if ($op === 'after_update' && civicrm_initialize()) {
    require_once 'CRM/Core/BAO/UFMatch.php';
    if (!CRM_Core_BAO_UFMatch::getContactId($user->uid)) {
      CRM_Core_BAO_UFMatch::synchronize($user, FALSE, 'Drupal', civicrm_get_ctype('Individual'));
    }
  }
}

function association_drupalorg_cron() {
  // Denver 2012
  google_dfp_api_replace_creative_view(6734416973, 'association_sponsors_admin', 'page_2'); // All logos
  google_dfp_api_replace_creative_view(6980741093, 'association_sponsors_admin', 'page_3'); // Diamond
  google_dfp_api_replace_creative_view(6980741213, 'association_sponsors_admin', 'page_4'); // Platinum
  // Munich 2012
  google_dfp_api_replace_creative_view(7603231253, 'association_sponsors_admin', 'page_5', array(13, '0+4+6+8+16+20+22+24+28+32')); // All logos
  google_dfp_api_replace_creative_view(7603231493, 'association_sponsors_admin', 'page_5', array(13, '0')); // Diamond
  google_dfp_api_replace_creative_view(7603231613, 'association_sponsors_admin', 'page_5', array(13, '4')); // Platinum
}

function association_drupalorg_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;

  switch ($op) {
    case 'list':
      return array(
        'membership' => array(
          'info' => t('Drupal Association membership'),
          'cache' => BLOCK_NO_CACHE,
          'status' => 1,
          'region' => 'right',
          'visibility' => 1,
          'pages' => 'membership',
        ),
        'campaign' => array(
          'info' => t('Funds Raised for Home Improvement Projects'),
          'region' => 'right',
          'visibility' => 1,
          'pages' => "membership/shirt\nnode/13609",
        ),
      );

    case 'view':
      switch ($delta) {
        case 'membership':
          if (user_is_logged_in()) {
            $content = '';
            foreach (association_drupalorg_civicrm_current_memberships($user) as $membership) {
              $content .= '<p>' . t('@membership_type membership expiring @date', array('@membership_type' => $membership['membership_name'], '@date' => format_date(strtotime($membership['end_date']), 'custom', 'M j, Y'))) . '</p>';
            }
            if ($content === '') {
              $content = '<p>' . t('No current membership.') . '</p>';
            }
            return array(
              'subject' => t('Your membership status'),
              'content' => $content,
            );
          }
          return;

        case 'campaign':
          return array(
            'subject' => t('Funds Raised for Home Improvement Projects'),
            'content' => theme('association_drupalorg_campaign_block'),
          );
      }
      return;
  }
}

function association_drupalorg_preprocess_association_drupalorg_membership_page(&$variables) {
  $variables['individual_usd_url'] = url('cart/add/e-p1629_a34o134_m0', array('query' => array('destination' => 'cart/checkout')));
  $variables['organization_usd_url'] = url('cart/add/e-p1629_a34o139_m0', array('query' => array('destination' => 'cart/checkout')));
  $variables['individual_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 1)));
  $variables['organization_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 2)));

  if (!user_is_logged_in()) {
    $variables['individual_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['individual_usd_url'])));
    $variables['organization_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['organization_usd_url'])));
    $variables['individual_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['individual_eur_url'])));
    $variables['organization_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['organization_eur_url'])));
  }
}

function association_drupalorg_preprocess_association_drupalorg_donate_page(&$variables) {
  $variables['donate_usd_url'] = url('node/1639');
  $variables['donate_eur_url'] = url('civicrm/contribute/transact', array('query' => array('reset' => 1, 'id' => 29)));
  if (!user_is_logged_in()) {
    $variables['donate_usd_url'] = url('membership-redirect', array('query' => array('to' => $variables['donate_usd_url'])));
    $variables['donate_eur_url'] = url('membership-redirect', array('query' => array('to' => $variables['donate_eur_url'])));
  }
}

function association_drupalorg_preprocess_association_drupalorg_drupalcon_report_page(&$variables) {
  $product_id = 1484;
  module_load_include('inc', 'uc_coupon', 'uc_coupon.admin');

  $variables['time_left'] = t('<strong>@time</strong> until DrupalCon', array('@time' => format_interval(strtotime('2012-03-19 8:00:00 MDT') - time())));
  $variables['download'] = l(t('Download CSV'), 'admin/reports/drupalcon/registration.csv', array('html' => TRUE));

  $header = array(
    t('Name'),
    t('Expires'),
    t('Value'),
    t('Count'),
    t('Used'),
    t('Outstanding'),
  );
  $cids = array();
  $rows = array();
  $result = db_query('SELECT cid FROM {uc_coupons} ORDER BY status DESC, value, valid_until ASC');
  $last_value = NULL;
  while ($cid = db_result($result)) {
    $coupon = uc_coupon_load($cid);
    if (isset($coupon->data['products'][$product_id])) {
      $cids[] = $coupon->cid;
      $discount = uc_coupon_format_discount($coupon);
      $usage = uc_coupon_count_usage($cid);

      if ($last_value !== $discount) {
        if (!is_null($last_value)) {
          $rows[] = array(
            '<strong>' . t('Subtotal') . '</strong>',
            '',
            '<strong>' . $last_value . '</strong>',
            '<strong>' . $count_sum . '</strong>',
            '<strong>' . $used_sum . '</strong>',
            '<strong>' . $outstanding_sum . '</strong>',
          );
        }

        $last_value = $discount;
        $count_sum = $used_sum = $outstanding_sum = 0;
      }

      $count_sum += $count = $coupon->bulk ? $coupon->data['bulk_number'] : $coupon->max_uses;
      $used_sum += $used = array_sum($usage['codes']);
      $outstanding_sum += $outstanding = $coupon->status ? (($coupon->bulk ? $coupon->data['bulk_number'] : $coupon->max_uses) - array_sum($usage['codes'])) : 0;

      $rows[] = array(
        l($coupon->name, 'admin/store/coupons/' . $coupon->cid),
        $coupon->status ? ($coupon->valid_until ? _uc_coupon_format_date($coupon->valid_until, variable_get('uc_date_format_default', 'm/d/Y H:iT')) : '-') : t('inactive'),
        $discount,
        $count,
        $used,
        $outstanding,
      );
    }
  }
  $rows[] = array(
    '<strong>' . t('Subtotal') . '</strong>',
    '',
    '<strong>' . uc_coupon_format_discount($coupon) . '</strong>',
    '<strong>' . $count_sum . '</strong>',
    '<strong>' . $used_sum . '</strong>',
    '<strong>' . $outstanding_sum . '</strong>',
  );
  $variables['coupons'] = theme('table', $header, $rows);

  // Get products which have coupon purchase options for the main product.
  $nodes = array($product_id => node_load($product_id));
  association_drupalorg_attribute_name_index($nodes[$product_id]);
  if (count($cids)) {
    $result = db_query("SELECT nid FROM {uc_coupon_purchase} WHERE base_cid IN (" . db_placeholders($cids) . ")", $cids);
    while ($nid = db_result($result)) {
      $nodes[$nid] = node_load($nid);
      association_drupalorg_attribute_name_index($nodes[$nid]);
    }
  }

  $registration_sums = array();
  $payment_sums = array();
  $sold_with = array();
  foreach (association_drupalorg_orders(array_keys($nodes)) as $order) {
    if (isset($order->products[$order->product_index]->data['attributes']['Conference registration'])) {
      $registration_sums[$order->products[$order->product_index]->data['attributes']['Conference registration'][0]] += 1;
    }
    $price = $order->order_total;
    // Subtract membership price
    if (isset($order->products[$order->product_index]->data['attributes']['Membership type'])) {
      foreach ($nodes[$order->products[$order->product_index]->nid]->attributes[$nodes[$order->products[$order->product_index]->nid]->attribute_names['Membership type']]->options as $option) {
        if (in_array($option->name, $order->products[$order->product_index]->data['attributes']['Membership type'])) {
          $price -= $option->price;
        }
      }
    }
    $payment_sums[$price] += 1;
    foreach ($order->products as $key => $product) {
      if ($key !== $order->product_index) {
        $sold_with[$product->title] += 1;
      }
    }
  }
  $rows = array();
  foreach ($registration_sums as $type => $count) {
    $rows[] = array(
      $type,
      $count,
    );
  }
  $variables['registration_sums'] = theme('table', array(t('Registration'), t('Count')), $rows);
  $rows = array();
  $total = 0;
  ksort($payment_sums);
  foreach ($payment_sums as $amount => $count) {
    $total += $amount * $count;
    $rows[] = array(
      number_format($amount),
      $count,
      number_format($amount * $count),
    );
  }
  $rows[] = array(
    '<strong>' . t('Total') . '</strong>',
    '',
    '<strong>' . number_format($total) . '</strong>',
  );
  $variables['payment_sums'] = theme('table', array(t('Amount'), t('Count'), t('Revenue')), $rows);

  $rows = array();
  foreach ($sold_with as $product => $count) {
    $rows[] = array(
      check_plain($product),
      $count,
    );
  }
  $variables['sold_with'] = theme('table', array(t('Product'), t('Count')), $rows);
}

function association_drupalorg_preprocess_association_drupalorg_campaign_block(&$variables) {
  $total = 0;
  foreach (association_drupalorg_orders(array(13394)) as $order) {
    if ($order->order_total > 0) {
      foreach ($order->products as $product) {
        switch ($product->nid) {
          case 13394: // t-shirt
            $total += $product->qty * 35;
            break;

          case 1639: // donation
            $total += $product->price;
            break;
        }
      }
    }
  }
  if ($total < 1000) {
    $variables['amount'] = l('$' . number_format($total), 'node/13609');
  }
  else {
    $variables['amount'] = l('$' . number_format($total / 1000, 1) . 'K', 'node/13609');
  }
  $variables['learn_more_url'] = url('node/13609');
}

function association_drupalorg_drupalcon_registration_csv() {
  drupal_set_header('Content-Type: text/csv');
  drupal_set_header('Content-Disposition: attachment; filename=registration.csv');
  $fp = fopen('php://output', 'w');
  fputcsv($fp, array(
    t('Order'),
    t('Date'),
    t('Name'),
    t('Username'),
    t('Company'),
    t('Title'),
    t('Country'),
    t('Email'),
    t('Registration'),
    t('Training'),
    t('Shirt'),
    t('Meal'),
    t('Other'),
    t('Services'),
    t('Training'),
    t('Drupalgängers'),
    t('Sponsorship'),
    t('Coupon'),
    t('Total'),
    t('Payment'),
  ));
  $registrations = array();
  foreach (association_drupalorg_orders(array(1484)) as $order) {
    $account = user_load($order->uid);

    $contact = array(
      'training' => '',
      'Drupalgängers' => '',
      'sponsorship' => '',
    );
    if (isset($order->products[$order->product_index]->data['attributes']['Please contact me'])) {
      foreach ($order->products[$order->product_index]->data['attributes']['Please contact me'] as $contact_about) {
        foreach (array_keys($contact) as $type) {
          if (strpos($contact_about, $type) !== FALSE) {
            $contact[$type] = t('yes');
          }
        }
      }
    }

    if (!isset($product->data['attributes']['Services you require'])) {
      $product->data['attributes']['Services you require'] = array();
    }

    $training = '';
    foreach ($order->products as $product_training) {
      if (strpos($product_training->model, '-training-') !== FALSE) {
        $training = $product_training->title;
      }
    }

    if (isset($registrations[$order->uid])) {
      // Append to user’s previous order.
      $registrations[$order->uid]['Order'] .= ', ' . $order->order_id;
      $registrations[$order->uid]['Date'] .= ', ' . date('Y-m-d', $order->created);
      $registrations[$order->uid]['Registration'] .= ', ' . $order->products[$order->product_index]->data['attributes']['Conference registration'][0];
      $registrations[$order->uid]['Coupon'] .= ', ' . $order->data['coupon'];
      $registrations[$order->uid]['Total'] .= ', ' . $order->order_total;
      $registrations[$order->uid]['Payment'] .= ', ' . $order->payment_method;
      // Replace
      $registrations[$order->uid]['Meal'] = $order->products[$order->product_index]->data['attributes']['Meal preference'][0];
      $registrations[$order->uid]['Other'] = $order->products[$order->product_index]->data['attributes']['Other meal preference'][0];
      $registrations[$order->uid]['Services'] = implode(', ', $product->data['attributes']['Services you require']);
      $registrations[$order->uid]['Training-contact'] = $contact['training'];
      $registrations[$order->uid]['Drupalgängers'] = $contact['Drupalgängers'];
      $registrations[$order->uid]['Sponsorship'] = $contact['sponsorship'];
      // Replace if set
      if (isset($order->products[$order->product_index]->data['attributes']['T-shirt'])) {
        $registrations[$order->uid]['Shirt'] = $order->products[$order->product_index]->data['attributes']['T-shirt'][0];
      }
      if (!empty($training)) {
        $registrations[$order->uid]['Training'] = $training;
      }
    }
    else {
      $registrations[$order->uid] = array(
        'Order'         => $order->order_id,
        'Date'          => date('Y-m-d', $order->created),
        'Name'          => $account->profile_full_name,
        'Username'      => $account->name,
        'Company'       => $account->profile_current_company_organization,
        'Title'         => $account->profile_job,
        'Country'       => $account->country,
        'Email'         => $account->mail,
        'Registration'  => $order->products[$order->product_index]->data['attributes']['Conference registration'][0],
        'Training'      => $training,
        'Shirt'         => $order->products[$order->product_index]->data['attributes']['T-shirt'][0],
        'Meal'          => $order->products[$order->product_index]->data['attributes']['Meal preference'][0],
        'Other'         => $order->products[$order->product_index]->data['attributes']['Other meal preference'][0],
        'Services'      => implode(', ', $product->data['attributes']['Services you require']),
        'Training-contact' => $contact['training'],
        'Drupalgängers' => $contact['Drupalgängers'],
        'Sponsorship'   => $contact['sponsorship'],
        'Coupon'        => $order->data['coupon'],
        'Total'         => $order->order_total,
        'Payment'       => $order->payment_method,
      );
    }
  }
  foreach ($registrations as $registration) {
    fputcsv($fp, $registration);
  }
  fclose($fp);
}

/**
 * Get all the orders for a product and find that product in each.
 *
 * @param $nids
 *   Array of product node IDs.
 * @return
 *   An array of order objects from uc_order_load(), with $order->product_index
 *   set for $order->products[$order->product_index].
 */
function association_drupalorg_orders($nids) {
  $orders = array();

  $result = db_query("SELECT o.order_id FROM {uc_orders} o INNER JOIN {uc_order_products} op ON op.order_id = o.order_id AND op.nid IN (" . db_placeholders($nids) . ") INNER JOIN {uc_order_statuses} os ON os.order_status_id = o.order_status AND os.state IN ('completed', 'payment_received') ORDER BY o.order_id", $nids);
  while ($order_id = db_result($result)) {
    $order = uc_order_load($order_id);
    foreach ($order->products as $key => $product) {
      if (in_array($product->nid, $nids)) {
        $order->product_index = $key;
        break;
      }
    }
    $orders[] = $order;
  }

  return $orders;
}

/**
 * Set a message for the login page and redirect to it.
 */
function association_drupalorg_membership_redirect() {
  drupal_set_message(t('Please log in to buy your membership or donate.'));
  drupal_goto('user', array('destination' => preg_replace('!^' . url() . '!', '', $_REQUEST['to'])));
}

/**
 * Query CiviCRM's API for an account's contact ID.
 *
 * @param $account
 *   An account object representing the user who's membership details should be
 *   returned.
 */
function association_drupalorg_civicrm_contact_id($account) {
  if (module_exists('civicrm')) {
    civicrm_initialize();

    $contact_id = civicrm_api('uf_match', 'getvalue', array(
      'version' => 3,
      'domain_id' => 1,
      'uf_id' => $account->uid,
      'return' => 'contact_id',
    ));
    if (is_array($contact_id) && $contact_id['is_error'] && !empty($account->mail)) {
      // CiviCRM contacts can only have one Drupal user. Look up by email. An
      // email being used multiple times does happen, so can't use getvalue.
      $result = civicrm_api('email', 'get', array(
        'version' => 3,
        'sequential' => TRUE,
        'email' => $account->mail,
      ));
      $contact_id = $result['values'][0]['contact_id'];
    }
  }

  if (!is_numeric($contact_id)) {
    watchdog('association_drupalorg', 'Could not find CiviCRM contact for %name', array('%name' => $account->name), WATCHDOG_ERROR, l(t('View user'), 'user/' . $account->uid));
    return FALSE;
  }

  return $contact_id;
}

/**
 * Query CiviCRM's API for an account's current memberships.
 *
 * @param $account
 *   An account object representing the user who's membership details should be
 *   returned.
 */
function association_drupalorg_civicrm_current_memberships($account) {
  $current_memberships = array();
  $contact_id = association_drupalorg_civicrm_contact_id($account);

  if ($contact_id !== FALSE) {
    $statuses = civicrm_api('membership_status', 'get', array(
      'version' => 3,
    ));
    $memberships = civicrm_api('membership', 'get', array(
      'version' => 3,
      'contact_id' => $contact_id,
    ));
    foreach ($memberships['values'] as $membership) {
      if ($statuses['values'][$membership['status_id']]['is_current_member'] && !$membership['is_test']) {
        $current_memberships[] = $membership;
      }
    }
  }

  return $current_memberships;
}

function association_drupalorg_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op === 'view') {
    if ($node->type === 'association_membership_benefit') {
      global $user;

      if (user_is_logged_in()) {
        if (count(association_drupalorg_civicrm_current_memberships($user)) > 0) {
          $node->content['field_assoc_benefit_link']['#suffix'] = '<p>' . t('Discount code: <strong>@code</strong>', array('@code' => $node->field_assoc_benefit_code[0]['value'])) . '</p>';
        }
        else {
          unset($node->content['field_assoc_benefit_link']['field']);
          $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Become a member!'), 'membership') . '</strong></p>';
        }
      }
      else {
        unset($node->content['field_assoc_benefit_link']['field']);
        $node->content['field_assoc_benefit_link']['#value'] = '<p>' . $node->field_assoc_benefit_link[0]['display_title'] . '<br /><strong>' . l(t('Sign in to get this discount'), 'user/login', array('query' => drupal_get_destination())) . '</strong></p>';
      }

      $node->content['field_assoc_benefit_restrictions']['#weight'] = 10;
    }
    elseif ($node->type === 'association_sponsorship_level') {
      $node->content['field_assoc_level_notes']['#weight'] = 8;
    }
    elseif ($node->type === 'product') {
      // Hide zero price.
      if ($node->sell_price == 0) {
        $node->content['display_price']['#access'] = FALSE;
      }
      if ($node->nid == 13394) {
        if (user_is_logged_in()) {
          $node->content['display_price']['#access'] = FALSE;
          $node->content['add_to_cart']['#weight'] = -1;
        }
        else {
          $node->content['add_to_cart'] = array(
            'login' => array(
              '#value' => l(t('Log in to donate'), 'membership-redirect', array('query' => array('to' => $_GET['q']), 'attributes' => array('class' => 'action-button'))),
              '#prefix' => '<div class="grid-3 omega front-get-started">',
              '#suffix' => '</div>',
            ),
          );
        }
        $node->content['add_to_cart']['#prefix'] = '<div class="right">';
        $node->content['add_to_cart']['#suffix'] = '</div>';
      }
    }
    elseif ($node->type === 'project') {
      $node->content['projects'] = array(
        '#value' => '<p class="big">' . l(t('◄ See our other projects'), 'projects') . '</p>',
        '#weight' => 100,
        '#access' => !$a3, // not teaser
      );
    }
    elseif ($node->nid == 1104) {
      // Add example ads for https://association.drupal.org/advertising/web.
      $node->content['exmaple_ads'] = array(
        '#prefix' => '<h2 id="examples">' . t('Examples') . '</h2>',
        '#weight' => 1,
        '#sorted' => TRUE,
      );
      $node->content['exmaple_ads']['row_1'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_2'] = drupalorg_crosssite_grid_elements(array(4, 4));
      $node->content['exmaple_ads']['row_1']['column_1']['#value'] = '<h3>' . t('300 x 250 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x250');
      $node->content['exmaple_ads']['row_1']['column_2']['#value'] = '<h3>' . t('300 x 250 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x250');
      $node->content['exmaple_ads']['row_2']['column_1']['#value'] = '<h3>' . t('300 x 100 Image') . '</h3>' . drupalorg_crosssite_ad_block('association-example-image-300x100');
      $node->content['exmaple_ads']['row_2']['column_2']['#value'] = '<h3>' . t('300 x 100 Image + Text') . '</h3>' . drupalorg_crosssite_ad_block('association-example-imagetext-300x100');
    }
  }
  elseif ($op === 'insert' || $op === 'update') {
    if ($node->type === 'association_sponsorship') {
      association_drupalorg_issue_coupons($node->nid);
    }
  }
}

function association_drupalorg_preprocess_node(&$variables) {
  if ($variables['type'] === 'association_sponsorship_level') {
    $variables['classes'][] = drupal_strtolower(str_replace(' ', '-', $variables['node']->field_assoc_level[0]['view']));
  }
}

function association_drupalorg_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id === 'association_sponsor_node_form' && empty($form['field_assoc_sponsor_users'][0]['#default_value']['uid'])) {
    // Default the first sponsor user to the current user.
    $form['field_assoc_sponsor_users'][0]['#default_value']['uid'] = $user->uid;
  }
  elseif ($form_id === 'association_sponsorship_node_form') {
    // There isn't anything good to put in the sponsorship body.
    $form['body_field']['#access'] = FALSE;
    // Show coupon codes.
    $rows = array();
    $result = db_query("SELECT cid FROM {uc_coupons} WHERE code IN ('SPONSOR1-%d-', 'SPONSOR2-%d-')", $form['#node']->nid, $form['#node']->nid);
    while ($cid = db_result($result)) {
      $coupon = uc_coupon_load($cid);
      if ($coupon->bulk) {
        $codes = array($coupon->code . '*');
        for ($id = 0; $id < $coupon->data['bulk_number']; $id += 1) {
          $codes[] = uc_coupon_get_bulk_code($coupon, $id);
        }
      }
      else {
        $codes = array($coupon->code);
      }
      if (!$coupon->status) {
        $valid = t('Inactive');
      }
      else if (!$coupon->valid_until) {
        $valid = t('Unlimited');
      }
      else {
        $valid = format_date($coupon->valid_until, 'custom', variable_get('uc_date_format_default', 'm/d/Y'), 0);
      }
      $usage = array();
      $result_usage = db_query("SELECT uco.code, uo.uid FROM {uc_coupons_orders} AS uco LEFT JOIN {uc_orders} AS uo ON uco.oid = uo.order_id LEFT JOIN {uc_order_statuses} AS uos ON uo.order_status = uos.order_status_id WHERE uos.weight > 0 AND uco.cid = %d", $coupon->cid);
      while ($row = db_fetch_object($result_usage)) {
        $usage[$row->code] = theme('username', user_load($row->uid));
      }

      foreach ($codes as $code) {
        if (substr($code, -1) !== '*') {
          $rows[] = array(check_plain($coupon->name), isset($usage[$code]) ? $usage[$code] : $code, $valid);
        }
      }
    }
    if (count($rows)) {
      $form['coupons'] = array('#value' => theme('table', array(t('Coupon'), t('Code or attendee'), t('Expires')), $rows) . '<p>' . t('Each attendee needs to register individually using a coupon code.') . '</p>');
    }
  }
  elseif ($form_id === 'uc_cart_view_form') {
    // One ticket per cart.
    foreach (element_children($form['items']) as $key) {
      $node = node_load($form['items'][$key]['nid']['#value']);
      if (isset($node->attributes)) {
        foreach ($node->attributes as $attribute) {
          if ($attribute->name === 'Conference registration') {
            $form['items'][$key]['qty']['#type'] = 'value';
          }
        }
      }
      if ($node->type === 'association_training') {
        $form['items'][$key]['qty']['#type'] = 'value';
      }
    }
  }
  elseif (strpos($form_id, 'uc_product_add_to_cart_form_') === 0) {
    if ($form['node']['#value']->type === 'association_sponsorship_level' && count(association_drupalorg_get_sponsors()) === 0) {
      // Do not allow sponsorships to be bought without a sponsor.
      $form['submit']['#suffix'] = '<br />' . l(t('You must be associated with a sponsor'), $_GET['q'], array('fragment' => 'content'));
      $form['submit']['#disabled'] = TRUE;
    }
    elseif ($form['node']['#value']->type === 'association_training') {
      $form['submit']['#value'] = t('Buy with DrupalCon registration.');
      $form['submit']['#disabled'] = TRUE;
    }
    else {
      $weight = 0;
      foreach ($form['node']['#value']->attributes as $attribute_id => $attribute) {
        $weight += 1;
        $form['attributes'][$attribute_id]['#weight'] = $weight;

        switch ($attribute->name) {
          case 'Membership type':
            if ($form['node']['#value']->nid == 13394) {
              // T-shirt is only individual membership
              $form['attributes'][$attribute_id]['#default_value'] = array_keys($form['attributes'][$attribute_id]['#options']);
              $form['attributes'][$attribute_id]['#type'] = 'value';

              // Show nice button
              $form['submit']['#attributes']['class'] .= ' action-button';
              $form['submit']['#value'] = t('@price for 1 year + t-shirt', array('@price' => preg_replace('/\.00$/', '', strip_tags($form['node']['#value']->content['display_price']['#value']))));
              $form['#prefix'] = '<div class="grid-3 omega front-get-started">';
              $form['#suffix'] = '</div>';
              $form['attributes']['#prefix'] = '<div class="container-inline">';
              $form['attributes']['#suffix'] = '</div>';
            }
            else {
              // Make membership prices clear
              foreach ($form['attributes'][$attribute_id]['#options'] as $key => $value) {
                $form['attributes'][$attribute_id]['#options'][$key] = preg_replace('!\+(\$\d+\.\d+)!', t('\1 for 1 year'), $value);
              }

              // Add heading and make description larger
              $form['attributes'][$attribute_id]['#prefix'] = '<h2>' . t('Drupal Association Membership') . '</h2>';
              $form['attributes'][$attribute_id]['#prefix'] .= $form['attributes'][$attribute_id]['#description'];
              unset($form['attributes'][$attribute_id]['#description']);

              // Add current memberships
              $memberships = '';
              if (user_is_logged_in()) {
                foreach (association_drupalorg_civicrm_current_memberships($user) as $membership) {
                  $memberships .= '<li>' . t('@membership_type membership expiring @date', array('@membership_type' => $membership['membership_name'], '@date' => format_date(strtotime($membership['end_date']), 'custom', 'M j, Y'))) . '</li>';
                }
              }
              if (!empty($memberships)) {
                $form['attributes'][$attribute_id]['#prefix'] .= '<p><strong>' . t('Your current membership') . '</strong></p><ul>' . $memberships . '</ul>';
              }
            }
            break;

          case 'T-shirt':
            if ($form['node']['#value']->nid == 13394) {
              // T-shirt does not need a huge form.
              $form['attributes'][$attribute_id]['#options'][''] = $form['attributes'][$attribute_id]['#title'];
              unset($form['attributes'][$attribute_id]['#title']);
            }
            break;

          case 'Conference registration':
            // Make sure user is logged in.
            if (user_is_logged_in()) {
              // And properly working with Bakery.
              if (strpos($user->init, variable_get('bakery_master', 'http://drupal.org/')) === 0 || strpos($user->init, preg_replace('!^http:!', 'https:', variable_get('bakery_master', 'http://drupal.org/'))) === 0) {
                // Load profile data we might show on badges.
                $account = user_load($user->uid);
                $personal_info_fields = array('profile_full_name', 'profile_country', 'profile_irc_nick', 'profile_personal_home_page', 'profile_twitter_url');
                $work_info_fields = array('profile_job', 'profile_current_company_organization');
                $all_fields = array_merge($personal_info_fields, $work_info_fields);
                $fields = array();
                $result = db_query("SELECT name, visibility, type, page, title FROM {profile_fields} WHERE name IN (" . db_placeholders($all_fields, 'text') . ")", $all_fields);
                while ($field = db_fetch_object($result)) {
                  $fields[$field->name] = $field;
                }

                $personal_info = '';
                foreach ($personal_info_fields as $name) {
                  if ($name === 'profile_full_name' && empty($account->profile_full_name)) {
                    $personal_info .= theme('user_profile_item', array(
                      '#title' => check_plain($fields[$name]->title),
                      '#value' => '<div class="warning">' . t('While not required, your full name is appreciated.') . ' ' . l(t('Edit'), $account->init . '/Personal information', array('query' => array('destination' => 'denver2012-registration'))) . '</div>',
                    ));
                  }
                  else {
                    $personal_info .= theme('user_profile_item', array(
                      '#title' => check_plain($fields[$name]->title),
                      '#value' => profile_view_field($account, $fields[$name]),
                    ));
                  }
                }
                $work_info = '';
                foreach ($work_info_fields as $name) {
                  $work_info .= theme('user_profile_item', array(
                    '#title' => check_plain($fields[$name]->title),
                    '#value' => profile_view_field($account, $fields[$name]),
                  ));
                }

                $form['attributes'][$attribute_id]['#prefix'] = '<h2>' . t('Personal information') . '</h2>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . t('We use your Drupal.org account. This information can be updated on Drupal.org at any time, and may be printed on your badge.') . '</p>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<div class="profile"><dl class="clear-block">' . $personal_info . '</dl></div>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . l(t('Edit personal information'), $account->init . '/Personal information', array('query' => array('destination' => 'denver2012-registration'))) . '</p>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<h3>' . t('Work') . '</h3>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<div class="profile"><dl class="clear-block">' . $work_info . '</dl></div>';
                $form['attributes'][$attribute_id]['#prefix'] .= '<p>' . l(t('Edit work'), $account->init . '/Work', array('query' => array('destination' => 'denver2012-registration'))) . '</p>';

                // Registration heading
                $form['attributes'][$attribute_id]['#prefix'] .= '<h2>' . $form['attributes'][$attribute_id]['#title'] . '</h2>';
                unset($form['attributes'][$attribute_id]['#title']);

                // Check for existing order. One per user.
                $uc_attribute = uc_attribute_load($attribute_id, $form['node']['#value']->nid, 'product');
                $previously_paid = 0;
                $result = db_query("SELECT o.order_id FROM {uc_orders} o INNER JOIN {uc_order_products} op ON op.order_id = o.order_id AND op.nid = %d WHERE o.uid = %d", $form['node']['#value']->nid, $user->uid);
                while ($order_id = db_result($result)) {
                  $order = uc_order_load($order_id);
                  if ($order->order_status === 'payment_received' || $order->order_status === 'completed') {
                    foreach ($order->products as $product) {
                      if (isset($product->data['attributes']['Conference registration'])) {
                        foreach ($product->data['attributes']['Conference registration'] as $attribute) {
                          foreach ($form['attributes'][$attribute_id]['#options'] as $option_id => $label) {
                            if (strpos($label, $attribute) === 0) {
                              // You can not buy something twice.
                              unset($form['attributes'][$attribute_id]['#options'][$option_id]);
                              // … including training.
                              if ($option_id == 198) {
                                unset($form['attributes'][$attribute_id]['#options'][208]);
                              }
                              elseif ($option_id == 208) {
                                unset($form['attributes'][$attribute_id]['#options'][198]);
                              }

                              // Add to amount paid.
                              $previously_paid += $uc_attribute->options[$option_id]->price;

                              // Let the user know where they are.
                              drupal_set_message(t('You have already registered for %label.', array('%label' => $uc_attribute->options[$option_id]->name)));
                            }
                          }
                        }
                      }
                    }
                  }
                  else {
                    drupal_set_message(t('You already have a <a href="!order">pending order</a>. Please only complete one order per user account.', array('!order' => url('user/' . $user->uid . '/order/' . $order->order_id))), 'warning');
                  }
                }

                $full_option_ids = array(144, 213, 203, 194);
                if ($previously_paid == $uc_attribute->options[144]->price) {
                  // Already fully registered.
                  foreach ($full_option_ids as $option_id) {
                    unset($form['attributes'][$attribute_id]['#options'][$option_id]);
                  }
                  unset($form['attributes'][$attribute_id]['#options'][149]);
                  unset($form['attributes'][$attribute_id]['#options'][198]);
                }
                else {
                  // Not fully registered.
                  // Remove no-additional-cost training.
                  unset($form['attributes'][$attribute_id]['#options'][208]);

                  // Out of the full registrations, show the one matching the
                  // price remaining.
                  foreach ($full_option_ids as $option_id) {
                    if ($previously_paid + $uc_attribute->options[$option_id]->price != $uc_attribute->options[144]->price) {
                      unset($form['attributes'][$attribute_id]['#options'][$option_id]);
                    }
                  }
                }

                if (count($form['attributes'][$attribute_id]['#options']) === 0) {
                  drupal_set_message(t('You have already bought your conference registration and training. You can only buy one for each user account.'));
                  $form['attributes']['#access'] = FALSE;
                  $form['submit']['#access'] = FALSE;
                  return;
                }

                if (isset($_GET['dmb']) && isset($form['attributes'][$attribute_id]['#options'][149])) {
                  $form['attributes'][$attribute_id]['#default_value'] = array(149);
                }
                else {
                  $form['attributes'][$attribute_id]['#default_value'] = array(reset(array_keys($form['attributes'][$attribute_id]['#options'])));
                }
                $form['#after_build'][] = 'association_drupalorg_conference_registration_after_build';
                association_drupalorg_attribute_name_index($form['node']['#value']);
                drupal_add_js(drupal_get_path('module', 'association_drupalorg') .'/association_drupalorg.js');
                drupal_add_js(array(
                  'associationDrupalorgConfReg' => 'input[name^=attributes[' . $attribute_id . ']',
                  'associationDrupalorgHasShirt' => $full_option_ids,
                  'associationDrupalorgShirt' => '#edit-attributes-' . $form['node']['#value']->attribute_names['T-shirt'] . '-wrapper',
                ), 'setting');

                // Make prices clear.
                foreach ($form['attributes'][$attribute_id]['#options'] as $option_id => $value) {
                  $form['attributes'][$attribute_id]['#options'][$option_id] = preg_replace('!\+(\$\d+\.\d+)!', '\1', $value);
                }

                // Trainings
                if (isset($form['attributes'][$attribute_id]['#options'][198]) || $form['attributes'][$attribute_id]['#options'][208]) {
                  $trainings_view = views_get_view('association_trainings');
                  $trainings_view->set_arguments(array($form['node']['#value']->nid));
                  $trainings_view->execute();
                  if (count($trainings_view->result) > 0) {
                    $form['attributes']['training'] = array(
                      '#type' => 'radios',
                      '#title' => t('Training'),
                      '#options' => array(
                        '' => t('No training'),
                      ),
                      '#weight' => $weight + 0.5,
                    );
                    foreach ($trainings_view->result as $training) {
                      // Microsoft’s free training at Denver 2012 requires
                      // approval to attend. This is accomplished by checking
                      // for your username in a webform submission they will be
                      // doing.
                      if ($training->nid == 14093 && !db_result(db_query("SELECT 1 FROM {webform_submitted_data} WHERE nid = 14098 AND data = '%s'", $user->name))) {
                        continue;
                      }
                      $form['attributes']['training']['#options'][$training->nid] = t('<strong>@title</strong> by @by !more, @price', array(
                        '@title' => $training->node_title,
                        '@by' => $training->node_data_field_training_trainers_field_training_trainers_value,
                        '@price' => '$' . number_format($training->uc_products_sell_price, 2),
                        '!more' => l('more info', $training->node_data_field_training_trainers_field_training_link_url),
                      ));
                    }
                  }
                }

                // Add to Cart is boring.
                $form['submit']['#value'] = t('I’m going to DrupalCon!');

                array_unshift($form['#submit'], 'association_drupalorg_conference_registration_submit');
                $form['#validate'][] = 'association_drupalorg_conference_registration_validate';
              }
              else { // Not synced for bakery.
                drupal_set_message(t('Your account is not synced for single sign on, please <a href="!contact">contact us</a>, select Website feedback category. Include your Drupal.org username and/or email address used.', array('!contact' => url('contact'))), 'warning');
                $form['attributes']['#access'] = FALSE;
                $form['submit']['#access'] = FALSE;
              }
            }
            else {
              // Require login
              drupal_set_message(t('Please <a href="!login">log in</a> to purchase DrupalCon tickets.', array('!login' => url('user', array('query' => drupal_get_destination())))), 'warning');
              $form['attributes']['#access'] = FALSE;
              $form['submit']['#access'] = FALSE;
            }
            break;
        }
      }
    }
  }
}

function association_drupalorg_conference_registration_after_build($form, $form_state) {
  association_drupalorg_attribute_name_index($form['node']['#value']);
  $registration_attribute_id = $form['node']['#value']->attribute_names['Conference registration'];
  $registration_options = array_filter($form_state['values']['attributes'][$registration_attribute_id]);
  $chosen_full_registration = reset(array_intersect($registration_options, array(144, 213, 203, 194)));
  // If not a full registration…
  if (empty($chosen_full_registration)) {
    // … no t-shirt. JS does the hiding.
    unset($form['attributes'][$form['node']['#value']->attribute_names['T-shirt']]['#required']);
  }

  // If training…
  if (array_intersect($registration_options, array(198, 208))) {
    // … require training.
    $form['attributes']['training']['#required'] = TRUE;
  }

  return $form;
}

/**
 * Hard-coding IDs is non-ideal. We want to refer to product attriubtes by name.
 */
function association_drupalorg_attribute_name_index(&$node) {
  $node->attribute_names = array();
  if (isset($node->attributes)) {
    foreach ($node->attributes as $attribute_id => $attribute) {
      $node->attribute_names[$attribute->name] = $attribute_id;
    }
  }
}

function association_drupalorg_conference_registration_validate($form, $form_state) {
  association_drupalorg_attribute_name_index($form['node']['#value']);
  $registration_attribute_id = $form['node']['#value']->attribute_names['Conference registration'];
  $uc_attribute = uc_attribute_load($registration_attribute_id, $form['node']['#value']->nid, 'product');
  $registration_options = array_filter($form_state['values']['attributes'][$registration_attribute_id]);
  $chosen_full_registration = reset(array_intersect($registration_options, array(144, 213, 203, 194)));
  // If full registration, do not allow extras.
  if (!empty($chosen_full_registration) && count(array_intersect($registration_options, array(149, 198))) > 0) {
    form_set_error('attributes][' . $registration_attribute_id, t('%registration includes %add149 and %add198, you do not need to register for both.', array('%registration' => $uc_attribute->options[$chosen_full_registration]->name, '%add149' => $uc_attribute->options[149]->name, '%add198' => $uc_attribute->options[198]->name)));
  }

  if (!empty($form_state['values']['attributes']['training']) && empty($chosen_full_registration) && count(array_intersect($registration_options, array(198, 208))) === 0) {
    form_set_error('attributes][' . $registration_attribute_id, t('If you select a training, you must have either a full registration or training registration.'));
  }
}

function association_drupalorg_conference_registration_submit($form, $form_state) {
  if (!empty($form_state['values']['attributes']['training'])) {
    uc_cart_add_item($form_state['values']['attributes']['training']);
  }
}

function association_drupalorg_views_query_alter(&$view, &$query) {
  if ($view->name === 'association_members') {
    // Blanks should be sorted to the end. The query is already filesort and we
    // can turn views' cache on if needed.
    list($field, $order) = explode(' ', $query->orderby[0]);
    $query->orderby[0] = "(" . $field . " = '' OR " . $field . " IS NULL) " . $order . ", " . $field . " " . $order;
  }
}

function association_drupalorg_views_pre_render(&$view) {
  if ($view->name === 'association_store_con_sponsor') {
    // Remind about sponsor associated with, or lack thereof.
    if (user_is_logged_in()) {
      $sponsors = association_drupalorg_get_sponsors();
      if (count($sponsors) === 0) {
        drupal_set_message(t('You currently are not associated with a sponsor. Before you buy, either <a href="!create">create your sponsor</a> or get added to an <a href="!sponsors">existing sponsor</a>.', array('!create' => url('node/add/association-sponsor', array('query' => drupal_get_destination())), '!sponsors' => url('sponsor/sponsors'))), 'warning');
      }
      else {
        drupal_set_message(t('You are buying for !sponsor.', array('!sponsor' => l($sponsors[0]->title, 'node/' . $sponsors[0]->nid))));
      }
    }
    else {
      drupal_set_message(t('You must <a href="!login">log in</a> to buy sponsorships.', array('!login' => url('user', array('query' => drupal_get_destination())))), 'warning');
    }
  }
}

/**
 * If one item is removed, empty the whole cart. For DrupalCon, we need to sync
 * up training; validation is done on add. For others, we always have one item
 * and maybe a donation.
 */
function association_drupalorg_cart_item($op, $item) {
  static $called = FALSE;
  if (!$called && $op === 'remove') {
    $called = TRUE;
    uc_cart_empty($item->cart_id);
  }
}

function association_drupalorg_uc_payment_entered($order) {
  foreach ($order->products as $product) {
    $node = node_load($product->nid);
    if ($node->type === 'association_sponsorship_level') {
      // Create a sponsorship with the customer's sponor and the sponsorship
      // level bought.
      $sponsors = association_drupalorg_get_sponsors($order->uid);
      $sponsorship = new stdClass();
      $sponsorship->type = 'association_sponsorship';
      $sponsorship->title = $node->title;
      $sponsorship->field_assoc_sponsorship_level = array(
        array('nid' => $node->nid),
      );
      $sponsorship->field_assoc_sponsorship_sponsor = array(
        array('nid' => $sponsors[0]->nid),
      );
      node_save($sponsorship);
    }
  }
}

/**
 * Set up sponsor nodes, and future associated nodes, in the
 * association_drupalorg_sponsor realm by nid.
 */
function association_drupalorg_node_access_records($node) {
  if (in_array($node->type, array('association_sponsor', 'association_sponsorship'))) {
    return array(
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => 0,
        'grant_view' => TRUE,
        'grant_update' => FALSE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
      array(
        'realm' => 'association_drupalorg_sponsor',
        'gid' => $node->type === 'association_sponsor' ? $node->nid : $node->field_assoc_sponsorship_sponsor[0]['nid'],
        'grant_view' => TRUE,
        'grant_update' => TRUE,
        'grant_delete' => FALSE,
        'priority' => 0,
      ),
    );
  }
}

/**
 * If a user is associated with a sponsor, grant them access to that nid in the
 * association_drupalorg_sponsor realm.
 */
function association_drupalorg_node_grants($account, $op) {
  if ($op === 'view') {
    return array('association_drupalorg_sponsor' => array(0));
  }
  elseif ($op === 'update') {
    $grants = array('association_drupalorg_sponsor' => array());
    foreach (association_drupalorg_get_sponsors($account->uid) as $sponsor) {
      $grants['association_drupalorg_sponsor'][] = $sponsor->nid;
    }
    if (count($grants['association_drupalorg_sponsor'])) {
      return $grants;
    }
  }
}

function association_drupalorg_field_access($op, $field, $account, $node = NULL) {
  if ($op === 'edit') {
    switch ($field['field_name']) {
      // Only allow DfP admins to change DfP info.
      case 'field_assoc_sponsor_dfp':
      case 'field_sponsorship_dfp':
        return user_access('administer Google DfP API');

      case 'field_sponsorship_offer':
        $level = node_load($node->field_assoc_sponsorship_level[0]['nid']);
        return (bool) $level->field_assoc_level_offers[0]['value'];
    }
    switch ($field['display_settings']['parent']) {
      // Do not let sponsors edit their conference information, like
      // sponsorship level.
      case 'group_sponsorship_conference':
        return user_access('edit any association_sponsorship content');

      // Only show web ad information if sponsorship level has it.
      case 'group_sponsorship_web_ad':
        if (is_null($node)) { // $node is not set for AHAH request just uploading the image.
          return TRUE;
        }
        $level = node_load($node->field_assoc_sponsorship_level[0]['nid']);
        return (bool) $level->field_assoc_level_web_ads[0]['value'];
    }
  }
  return TRUE;
}

/**
 * Find the sponsors associated with a user.
 *
 * @param $uid
 *   The user ID to check, or omit for the current user.
 * @return
 *   An array of objects with nid and title.
 */
function association_drupalorg_get_sponsors($uid = NULL) {
  if ($uid === NULL) {
    global $user;
    $uid = $user->uid;
  }
  $sponsors = array();
  $result = db_query("SELECT n.title, n.nid FROM {content_field_assoc_sponsor_users} su INNER JOIN {node} n ON n.vid = su.vid AND n.status = 1 WHERE su.field_assoc_sponsor_users_uid = %d", $uid);
  while ($sponsor = db_fetch_object($result)) {
    $sponsors[] = $sponsor;
  }
  return $sponsors;
}

function association_drupalorg_ca_action() {
  return array(
    'association_drupalorg_membership' => array(
      '#title' => t('Update Association membership'),
      '#category' => t('Association cutstom'),
      '#callback' => 'association_drupalorg_update_membership',
      '#arguments' => array(
        'order' => array('#entity' => 'uc_order', '#title' => t('Order')),
      ),
    ),
  );
}

/**
 * Save membership to CiviCRM and MailChimp subscriptions.
 */
function association_drupalorg_update_membership($order) {
  $account = user_load($order->uid);

  // DrupalCon mailing list.
  $please_contact_me = uc_attribute_load(24);
  foreach ($order->products as $product) {
    if (isset($product->data['attributes'][$please_contact_me->name]) && array_search($please_contact_me->options[124]->name, $product->data['attributes'][$please_contact_me->name]) !== FALSE) {
      $lists = _mailchimp_get_available_lists($account);
      $q = _mailchimp_get_api_object();
      $list_id = '189afc7b7a'; // Denver, todo- don't hardcode
      _mailchimp_subscribe_user($lists[$list_id], $account->mail, _mailchimp_load_user_list_mergevars($account->uid, $list_id, $q->listMergeVars($list_id)), FALSE);
    }
  }

  $contact_id = association_drupalorg_civicrm_contact_id($account);
  if ($contact_id !== FALSE) {
    // Record customer information in CiviCRM.
    $addresses = civicrm_api('address', 'get', array('version' => 3, 'contact_id' => $contact_id));
    $countries = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'country'));
    $state_provinces = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'stateProvince'));
    $address_types = civicrm_api('constant', 'get', array('version' => 3, 'name' => 'locationType'));
    civicrm_api('contact', 'update', array(
      'version' => 3,
      'id' => $contact_id,
      'first_name' => $order->billing_first_name,
      'last_name' => $order->billing_last_name,
      'current_employer' => $order->billing_company,
    ));
    $address = array(
      'contact_id' => $contact_id,
      'street_address' => $order->billing_street1,
      'supplemental_address_1' => $order->billing_street2,
      'city' => $order->billing_city,
      'postal_code' => $order->billing_postal_code,
      'state_province_id' => array_search(uc_zone_get_by_id($order->billing_zone), $state_provinces['values']),
      'country_id' => array_search(uc_country_get_by_id($order->billing_country), $countries['values']),
    );
    $new = TRUE;
    foreach ($addresses['values'] as $existing_address) {
      if (count(array_diff_assoc($address, $existing_address)) === 0) {
        $new = FALSE;
        $existing_address['version'] = 3;
        $existing_address['is_primary'] = TRUE;
        $existing_address['is_billing'] = TRUE;
        civicrm_api('address', 'update', $existing_address);
        break;
      }
      else {
        $existing_address['version'] = 3;
        $existing_address['is_primary'] = FALSE;
        $existing_address['is_billing'] = FALSE;
        civicrm_api('address', 'update', $existing_address);
      }
    }
    if ($new) {
      $address['version'] = 3;
      $address['is_primary'] = TRUE;
      $address['is_billing'] = TRUE;
      $address['location_type_id'] = array_search('Main', $address_types['values']);
      civicrm_api('address', 'create', $address);
    }

    $membership_types = array();
    $membership_remind = array();
    $civicrm_types = civicrm_api('membership_type', 'get', array('version' => 3));
    foreach ($civicrm_types['values'] as $civicrm_type) {
      $membership_types[$civicrm_type['name']] = $civicrm_type['id'];
      $membership_remind[$civicrm_type['name']] = $civicrm_type['renewal_reminder_day'];
    }

    foreach ($order->products as $product) {
      // Record contribution.
      $contribution = civicrm_api('contribution', 'create', array(
        'version' => 3,
        'contact_id' => $contact_id,
        'currency' => $order->currency,
        'total_amount' => number_format($product->price, 2),
        'receive_date' => date('Y-m-d', $order->created),
        'source' => 'UberCart: ' . $product->title,
        'contribution_type' => 'Donation',
        'trxn_id' => l($order->order_id, 'admin/store/orders/' . $order->order_id, array('absolute' => TRUE)),
      ));

      // Record membership.
      if (isset($product->data['attributes']['Membership type'])) {
        foreach ($product->data['attributes']['Membership type'] as $membership_type) {
          $params = array(
            'version' => 3,
            'contact_id' => $contact_id,
            'membership_type_id' => $membership_types[$membership_type],
            'join_date' => date('Y-m-d'),
            'start_date' => date('Y-m-d'),
            'reminder_date' => date('Y-m-d', mktime(0, 0, 0, date('m'), date('d') - 1 - $membership_remind[$membership_type], date('Y') + 1)),
            'end_date' => date('Y-m-d', mktime(0, 0, 0, date('m'), date('d') - 1, date('Y') + 1)),
            'source' => 'UberCart',
          );
          $new = TRUE;
          foreach (association_drupalorg_civicrm_current_memberships($account) as $membership) {
            if ($membership['membership_name'] === $membership_type) {
              // Update existing memebership.
              $new = FALSE;
              $membership['version'] = 3;
              $membership['source'] .= ', ' . t('updated by UberCart @date', array('@date' => date('Y-m-d')));
              $membership['reminder_date'] = date('Y-m-d', mktime(0, 0, 0, date('m', strtotime($membership['end_date'])), date('d', strtotime($membership['end_date'])) - $membership_remind[$membership_type], date('Y', strtotime($membership['end_date'])) + 1));
              $membership['end_date'] = date('Y-m-d', mktime(0, 0, 0, date('m', strtotime($membership['end_date'])), date('d', strtotime($membership['end_date'])), date('Y', strtotime($membership['end_date'])) + 1));
              $membership = civicrm_api('membership', 'update', $membership);
              break;
            }
          }
          if ($new) {
            $membership = civicrm_api('membership', 'create', $params);
          }
          civicrm_api('membership_payment', 'create', array(
            'version' => 3,
            'contribution_id' => $contribution['id'],
            'membership_id' => $membership['id'],
          ));
        }
      }
    }
  }
}

/**
 * Add a product to the checkout process. This would be good to make generic
 * and put in a separate module.
 */
function association_drupalorg_checkout_pane() {
  $node = node_load(1639);
  return array(
    array(
      'id' => 'association_drupalorg_donate',
      'callback' => 'association_drupalorg_donate_pane',
      'title' => check_plain($node->title),
      'desc' => t('Donation to the Drupal Association.'),
      'weight' => 0,
      'enabled' => FALSE,
      'process' => TRUE,
      'collapsible' => FALSE,
      'node' => $node,
    ),
  );
}

/**
 * Process the product form early, in case it alters the cart contents.
 */
function association_drupalorg_checkout_pane_alter(&$panes) {
  foreach ($panes as $pane) {
    if ($pane['id'] === 'association_drupalorg_donate' && $pane['enabled']) {
      $form_state = array();
      $form = uc_product_add_to_cart_form($form_state, $pane['node']);
      $form_id = 'uc_product_add_to_cart_form_' . $pane['node']->nid;
      if (!empty($_POST)) {
        $form['#post'] = $_POST;
      }
      drupal_prepare_form($form_id, $form, $form_state);
      form_builder($form_id, $form, $form_state);
      if (isset($form_state['clicked_button'])) { // If the button was ours.
        drupal_process_form($form_id, $form, $form_state);
        unset($_POST); // Prevent processing the enclosing form.
      }
      association_drupalorg_donate_pane('stash form', $form, NULL);
    }
  }
}

function association_drupalorg_donate_pane($op, $arg1, $arg2) {
  static $form;

  switch ($op) {
    case 'stash form': // custom, to hand off the form array.
      $form = $arg1;
      return;

    case 'view':
      foreach (uc_cart_get_contents() as $product) {
        if ($product->nid == $form['node']['#value']->nid) {
          return; // Do not ask for a second donation.
        }
      }
      unset($form['#type']); // would override fieldset
      unset($form['#description']); // would override description below

      return array(
        'contents' => $form,
        'description' => check_markup($form['node']['#value']->body, $form['node']['#value']->format),
      );
  }
}

function association_drupalorg_issue_coupons($sponsorship_nid) {
  $sponsorship = node_load($sponsorship_nid);
  $level = node_load($sponsorship->field_assoc_sponsorship_level[0]['nid']);

  foreach (array(1, 2) as $n) {
    $field = 'field_assoc_level_coupon' . $n . '_';
    if (empty($level->{$field . 'value'}[0]) || empty($level->{$field . 'expire'}[0]) || empty($level->{$field . 'name'}[0]) || empty($level->{$field . 'count'}[0]) || empty($level->{$field . 'prod'}[0])) {
      continue;
    }
    $coupon = new stdClass;
    $coupon->code = 'SPONSOR' . $n . '-' . $sponsorship->nid . '-';
    if (db_result(db_query("SELECT 1 FROM {uc_coupons} WHERE code = '%s'", $coupon->code))) {
      continue;
    }
    $coupon->type = 'price';
    $coupon->status = TRUE;
    $coupon->minimum_order = 0;
    $coupon->bulk = TRUE;
    $coupon->max_uses = 1;
    $coupon->valid_from = time();
    $coupon->value = $level->{$field . 'value'}[0]['value'];
    $coupon->valid_until = strtotime($level->{$field . 'expire'}[0]['value'] . ' ' . $level->{$field . 'expire'}[0]['timezone']);
    $coupon->name = t('@sponsorship, @coupon', array('@sponsorship' => $sponsorship->title, '@coupon' => $level->{$field . 'name'}[0]['value']));
    $coupon->data = array(
      'bulk_number' => $level->{$field . 'count'}[0]['value'],
      'bulk_length' => 8,
      'apply_to' => 'products_total',
      'products' => drupal_map_assoc($level->{$field . 'prod'}[0]),
      'wholesale' => 1,
      'purchase_suffix_length' => 8,
    );
    uc_coupon_save($coupon);
  }
}
