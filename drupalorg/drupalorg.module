<?php

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * The node ID of the Drupal core project.
 */
define('DRUPALORG_CORE_NID', 3060);

/**
 * Profile field ID for country.
 */
define('DRUPALORG_COUNTRY_PID', 17);

/**
 * Profile field ID for languages.
 */
define('DRUPALORG_LANGUAGES_PID', 48);

/**
 * Major version number for core project listings.
 */
define('DRUPALORG_DOWNLOAD_MAJOR_VERSION', 7); // 7.x

/**
 * TID for API compatibility for project listings.
 */
define('DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID', 103); // 7.x

/**
 * Implementation of hook_init().
 */
function drupalorg_init() {
  global $user, $conf;

  // Use the dashboard as the home page if the user selected it.
  if ($user->uid !== 0 && !empty($user->data['drupalorg_set_home']) && $_SERVER['REQUEST_URI'] === url('')) {
    drupal_goto('user/' . $user->uid . '/dashboard');
  }

  // Add forum ads & tracking
  $forum_ads = variable_get('drupalorg_forum_ad', array());
  if (arg(0) === 'forum' && isset($forum_ads[arg(1)])) {
    $forum_id = arg(1);
  }
  elseif (arg(0) === 'node' && is_numeric(arg(1)) && ($node = menu_get_object()) && $node->type === 'forum' && isset($forum_ads[$node->tid])) {
    // @todo d7 - This is not right...
    $forum_id = $node->tid;
  }
  if (isset($forum_id)) {
    // Tracking
    $term = taxonomy_term_load($forum_id);
    $conf['googleanalytics_codesnippet_before'] .= "_gaq.push(['_setCustomVar', 1, 'Forum', '" . check_plain($term->name) . "', 3]);"; // 3 is page-level

    // Ads
    if (!empty($forum_ads[$forum_id])) {
      drupal_add_region_content('right', drupalorg_crosssite_ad_block($forum_ads[$forum_id], FALSE));
    }
  }

  // Temporary message about the Solr index being rebuilt.
  if (variable_get('drupalorg_warn_search_index_rebuild', FALSE)) {
    if (arg(0) == 'search' || arg(0) == 'download' || arg(0) == 'start' ||
        (arg(0) == 'project' && (arg(1) == 'modules' || arg(1) == 'themes' || arg(1) == 'distributions' || arg(1) == 'theme engines'))) {
      drupal_set_message(t('We are rebuilding the search index for the update to drupal.org. The search results may produce broken or out-of-date results until the index is fully rebuilt. We will remove this message when the indexing is complete. Do not report any search errors at this time.'));
    }
  }
}

/**
 * Implements hook_menu().
 */
function drupalorg_menu() {
  // Custom 403 page handler to provide better messages and help.
  $items['drupalorg-403'] = array(
    'title' => 'Access denied',
    'page callback' => 'drupalorg_403_page',
    'access callback' => 1,
    'type' => MENU_CALLBACK,
  );

  $items['start'] = array(
    'title' => 'Get Started with Drupal',
    'page callback' => 'drupalorg_start',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'drupalorg_download',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['home'] = array(
    'title' => 'Drupal - Open Source CMS',
    'page callback' => 'drupalorg_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['community'] = array(
    'title' => 'Community & Support',
    'page callback' => 'drupalorg_community',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['getting-involved'] = array(
    'title' => 'Getting Involved',
    'page callback' => 'drupalorg_getting_involved',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['drupal-7.0'] = array(
    'title' => t('Drupal 7 - Easier and more powerful than ever'),
    'page callback' => 'theme',
    'page arguments' => array('drupalorg_d7_announcement', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Redirect some legacy paths related to the security listings.
  $items['security-contrib'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib'),
    'type' => MENU_CALLBACK,
  );
  $items['security-contrib/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa/rss.xml'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/drupalorg'] = array(
    'title' => 'Drupal.org settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_settings_form'),
  );
  $items['admin/config/drupalorg-ads'] = array(
    'title' => 'Drupal.org ad settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_ad_settings_form'),
  );

  return $items;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalorg_field_access($op, $field, $account, $node = NULL) {
  global $user;

  if ($op === 'edit') {
    switch ($field['field_name']) {
      // Only allow admins, but not the node owner, to change an organization's
      // visibility and status of case studies.
      case 'field_organization_list_rule':
      case 'field_organization_hosting_level':
      case 'field_organization_hosting_last':
      case 'field_organization_hosting_by':
      case 'field_organization_issue':
      case 'field_status':
        if ($node !== NULL && $node->uid === $user->uid) {
          return FALSE;
        }
        return user_access('administer nodes');

      // drupalorg_nodeapi('presave') handles this.
      case 'field_organization_marketplace':
        return FALSE;
    }
  }
  return TRUE;
}

/**
 * Implements hook_block_info().
 */
function drupalorg_block_info() {
  return array(
    'set_home' => array(
      'info' => t('Set user home page'),
      'cache' => DRUPAL_NO_CACHE,
    ),
    'drupalorg_activity' => array('info' => t('Drupal.org Activity')),
    'add_to_dashboard' => array(
      'info' => t('Add to Dashboard links'),
      'cache' => DRUPAL_CACHE_PER_USER | DRUPAL_CACHE_PER_PAGE,
    ),
    'tracker_user' => array(
      'info' => t('Your posts'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function drupalorg_block_view($delta, $block = NULL) {
  switch ($delta) {
    case 'set_home':
      if (user_is_logged_in()) {
        return array('content' => drupal_get_form('drupalorg_set_home'));
      }
      break;

    case 'drupalorg_activity':
      return array(
        'subject' => t('Drupal.org Activity'),
        'content' => drupalorg_activity_block(),
      );

    case 'add_to_dashboard':
      if (user_is_logged_in()) {
        global $user;
        $item = menu_get_item();
        $blocks = array();
        switch ($item['path']) {
          case 'node/%':
            if ($item['page_arguments'][0]->type === 'project_project') {
              $blocks[] = array('Issues for ' . $item['page_arguments'][0]->title, 'project_issue', 'issue_cockpit', array('nid' => $item['page_arguments'][0]->nid));
            }
            elseif ($item['page_arguments'][0]->nid === '24572') {
              $blocks[] = array('Documentation Team links', 'menu', 'menu-documentation-t');
            }
            break;

          case 'news':
            $blocks[] = array('Drupal News', 'drupalorg_news', 'drupal-news');
            break;

          case 'aggregator/categories/%':
            $blocks[] = array($item['page_arguments'][0]['title'], 'aggregator', 'category-' . $item['page_arguments'][0]['cid']);
            break;

          case 'user/%/track':
            if ($item['map'][1]->uid === $user->uid) {
              $blocks[] = array('Your Posts', 'tracker2', 'user');
            }
            break;

          case 'project/issues/user':
            $blocks[] = array('Your Issues', 'views', 'a512ec6dea837b33a2b010c2af17ed85');
            break;

          case 'getting-involved':
            $blocks[] = array('Contributor Links', 'drupalorg_project', '0');
            break;
        }
        if (count($blocks) > 0) {
          $page = homebox_get_page('dashboard');
          $content = '';
          foreach ($blocks as $block) {
            $options = array('attributes' => array('class' => array('add')));
            if (isset($block[3])) {
              $options['query'] = $block[3];
            }
            $content .= homebox_add_link(t('Add @name to dashboard', array('@name' => $block[0])), $page, $block[1], $block[2], $options);
          }
          return array('content' => $content);
        }
      }
      break;

    case 'tracker_user':
      global $user;

      $query = db_select('tracker_user', 't');
      $query->condition('t.uid', $user->uid);

      // This array acts as a placeholder for the data selected later
      // while keeping the correct order.
      $nodes = $query
        ->addTag('node_access')
        ->fields('t', array('nid', 'changed'))
        ->condition('t.published', 1)
        ->orderBy('t.changed', 'DESC')
        ->range(0, empty($block->count) ? 15 : $block->count)
        ->execute()
        ->fetchAllAssoc('nid');

      if (empty($nodes)) {
        $content = '<p>' . t('No content available.') . '</p>';
      }
      else {
        // Now, get the data and put into the placeholder array.
        $result = db_query('SELECT n.nid, n.title, n.type, n.changed, n.uid, u.name, l.comment_count FROM {node} n INNER JOIN {node_comment_statistics} l ON n.nid = l.nid INNER JOIN {users} u ON n.uid = u.uid WHERE n.nid IN (:nids)', array(':nids' => array_keys($nodes)), array('target' => 'slave'));
        foreach ($result as $node) {
          $node->last_activity = $nodes[$node->nid]->changed;
          $nodes[$node->nid] = $node;
        }

        // Display the data.
        $content = array(
          '#sorted' => TRUE,
          'tracker' => array(
            '#items' => array(),
            '#theme' => 'item_list',
          ),
          'more' => array(
            '#theme' =>'more_link',
            '#url' => 'user/' . $user->uid . '/track',
            '#title' => t('Track posts'),
          ),
        );
        foreach ($nodes as $node) {
          $comments = '';
          if ($node->comment_count) {
            $comments = '<br />' . format_plural($node->comment_count, '1 comment', '@count comments');
            if ($new = comment_num_new($node->nid)) {
              $comments .= ', ' . l(format_plural($new, '1 new', '@count new'), 'node/' . $node->nid, array('fragment' => 'new'));
            }
          }
          $content['tracker']['#items'][] = l($node->title, 'node/' . $node->nid) . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . $comments;
        }
      }
      return array(
        'subject' => t('Your Posts'),
        'content' => $content,
      );
  }
}

/**
 * Implementation of hook_homebox_block_keys(). The only configurable block is
 * tracker_user, with a count field.
 */
function drupalorg_homebox_block_keys($block) {
  return array('count');
}

/**
 * Implementation of hook_homebox_block_edit_form(). The only configurable
 * block is tracker_user, with a count field.
 */
function drupalorg_homebox_block_edit_form($block) {
  return array(
    'count' => array(
      '#type' => 'textfield',
      '#title' => t('Number of posts to show'),
      '#default_value' => isset($block->count) ? $block->count : 15,
      '#size' => 5,
      '#required' => TRUE,
      '#element_validate' => array('drupalorg_validate_int'),
    ),
  );
}

/**
 * Validate for a postsitive integer.
 */
function drupalorg_validate_int($element) {
  if (!preg_match('/^[0-9]+$/', $element['#value']) || (int) $element['#value'] <= 0) {
    form_error($element, t('Number of posts must be a positive integer.'));
  }
}

/**
 * Overall quick stats for drupal.org.
 */
function drupalorg_activity_block() {
  $items = array();
  $stats = drupalorg_get_activity();
  $items[] = t('<strong>@accounts</strong> people with Git accounts', array('@accounts' => $stats['number_of_git_accounts']));
  $items[] = t("<strong>@commits</strong> Git commits this week", array('@commits' => $stats['number_of_git_commits']));
  $items[] = t("<strong>@users</strong> users on drupal.org", array('@users' => $stats['number_of_users']));
  $items[] = t("<strong>@sites</strong> sites running Drupal", array('@sites' => $stats['sites']));
  $items[] = t("<strong>@comments</strong> comments and issue followups", array('@comments' => $stats['comments']));

  $output = theme('item_list', array('items' => $items));
  return $output;
}

/*
 * Returns data on recent activity in the Drupal project.
 *
 * If we do not have data or our data was generated an hour ago,
 * try to generate it again.
 */
function drupalorg_get_activity($_force = FALSE) {
  if (!$_force && ($cache = cache_get('drupalorg_front_counter_data', 'drupalorg'))) {
    $stats = $cache->data;
  }
  elseif (lock_acquire('drupalorg_get_activity', 5)) {
    $stats = array();

    // GIT: retrieve info via API.
    // @todo D7 - Commented out until drupalorg_git* and drupalorg_versioncontrol* modules are ported.
    //$stats['number_of_git_accounts'] = number_format(drupalorg_git_gateway_get_total_accounts());
    //$stats['number_of_git_commits'] = number_format(drupalorg_versioncontrol_get_total_commits(NULL, 7 * 24 * 60 * 60));
    $stats['number_of_git_accounts'] = 0;
    $stats['number_of_git_commits'] = 0;

    // Issue comments this week
    $followups = db_query("SELECT COUNT(distinct c.nid) FROM {node} n INNER JOIN {comment} c ON n.nid = c.nid WHERE n.type = :type AND n.status = :status AND c.created > :created", array(':type' => 'project_issue', ':status' => 1, ':created' => strtotime("1 week ago")))->fetchField();
    $stats['number_of_issue_comments'] = number_format($followups);

    // Projects this week.
    $new_modules = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {taxonomy_index} tn ON tn.nid = n.nid AND tn.tid = 14 WHERE n.created > :created", array(':created' => strtotime("1 week ago")))->fetchField();
    $stats['number_of_new_modules'] = number_format($new_modules);
    // All Modules.
    $modules = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {taxonomy_index} tn ON n.nid = tn.nid WHERE tn.tid = :tid AND n.status = :status", array(':tid' => 14, ':status' => 1))->fetchField();
    // TODO would be nice to limit to D6 & D7
    //$modules = db_result(db_query("SELECT COUNT(distinct prn.pid) FROM node n INNER JOIN project_release_nodes prn ON n.nid = prn.nid INNER JOIN term_node tn on prn.pid = tn.nid WHERE tn.tid = 14 AND prn.version_api_tid IN (87, 103)"));
    $stats['number_of_modules'] = number_format($modules);

    // All Themes.
    $themes = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {taxonomy_index} tn ON n.nid = tn.nid WHERE tn.tid = :tid AND n.status = :status", array(':tid' => 15, ':status' => 1))->fetchField();
    // TODO would be nice to limit to D6 & D7
    //$themes = db_result(db_query("SELECT COUNT(distinct prn.pid) FROM node n INNER JOIN project_release_nodes prn ON n.nid = prn.nid INNER JOIN term_node tn on prn.pid = tn.nid WHERE tn.tid = 15 AND prn.version_api_tid IN (87, 103)"));
    $stats['number_of_themes'] = number_format($themes);

    // All Distributions.
    $distributions = db_query("SELECT COUNT(n.nid) FROM {node} n INNER JOIN {taxonomy_index} tn ON n.nid = tn.nid WHERE tn.tid = :tid AND n.status = :status", array(':tid' => 96, ':status' => 1))->fetchField();
    $stats['number_of_distributions'] = number_format($distributions);

    // Users: Count them.
    $stats['number_of_users'] = number_format(db_query('SELECT COUNT(*) FROM {users} WHERE uid > :uid AND status = :status AND login > :login', array(':uid' => 0, ':status' => 1, ':login' => 0))->fetchField());

    // Country: A single text field, so we can filter it in SQL.
    $stats['number_of_countries'] = number_format(db_query("SELECT COUNT(DISTINCT value) FROM {profile_value} WHERE fid = :fid AND value NOT IN ('', '<not specified>')", array(':fid' => DRUPALORG_COUNTRY_PID))->fetchField());

    // Languages: Get all the distinct combinations and then filter that down.
    $languages = array();
    $result_languages = db_query('SELECT DISTINCT value FROM {profile_value} WHERE fid = :fid', array(':fid' => DRUPALORG_LANGUAGES_PID));
    foreach ($result_languages as $language_profile) {
      $languages = array_merge($languages, explode('; ', $language_profile->value));
    }
    $languages = array_unique($languages);
    $stats['number_of_languages'] = count($languages);

    // Sites: use project API.
    // @todo D7: dependent on project usage module port.
    //$stats['sites'] = number_format(project_usage_get_project_total_usage(DRUPALORG_CORE_NID));
    $stats['sites'] = 0;

    // Comments: count comments.
    $stats['comments'] = number_format(db_query("SELECT COUNT(*) FROM {comment} WHERE status = :status", array(':status' => 1))->fetchField());

    // Sites made with Drupal.
    $stats['sites_made'] = array();

    /* @todo D7: This view is not on the dev site right now?!?
    $view = views_get_view('drupalorg_casestudies');
    $view->preview('block_1');
    foreach ($view->style_plugin->rendered_fields as $row) {
      $stats['sites_made'][] = implode('', $row);
    }
    */

    cache_set('drupalorg_front_counter_data', $stats, 'drupalorg');
    lock_release('drupalorg_get_activity');
  }
  else {
    $stats = array();
  }
  return $stats;
}

/**
 * Set home link for Your Dashboard page.
 */
function drupalorg_set_home() {
  global $user;
  return array(
    '#prefix' => '<div id="drupalorg-set-home-wrapper">',
    '#suffix' => '</div>',
    'set_home' => array(
      '#type' => 'radios',
      '#options' => array(
        TRUE => t('Make this your Homepage'),
        FALSE => t('Use Default Homepage'),
      ),
      '#default_value' => isset($user->data['drupalorg_set_home']) ? $user->data['drupalorg_set_home'] : TRUE,
      '#ajax' => array(
        'callback' => 'drupalorg_set_home_callback',
        'wrapper' => 'drupalorg-set-home-wrapper',
      ),
    ),
  );
}

/**
 * AJAX callback for drupalorg_set_home().
 */
function drupalorg_set_home_callback($form, $form_state) {
  global $user;
  user_save($user, array('data' => array('drupalorg_set_home' => $form_state['values']['set_home'])));
  return $form;
}

/**
 * Get rid of jQuery UI theme noise.
 */
function drupalorg_library_alter(&$libraries, $module) {
  if ($module === 'system' && isset($libraries['ui'])) {
    unset($libraries['ui']['css']['misc/ui/jquery.ui.theme.css']);
  }
}

/**
 * Page callback for the frontpage.
 */
function drupalorg_home() {
  drupal_add_library('system', 'ui.tabs');
  drupal_add_js(drupal_get_path('module', 'geolocation_html5') . '/geolocation_html5.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/home.js');

  return theme('drupalorg_home');
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$variables) {
  if ($variables['is_front']) {
    $variables['mission'] = '<h2>Come for the software, stay for the community</h2>
    <p class="standfirst">Drupal is an open source content management platform powering millions of websites and applications. It’s built, used, and supported by an active and diverse community of people around the world.</p>';
  }

  $router = menu_get_item();
  if ($router['path'] == 'drupal-7.0') {
    // Hide the page title on the D7 release announcement
    unset($variables['title']);
  }
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_preprocess_drupalorg_home(&$variables) {
  $variables['things_we_made'] = '';
  $variables['map_content'] = drupalorg_map_content();

  $variables['sites_made'] = array();

  $recent_forums = '';
  // == Forums tab data/markup
  //$sql = db_rewrite_sql("SELECT mv.entity_id AS nid, mv.node_title AS title, n.created, n.uid, u.name FROM {mv_drupalorg_node_by_vocabulary} mv INNER JOIN {node} n ON n.nid = mv.entity_id INNER JOIN {users} u ON u.uid = n.uid WHERE mv.term_vid = 1 AND n.status = 1 ORDER BY mv.node_nid DESC");
  // TODO Please convert this statement to the D7 database API syntax.
  //$result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''));
  //while ($node = db_fetch_object($result)) {
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    //$recent_forums .= '<h6>' . l($node->title, 'node/' . $node->nid) . '</h6><p class="submitted">' . theme('node_submitted', $node) . '</p>';
  //}

  $recent_forums .= '<p>' . l(t('More forums…'), 'forum') . '</p>';
  $variables['tab_content_forums'] = $recent_forums;

  // Retrieve or rebuild stats cache.
  $variables += drupalorg_get_activity();

/* @todo D7 Convert to DBTNG.
  // Pick a random site made with Drupal from the cache.
  $variables['things_we_made'] = $variables['sites_made'][array_rand($variables['sites_made'])];

 */
  // TODO Please change this theme call to use an associative array for the $variables parameter.
  $variables['psa'] = theme('google_admanager_block', array('id' => variable_get('google_admanager_account', ''), 'ad_slot' => 'Redesign_home'));
}

/**
 * Get HTML for home page map.
 */
function drupalorg_map_content($_force = FALSE) {
  if (!$_force && $cache = cache_get('drupalorg_map_content', 'drupalorg')) {
    $output = $cache->data;
  }
  else {
    $map = array(
      0 => array(
        'type' => 'commit', // For the pin color.
        'message' => variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011'),
        'latitude' => variable_get('drupalcon_latitude', 41.836944),
        'longitude' => variable_get('drupalcon_longitude', -87.684444),
      ),
    );
    $views = array('drupalorg_handbook_map', 'drupalorg_forum_map', 'drupalorg_commit_map');
    foreach ($views as $q => $view) {
      $view = views_get_view($view);
      $view->preview();
      $fields = array(
        'message' => NULL,
        'latitude' => NULL,
        'longitude' => NULL,
      );
      foreach ($view->field as $id => $handler) {
        if (array_key_exists($handler->ui_name(), $fields)) {
          $fields[$handler->ui_name()] = $id;
        }
      }
      foreach ($view->style_plugin->rendered_fields as $n => $row) {
        $map[$n * count($views) + $q + 1]['type'] = $view->get_title();
        foreach ($fields as $field => $id) {
          $map[$n * count($views) + $q + 1][$field] = $row[$id];
        }
      }
    }
    ksort($map);
    foreach ($map as $row) {
      $output .= theme('drupalorg_map_pin', $row);
    }

    cache_set('drupalorg_map_content', $output, 'drupalorg');
  }

  return $output;
}

/**
 * Generates HTML to plot a map pin.
 */
function drupalorg_preprocess_drupalorg_map_pin(&$variables) {
  $variables['classes_array'][] = 'homepage-pin';
  $variables['classes_array'][] = 'homepage-pin-' . $variables['type'];
  $variables['classes_array'][] = 'homepage-pin-' . ($variables['longitude'] > 0 ? 'east' : 'west');
}

/**
 * Page callback for the getting started page.
 */
function drupalorg_start() {
  return theme('drupalorg_start');
}

/**
 * Implementation of template_preprocess_drupalorg_start().
 */
function drupalorg_preprocess_drupalorg_start(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');
/* @todo D7: project_solr not ported yet.
  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
      'key' => 'im_vid_' . _project_get_vid(),
      'value' => DRUPALORG_MODULE_TID,
    )));
*/
  $variables['most_popular_modules'] = drupalorg_order_facet_content('sort_most_installed');

/* @todo D7: project_solr not ported yet.
  project_solr_run_project_query('project/themes', array(array(
      'key' => 'im_vid_' . _project_get_vid(),
      'value' => DRUPALORG_THEME_TID,
    )));
*/
  $variables['most_popular_themes'] = drupalorg_order_facet_content('sort_most_installed');
}

/**
 * Page callback for the download page.
 */
function drupalorg_download() {
  return theme('drupalorg_download');
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');

  /* @todo D7: Verify the sections at the bottom showing lists of modules
     are working when Project is available. */

  // Create and cache a solr query for use by block elements.
  /* @todo D7: We don't have Solr yet; when we do, put this back in.
  project_solr_run_project_query('project/modules', array(array(
      'key' => 'im_vid_' . _project_get_vid(),
      'value' => DRUPALORG_MODULE_TID,
    )));

  // Since we control what facets we're building, we can just utilize the
  // delta as the unique key for the sake of brevity (both here and in the
  // $variables array).
  $facets = array(
    'sort_most_installed' => 'drupalorg_order_facet',
    'sort_created' => 'drupalorg_order_facet',
  );
  // Render and save the facet blocks.
  foreach ($facets as $delta => $module) {
    $variables[$delta] = drupalorg_block_render($module, $delta);
  }

  $variables['version_form'] = drupal_get_form('project_solr_version_form', 'download', t('Show only modules for Drupal version'));
  */

  // Rendering the block directly from views doesn't work nicely here, since
  // the resulting markup is harder to use with bluecheese. Plus, we're doing
  // some magic to ensure that the version filter impacts this block as well.
  // So, we just load the view object, do some magic, run the view, fetch the
  // results and render those ourselves. This also lets us add our 'View full
  // index' link directly as another li in the list (as bluecheese expects)
  // instead of having it in its own div.
  $view = views_get_view('project_index');
  $view->set_display('block_1');
  $view->set_arguments(array('modules'));
  // See if the version filter was used, and if so, have it impact the view.
  if (!empty($_GET['filters'])) {
    $matches = array();
    if (preg_match('/drupal_core:(\d+)/', $_GET['filters'], $matches)) {
      $core_version = $matches[1];
      $filters = $view->display_handler->get_option('filters');
      $filters['tid']['value'] = array($core_version);
      $filters['tid']['exposed'] = FALSE;
      $view->display_handler->set_option('filters', $filters);
    }
  }
  $view->pre_execute();
  $view->execute();
  $results = $view->result;
  foreach ($results as $result) {
    $modules[] = l($result->node_title, 'node/' . $result->nid);
  }
  $modules[] = '<a href="/project/modules/index" class="all">View full index</a>';
  $module_index = '<h2>' . t('Module Index') . '</h2>';
  $module_index .= theme('item_list', array('items' => $modules, 'title' => NULL, 'type' => 'ul', 'attributes' => array('class' => array('flat'))));
  $variables['module_index'] = $module_index;
}

/**
 * Page callback for the community page.
 */
function drupalorg_community() {
  return theme('drupalorg_community');
}

/**
 * Implementation of template_preprocess_drupalorg_community().
 */
function drupalorg_preprocess_drupalorg_community(&$variables) {
  // "How can we help you?" form at the top of /community.
  $variables['help_form'] = '';
  if (module_exists('drupalorg_search')) {
    $variables['help_form'] = drupal_get_form('drupalorg_search_help_form');
  }
  // "Recent activity" list at the side of /community.
  $query = db_select('tracker_node', 't');
  $query->innerJoin('node', 'n', 'n.nid = t.nid');
  $recent = $query
    ->addTag('node_access')
    ->fields('t', array('nid', 'changed'))
    ->fields('n', array('title'))
    ->condition('t.published', 1)
    ->orderBy('t.changed', 'DESC')
    ->range(0,10)
    ->execute();
  $variables['recent_activity'] = theme('drupalorg_recent_activity', array('nodes' => $recent));
}

/**
 * Page callback for the getting involved page.
 */
function drupalorg_getting_involved() {
  return theme('drupalorg_getting_involved');
}

/**
 * Implementation of template_preprocess_drupalorg_getting_involved().
 */
function drupalorg_preprocess_drupalorg_getting_involved(&$variables) {
  // First, build and render a teaser of the old docs node.
  $docs_node = node_load(281873);
  // Get rid of the taxonomy properties so we don't render them.
  $arr = (array) $docs_node;
  foreach (array_keys($arr) as $key) {
    if (strpos($key, 'taxonomy_vocabulary_') === 0) {
      unset($docs_node->$key);
    }
  }
  unset($docs_node->title); // Looks funny here.
  node_build_content($docs_node, 'teaser');
  unset($docs_node->links);
  $content = drupal_render($docs_node->content);

  $variables['docs_node'] = $content;
  $variables['docs_more'] = l(t('Getting Involved Guide'), 'node/281873');

  // Then, show the view for community spotlight.
  $view = views_get_view('drupalorg_community_spotlight');
  $variables['spotlight_title'] = t($view->display['default']->display_options['title']);
  $variables['spotlight'] = $view->preview('block_1');
}

/**
 * Implementation of template_preprocess_drupalorg_d7_announcement().
 */
function drupalorg_preprocess_drupalorg_d7_announcement(&$variables) {
  global $conf;
  $languages = array(
    'ca' => 'Catalan',
    'zh-hans' => 'Chinese (simplified)',
    'zh-hant' => 'Chinese (traditional)',
    'hr' => 'Croatian',
    'da' => 'Danish',
    'nl' => 'Dutch',
    'en' => 'English',
    'fi' => 'Finnish',
    'fr' => 'French',
    'de' => 'German',
    'el' => 'Greek',
    'he' => 'Hebrew',
    'hi' => 'Hindi',
    'hu' => 'Hungarian',
    'id' => 'Indonesian',
    'it' => 'Italian',
    'ko' => 'Korean',
    'lt' => 'Lithuanian',
    'nb' => 'Norwegian (Bokmål)',
    'pt' => 'Portuguese (Portugal)',
    'pt-br' => 'Portuguese (Brazil)',
    'ro' => 'Romanian',
    'ru' => 'Russian',
    'sr' => 'Serbian',
    'sl' => 'Slovene',
    'es' => 'Spanish',
    'sv' => 'Swedish',
    'th' => 'Thai',
    'uk' => 'Ukrainian',
    'vi' => 'Vietnamese',
  );

  // Valid language?
  if (isset($languages[$variables['language']])) {
    include DRUPAL_ROOT . '/' . drupal_get_path('module', 'drupalorg') . '/translations/drupalorg-d7-announcement.' . $variables['language'] . '.php';
    $conf['locale_custom_strings_' . $variables['language']] = $strings;
    drupal_set_title(t(drupal_get_title(), array(), array('langcode' => $variables['language'])));
  }
  else {
    $variables['language'] = 'en';
  }
  if ($variables['language'] === 'he') {
    $variables['rtl'] = TRUE;
  }

  $variables['language_list'] = array();
  unset($languages[$variables['language']]);
  foreach ($languages as $code => $name) {
    if ($code === 'en') {
      $variables['language_list'][] = l($name, 'drupal-7.0');
    }
    else {
      $variables['language_list'][] = l($name, 'drupal-7.0/' . $code);
    }
  }
  $variables['language_list'] = implode(', ', $variables['language_list']);

  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/jquery.cycle.all.min.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') . '/js/d7-announcement.js');
  drupal_add_css(drupal_get_path('module', 'drupalorg') . '/drupalorg-d7-announcement.css', array('type' => 'file', 'weight' => CSS_THEME));
}

/**
 * Theme function for the presentation of results on /community in the
 * "Recent Activity" section.
 *
 * @param $nodes array
 *  An array of node objects with title, changed, nid, and last_activity fields.
 */
function theme_drupalorg_recent_activity($variables) {
  $nodes = $variables['nodes'];
  if (!empty($nodes)) {
    // Display the data.
    $rows = array();
    foreach ($nodes as $node) {
      $rows[] =
        '<h6>' . l($node->title, "node/$node->nid") . ' ' . theme('mark', array('type' => node_mark($node->nid, $node->changed))) . '</h6>' .
        '<p class="submitted">' . t('Last activity: ') . t('!time', array('!time' => format_date($node->changed, 'custom', 'F d, Y'))) . '</p>';
    }
  }
  else {
    $rows[] = t('No posts available.');
  }
  $output = '<div id="recent-activity">';
  $output .= theme('item_list', array('items' => $rows));
  $output .= l(t('More recent activity…'), 'tracker');
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_start' => array(
      'template' => 'drupalorg-start',
    ),
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_home' => array(
      'template' => 'drupalorg-home',
    ),
    'drupalorg_community' => array(
      'template' => 'drupalorg-community',
    ),
    'drupalorg_getting_involved' => array(
      'template' => 'drupalorg-getting-involved',
    ),
    'drupalorg_recent_activity' => array(
      'variables' => array('nodes' => array()),
    ),
    'drupalorg_d7_announcement' => array(
      'variables' => array(
        'language' => 'en',
      ),
      'template' => 'drupalorg-d7-announcement',
    ),
    'drupalorg_map_pin' => array(
      'variables' => array(
        'latitude' => NULL,
        'longitude' => NULL,
        'message' => '',
      ),
      'template' => 'drupalorg-map-pin',
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // Force a revision log entry when editing existing book or issue nodes.
  if (($form_id == 'book_node_form' || $form_id == 'project_issue_node_form') && isset($form['revision_information']['log']) && arg(1) != 'add') {
    $form['revision_information']['log']['#required'] = TRUE;
    $form['revision_information']['#collapsed'] = FALSE;
    $form['revision_information']['#weight'] = 50;
  }

  // List of forms to check for overrides, and the corresponding permissions.
  $override_forms = array(
    'forum_node_form' => 'administer nodes',
    'page_node_form' => 'administer nodes',
    'story_node_form' => 'administer nodes',
  );

  // Override the access for attachments if it's a forbidden form,
  // and the user does not have sufficient permissions.
  if (in_array($form_id, array_keys($override_forms)) && !user_access($override_forms[$form_id])) {
    if (isset($form['attachments']['#access'])) {
      $form['attachments']['#access'] = FALSE;
    }
  }

  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }

  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }

  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }

  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }

  // Add extra choices to the dblog settings selector
  if ($form_id == 'dblog_admin_settings') {
    $form['dblog_row_limit']['#options'] = drupal_map_assoc(array(100, 1000, 10000, 100000, 250000, 500000, 1000000));
  }
}

/**
 * Disable aggregator feed blocks, there are so many that they overwhelm the
 * block admin UI.
 */
function drupalorg_form_aggregator_form_feed_alter(&$form) {
  $form['block']['#default_value'] = 0;
}

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    // TODO Please convert this statement to the D7 database API syntax.
    if (db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER('%s')", $match[1] . '+%%@' . $match[3])->fetchField() > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 * @todo Headers are blocked by some providers so this is not accurate.
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = :type AND status = :status", array(':type' => 'homepage', ':status' => 0));
    $masks = array();
    while ($mask = db_fetch_object($result)) {
      // Build masks array for preg_matching.
      $masks[] = '@' . strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) . '@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
    // Did not work due to several hosts rewriting headers.
    /*if (!user_access('administer users')) {
      // Check for Drupal-ness of website. Try only once.
      $response = drupal_http_request($form_state['values']['homepage'], array(), 'GET', NULL, 1);
      if ($response->headers['Expires'] != 'Sun, 19 Nov 1978 05:00:00 GMT') {
        form_set_error('homepage', t("Your website does not seem to be a Drupal site. If you think we are wrong, please open an issue in the webmasters' queue."));
      }
    }*/
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

/**
 * Add support for searching for users based on the fixed IRC nickname field.
 *
 * @todo Possibly remove as part of search migration.
 */
function drupalorg_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('IRC nicks');
      }
    case 'search':
      if (user_access('access user profiles')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $result = pager_query("SELECT u.name, u.uid FROM {profile_values} pv INNER JOIN {users} u ON pv.uid = u.uid WHERE pv.fid = 35 AND LOWER(pv.value) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array(
            'title' => $account->name,
            'link' => url('user/' . $account->uid, array('html' => TRUE)),
          );
        }
        return $find;
      }
  }
}

/**
 * Implements hook_views_api().
 */
function drupalorg_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'drupalorg'),
  );
}

/**
 * Implements hook_views_default_views_alter().
 */
function drupalorg_views_default_views_alter(&$views) {
  $path = drupal_get_path('module', 'drupalorg');
  require_once DRUPAL_ROOT . '/' . "$path/drupalorg.views_default.inc";
  _drupalorg_views_default_views_alter($views);
}

/**
 * Returns a link to the latest recommended release for the Drupal project.
 *
 * @param $text
 *   Text to be used for the button in addition to the version string
 *
 * @return
 *   HTML string with link to the release node.
 */
function drupalorg_download_drupal_link_button($text) {
/* @todo D7: No such function.
  $release = project_release_get_current_recommended(DRUPALORG_CORE_NID, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID, DRUPALORG_DOWNLOAD_MAJOR_VERSION, 'recommended');
*/
  // Assumes a drupal-$version alias exists for the given Drupal version, which
  // has been the tradition. Just keep that tradition, and this works wonders.
  return l('<span>' . check_plain("$text $release->version") . '</span>', 'project/drupal', array('html' => TRUE, 'attributes' => array('class' => array('link-button'))));
}

/**
 * Default dashboard content.
 *
 * @todo this is totally provisional at this point.
 */
function drupalorg_homebox() {
  return array(
    'dashboard' => array(
      'title' => '@user',
      'path' => 'dashboard',
      'menu' => 0,
      'enabled' => 1,
      'auto_save' => 1,
      'regions' => 3,
      'cache' => 1,
      'full' => 0,
      'custom' => 0,
      'roles' => array(
        0 => 'authenticated user',
      ),
      'color' => 0,
      'colors' => array(
        0 => '#e4f0f8',
        1 => '#c4d5b4',
        2 => '#ecc189',
        3 => '#ec8989',
        4 => '#6b6b70',
        5 => '#4b97e5',
      ),
      'widths' => array(1 => 0, 2 => 0, 3 => 0),
      'blocks' => array(
        // Column 1
        'drupalorg_news_drupal-news' => array(
          'module' => 'drupalorg_news',
          'delta' => 'drupal-news',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -33,
        ),
        'aggregator_category-2' => array(
          'module' => 'aggregator',
          'delta' => 'category-2',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Planet Drupal',
          'weight' => -31,
        ),
        // Column 2
        'drupalorg_tracker_user' => array(
          'module' => 'drupalorg',
          'delta' => 'tracker_user',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Posts',
          'weight' => 1,
        ),
        'views_a512ec6dea837b33a2b010c2af17ed85' => array(
          'module' => 'views',
          'delta' => 'a512ec6dea837b33a2b010c2af17ed85',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => 'Your Issues',
          'weight' => 2,
        ),
        // Column 3
        'project_issue_issue_cockpit' => array(
          'module' => 'project_issue',
          'delta' => 'issue_cockpit',
          'nid' => DRUPALORG_CORE_NID,
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -32,
        ),
        'drupalorg_project_0' => array(
          'module' => 'drupalorg_project',
          'delta' => '0',
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
        // Available for enabling
        'menu_menu-documentation-t' => array(
          'module' => 'menu',
          'delta' => 'menu-documentation-t',
          'region' => 1,
          'movable' => 1,
          'status' => 0,
          'open' => 1,
          'closable' => 1,
          'title' => 'Documentation Team links',
          'weight' => -7,
        ),
      ),
    ),
  );
}

/**
 * Render the HTML for a given block.
 *
 * This function takes a module and a delta, loads the block info from the DB,
 * invokes the function to compute the block content, and then renders the
 * block to HTML via theme('block'). This is basically a heavily pared back
 * implementation of block_list() for a single block.
 *
 * @param string $module
 *   The module that defines the block we're rendering.
 *
 * @param string $delta
 *   The delta of the block that we're rendering.
 *
 * @return
 *   The rendered HTML for the given block.
 *
 * @see block_list()
 * @see theme_block()
 */
function drupalorg_block_render($module, $delta) {
  // Load the title, since that can be modified administratively.
  global $theme;
  $title = db_query("SELECT title FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme", array(':module' => $module, ':delta' => $delta, ':theme' => $theme))->fetchField();

  $block_output = module_invoke($module, 'block', 'view', $delta);
  // Make sure our block gave us any output at all.
  if (empty($block_output) || !is_array($block_output)) {
    return '';
  }
  foreach ($block_output as $k => $v) {
    $block->$k = $v;
  }

  // Set the module and delta so that the blocks contain
  // at least the minimum of expected information.
  $block->module = $module;
  $block->delta = $delta;

  if (isset($block->content) && $block->content) {
    // Override default block title if a custom display title is present.
    if ($title) {
      // Check plain admin-generated titles, but not titles set in code.
      $block->subject = $title == '<none>' ? '' : check_plain($title);
    }
    if (!isset($block->subject)) {
      $block->subject = '';
    }
  }
  return theme('block', $block);
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalorg_settings_form($form, &$form_state) {
  $form = array();

  $form['featured'] = array(
    '#type' => 'fieldset',
    '#title' => t('Featured projects'),
  );
  $form['featured']['drupalorg_featured_translations'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured translations'),
    '#default_value' => variable_get('drupalorg_featured_translations', ''),
    '#rows' => 5,
  );
  $form['drupalcon'] = array(
    '#type' => 'fieldset',
    '#title' => t('DrupalCon'),
  );
  $form['drupalcon']['drupalcon_latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon latitude'),
    '#default_value' => variable_get('drupalcon_latitude', 41.836944),
  );
  $form['drupalcon']['drupalcon_longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('DrupalCon longitude'),
    '#default_value' => variable_get('drupalcon_longitude', -87.684444),
  );
  $form['drupalcon']['drupalcon_message'] = array(
    '#type' => 'textarea',
    '#title' => t('DrupalCon map bubble'),
    '#default_value' => variable_get('drupalcon_message', '<a href="http://chicago2011.drupal.org/">DrupalCon Chicago</a><br />March 7‐10 2011'),
  );

  return system_settings_form($form);
}

function drupalorg_ad_settings_form() {
  $form = array();

  $slots = array_merge(array(0 => t('No ad')), _google_admanager_get_ad_slots());
  $ads = variable_get('drupalorg_forum_ad', array());
  $form['drupalorg_forum_ad'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forum ads'),
    '#description' => t('Configure available <a href="!url">ad units</a>', array('!url' => url('admin/config/google_admanager'))),
    '#tree' => TRUE,
  );
  foreach (taxonomy_get_tree(1) as $term) {
    $form['drupalorg_forum_ad'][$term->tid] = array(
      '#type' => 'select',
      '#title' => check_plain($term->name),
      '#options' => $slots,
      '#default_value' => isset($ads[$term->tid]) ? $ads[$term->tid] : 0,
    );
  }

  return system_settings_form($form);
}

/**
 * Implements hook_node_view().
 */
function drupalorg_node_view($node, $view_mode = 'full') {
  if (TRUE) {
    // Remove extra terms on SAs, section tabs handle them
    foreach (array(1852, 44, 1856) as $tid) {
      if (isset($node->taxonomy[$tid])) {
        $node->taxonomy[$tid]->rendered = TRUE;
      }
    }

    // Marketplace nodes
    if ($node->type === 'organization') {
      // Group terms by vocabulary and link to marketplace browsing pages.
      $vocabularies = array();
      $info = array();
      $default_args = array();
      foreach (taxonomy_get_vocabularies('organization') as $vocabulary) {
        $default_args[check_plain($vocabulary->name)] = 'all';
      }
      foreach ($node->taxonomy as $term) {
        $vocabularies[$term->vid][] = $term;
        $term->rendered = TRUE;
      }
      foreach ($vocabularies as $vid => $terms) {
        $vocabulary = taxonomy_vocabulary_load($vid);
        $links = array();
        foreach ($terms as $term) {
          // Link to the drupalorg_organizations view, terms in order,
          // truncating trailing '/all'.
          $links[] = l($term->name, 'marketplace-preview/' . preg_replace('!(/all)*$!', '', implode('/', array_merge($default_args, array($vocabulary->name => str_replace(' ', '-', $term->name))))));
        }
        if ($a3 && ($count = count($links)) > 3) { // Teaser
          shuffle($links);
          $links = array_slice($links, 0, 2);
          $links[] = t('and @count more', array('@count' => $count - 2));
        }
        $info[check_plain($vocabulary->name)] = implode(', ', $links);
      }

      if ($a3) { // Teaser
        $node->readmore = FALSE;

        if (isset($node->content['field_logo']['field']['items'][0]['#item']['status'])) {
          $content = drupalorg_crosssite_grid_elements(array(3, 5));
          $main = 'column_2';
        }
        else {
          $content = drupalorg_crosssite_grid_elements(array(8));
          $main = 'column_1';
        }

        // Logo
        $content['column_1']['logo'] = $node->content['field_logo']['field']['items'][0];

        // Body
        $content[$main]['body'] = array('#value' => check_markup(node_teaser($node->body, $node->format, 200), $node->format));
        $content[$main]['meta'] = array(
          '#prefix' => '<small>',
          '#suffix' => '</small>',
          '#sorted' => TRUE,
        );
        $content[$main]['meta']['website'] = $node->content['field_link']['field']['items'][0];
        $content[$main]['meta']['website']['#prefix'] = '<div>' . t('Website: ');
        $content[$main]['meta']['website']['#suffix'] = '</div>';

        // Taxonomy
        foreach ($info as $label => $value) {
          $content[$main]['meta'][$label] = array('#value' => '<div class="terms">' . $label . ': ' . $value . '</div> ');
        }

        $node->content = $content;
      }
      else { // Page
        global $user;

        $content = drupalorg_crosssite_grid_elements(array(3, 5, 4));

        // Link & logo
        $content['column_1']['link'] = $node->content['field_link']['field']['items'][0];
        $content['column_1']['link']['#item']['display_title'] = drupal_render($node->content['field_logo']['field']['items'][0]) . check_plain($content['column_1']['link']['#item']['display_title']);
        $content['column_1']['link']['#item']['html'] = TRUE;

        // Terms - sector, service, budget
        if (!empty($node->field_organization_headquarters[0]['safe'])) {
          $info[t('Headquarters')] = $node->field_organization_headquarters[0]['safe'];
        }
        // Budget may be replaced by taxonomy, see #371966
        if (!empty($node->field_budget[0]['safe'])) {
          $info[t('Usual project budget')] = $node->field_budget[0]['safe'];
        }

        $content['column_1']['info'] = array(
          '#prefix' => '<dl>',
          '#suffix' => '</dl>',
          '#sorted' => TRUE,
        );
        foreach ($info as $label => $data) {
          $content['column_1']['info'][] = array(
            '#value' => '<dt>' . $label . '</dt><dd>' . $data . '</dd>',
          );
        }

        // Association membership
        if (drupalorg_has_civimembership($node, 'Organization')) {
          $content['column_1']['association_membership'] = array('#value' => l('<img src="' . base_path() . drupal_get_path('module', 'drupalorg') . '/images/association-organization-2.png" />', 'https://association.drupal.org/membership', array('html' => TRUE, 'attributes' => array('title' => t('Drupal Association organization member')))));
        }

        $content['column_2']['body'] = $node->content['body'];
        $content['column_2']['contributions_heading'] = array('#value' => '<h3>' . t('Drupal contributions') . '</h3>');
        $content['column_2']['contributions'] = $node->content['field_contributions']['field']['items'][0];

        // People
        $content['column_3']['map'] = array(
          '#prefix' => '<div id="organization-map">',
          '#value' => '',
          '#suffix' => '</div>',
        );
        $result = db_query("SELECT pv.uid, u.name, u.created, pv_title.value title, hug.latitude, hug.longitude FROM {profile_values} pv INNER JOIN {users} u ON u.uid = pv.uid AND u.status = 1 LEFT JOIN {profile_values} pv_title ON pv_title.uid = u.uid AND pv_title.fid = 8 LEFT JOIN {html5_user_geolocation} hug ON hug.uid = u.uid WHERE pv.value = :pv.value AND pv.fid = :pv.fid", array(':pv.value' => $node->title, ':pv.fid' => 72));
        while ($account = db_fetch_object($result)) {
          // Name & title
          $content['column_3'][$account->uid . 'name'] = array(
            '#prefix' => '<h3>',
            '#value' => theme('username', array('account' => $account)),
            '#suffix' => '</h3>',
          );
          if (!empty($account->title)) {
            $content['column_3'][$account->uid . 'name']['#value'] .= ', ' . check_plain($account->title);
          }

          // Quick info
          $content['column_3'][$account->uid . 'info'] = array(
            '#prefix' => '<p>',
            '#value' => t('On Drupal.org for @for', array('@for' => format_interval(REQUEST_TIME - $account->created))),
            '#suffix' => '</p>',
          );

          if ($drupalorg_documentation = drupalorg_documentation_contributions($account)) {
            $content['column_3'][$account->uid . 'info']['#value'] .= '<br />' . $drupalorg_documentation . t(' to documentation');
          }

          $projects = array();
          // @see versioncontrol_project_user() for the following query.
          $result_projects = db_query("SELECT DISTINCT(vcp.nid), n.title, COUNT(o.vc_op_id) AS commits FROM {versioncontrol_operations} o INNER JOIN {versioncontrol_project_projects} vcp ON vcp.repo_id = o.repo_id INNER JOIN {node} n ON n.status = 1 AND n.nid = vcp.nid INNER JOIN {project_projects} pp ON n.nid = pp.nid WHERE o.author_uid = :o.author_uid AND pp.sandbox = :pp.sandbox GROUP BY vcp.nid, n.title ORDER BY commits DESC", array(':o.author_uid' => $account->uid, ':pp.sandbox' => 0));
          while ($project = db_fetch_object($result_projects)) {
            $projects[] = l($project->title, 'node/' . $project->nid);
          }
          if (count($projects) > 3) {
            $content['column_3'][$account->uid . 'info']['#value'] .= '<br />' . t('Contributor to !projects, and <a href="!more">@count more</a>', array('!projects' => implode(', ', array_slice($projects, 0, 3)), '@count' => count($projects) - 3, '!more' => url('user/' . $account->uid)));
          }
          elseif (count($projects) > 1) {
            $content['column_3'][$account->uid . 'info']['#value'] .= '<br />' . t('Contributor to !projects', array('!projects' => implode(', ', $projects)));
          }

          // Map
          if (!empty($account->latitude) || !empty($account->longitude)) {
            // todo d7 classes is no longer passed here, try using the default class.
            $content['column_3']['map']['#value'] .= theme('drupalorg_map_pin', array('classes' => array('pin'), 'latitude' => $account->latitude, 'longitude' => $account->longitude));
          }
        }

        $node->content = $content;

        if ($node->field_org_marketplace_request[0]['value'] && ($node->uid === $user->uid || user_access('administer nodes'))) {
          $placeholders = array('!marketplace' => url('marketplace-preview'));
          if ($node->field_organization_marketplace[0]['value']) {
            $status = t('This organization is listed in the <a href="!marketplace">marketplace</a>.', $placeholders);
          }
          else {
            $status = t('This organization is <em>not</em> listed in the <a href="!marketplace">marketplace</a>.', $placeholders);
          }
          $moderation = array(
            'always' => t('Community webmasters set this to <em>always</em> be listed.'),
            'membership' => t('This listing is active when <a href="https://association.drupal.org/membership">Drupal Association membership</a> is current.'),
            'never' => t('Community webmasters set this to <em>never</em> be listed.'),
          );
          if (empty($node->field_organization_issue[0]['nid'])) {
            $message = '';
          }
          else {
            $message = t('Communicate with webmasters using <a href="!issue">this issue</a>.', array('!issue' => url('node/' . $node->field_organization_issue[0]['nid'])));
          }
          drupal_set_message($status . ' ' . $moderation[$node->field_organization_list_rule[0]['value']] . ' ' . $message, 'status');
        }
      }
    }
    elseif ($node->type === 'project_issue') {
      // Load the view to make sure that there are actually some results.
      $change_records = views_get_view('change_records', 'block_1', array($node->nid));

      // TODO is there a change_records view???

      /*
      $change_records->execute('block_1');
      if (!empty($change_records->result)) {
        $node->content['change_records'] = array(
          '#prefix' => '<h3>' . check_plain($change_records->get_title()) . '</h3>',
          '#value' => $change_records->preview('block_1', array($node->nid)),
          '#weight' => 50,
        );
      }
      $change_records->destroy();
      */
    }
    elseif ($node->type === 'casestudy') {
      $breadcrumb = array(
        l(t('Home'), ''),
        l(t('Case Studies'), 'case-studies'),
      );
      if ($node->field_status[0]['value'] === 'Community') {
        $breadcrumb[] = l(t('Community showcase'), 'case-studies/community');
      }
      drupal_set_breadcrumb($breadcrumb);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function drupalorg_node_insert($node) {
  if (TRUE || TRUE) {
    if ($node->type === 'organization' && !isset($node->drupalorg_processed)) {
      // Determine if the organization should be listed in the marketplace.
      if ($node->field_org_marketplace_request[0]['value']) {
        // Requested listing, see if there is any moderation.
        switch ($node->field_organization_list_rule[0]['value']) {
          case 'never':
            $node->field_organization_marketplace[0]['value'] = 0;
            break;

          case 'membership':
            // Doing this on view would be slow, and require a bit of boolean
            // logic in the view. And saves surprises if an organization goes a
            // few days without renewing.
            $node->field_organization_marketplace[0]['value'] = drupalorg_has_civimembership($node, 'Organization');
            break;

          case 'always':
            $node->field_organization_marketplace[0]['value'] = 1;
            break;
        }

        if (empty($node->field_organization_issue[0]['nid'])) {
          // A new organization has been posted, create an issue to coordinate review.
          $issue = new stdClass();
          $issue->type = 'project_issue';
          $issue->uid = $node->uid;
          $issue->status = 1;
          $issue->title = t('Review @title', array('@title' => $node->title));
          $issue->body = t('!link has been posted', array('!link' => l($node->title, 'node/' . $node->nid)));
          $issue->pid = 3202; // Webmasters, http://drupal.org/project/webmasters
          $issue->priority = 2; // normal
          $issue->sid = 1; // active
          $issue->component = 'Marketplace listing';
          $issue->category = 'task';
          $issue->comment = 2; // read & write
          node_save($issue);
          $node->field_organization_issue[0]['nid'] = $issue->nid;
        }
      }
      else {
        // Didn't even request to be listed.
        $node->field_organization_marketplace[0]['value'] = 0;
      }

      $node->drupalorg_processed = TRUE;
      node_save($node);
    }
  }
}

/**
 * Implements hook_node_update().
 */
function drupalorg_node_update($node) {
  if (TRUE || TRUE) {
    if ($node->type === 'organization' && !isset($node->drupalorg_processed)) {
      // Determine if the organization should be listed in the marketplace.
      if ($node->field_org_marketplace_request[0]['value']) {
        // Requested listing, see if there is any moderation.
        switch ($node->field_organization_list_rule[0]['value']) {
          case 'never':
            $node->field_organization_marketplace[0]['value'] = 0;
            break;

          case 'membership':
            // Doing this on view would be slow, and require a bit of boolean
            // logic in the view. And saves surprises if an organization goes a
            // few days without renewing.
            $node->field_organization_marketplace[0]['value'] = drupalorg_has_civimembership($node, 'Organization', TRUE);
            break;

          case 'always':
            $node->field_organization_marketplace[0]['value'] = 1;
            break;
        }

        if (empty($node->field_organization_issue[0]['nid'])) {
          // A new organization has been posted, create an issue to coordinate review.
          $issue = new stdClass();
          $issue->type = 'project_issue';
          $issue->uid = $node->uid;
          $issue->status = 1;
          $issue->title = t('Review @title', array('@title' => $node->title));
          $issue->body = t('!link has been posted', array('!link' => l($node->title, 'node/' . $node->nid)));
          $issue->pid = 3202; // Webmasters, http://drupal.org/project/webmasters
          $issue->priority = 2; // normal
          $issue->sid = 1; // active
          $issue->component = 'Marketplace listing';
          $issue->category = 'task';
          $issue->comment = 2; // read & write
          node_save($issue);
          $node->field_organization_issue[0]['nid'] = $issue->nid;
        }
      }
      else {
        // Didn't even request to be listed.
        $node->field_organization_marketplace[0]['value'] = 0;
      }

      $node->drupalorg_processed = TRUE;
      node_save($node);
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalorg_views_pre_render(&$view) {
  // Render the taxonomy filtering above the marketplace organization listing.
  if ($view->name === 'drupalorg_organizations') {
    $content = drupalorg_crosssite_grid_elements(array(2, 2, 2, 2));

    // Each argument should be a term restricted to a vocabulary.
    $n = 0;
    foreach ($view->display['default']->handler->options['arguments'] as $argument) {
      // Find that vocabulary.
      $vocabulary = taxonomy_vocabulary_load(reset(array_filter($argument['validate_argument_vocabulary'])));

      $content['column_' . ($n + 1)]['header'] = array('#value' => '<h3>' . check_plain($vocabulary->name) . '</h3>');
      $content['column_' . ($n + 1)]['list'] = array(
        '#prefix' => '<ul>',
        '#suffix' => '</ul>',
        '#sorted' => TRUE,
      ); // See comment on 3 #... items below if modified.

      // Query for terms in the vocabulary used by nodes in the current view.
      if (isset($view->args[$n]) && $view->args[$n] !== 'all') {
        // Remove the current filter, since only one term in each vocab may be
        // selected.
        $copy = $view->clone_view();
        $copy->args[$n] = 'all';
        $copy->build();
        $query = clone $copy->query;
      }
      else {
        $query = clone $view->query;
      }
      // Clear out what we don't need.
      $query->fields = array();
      $query->orderby = array();
      // Join back to all terms
      $term_node = $query->add_table('taxonomy_term_node');
      $term_data = $query->add_table('taxonomy_term_data');
      $query->table_queue[$term_data]['join']->left_table = $term_node;
      $query->table_queue[$term_data]['join']->definition['left_table'] = $term_node;
      // … in our vid
      $query->add_where(0, $term_data . '.vid = %d', $vocabulary->vid);
      $name = $query->add_field($term_data, 'name');
      // group by term, count & order by
      $query->add_groupby($term_node . '.tid');
      $count = $query->add_field(NULL, 'count(*)', 'count', array('aggregate' => TRUE));
      $query->add_orderby(NULL, NULL, 'DESC', $count);

      // TODO Please convert this statement to the D7 database API syntax.
      $result = db_query($query->query(), $query->get_where_args());
      $c = 0;
      while ($row = db_fetch_object($result)) {
        $c += 1;
        $args = $view->args;
        // If necessasry, fill default arguments.
        if ($n > count($args)) {
          $args = array_merge(array_fill(count($args), $n - count($args), 'all'), $args);
        }
        // Link to this argument.
        $args[$n] = str_replace(' ', '-', $row->$name);

        $path = 'marketplace-preview/' . implode('/', $args);
        $item = array(
          '#prefix' => '<li' . ($c > 6 && $_GET['q'] !== $path ? ' class="show-more"' : '') . '>',
          '#value' => l(t('@name (@count)', array('@name' => $row->$name, '@count' => $row->$count)), $path, array('html' => TRUE)),
          '#suffix' => '</li>',
        );
        // Ensure active is in slot 6 or lower.
        if ($_GET['q'] === $path && $c > 6) {
          array_splice($content['column_' . ($n + 1)]['list'], 8, 0, array($item)); // 8 = 5 + 3 #... items
          $content['column_' . ($n + 1)]['list'][6]['#prefix'] = '<li class="show-more">';
        }
        else {
          $content['column_' . ($n + 1)]['list'][] = $item;
        }
      }

      // If there are more than 6, show more/less links.
      if ($c > 6) {
        $content['column_' . ($n + 1)]['list']['show-more'] = array(
          '#value' => '<li class="show-link">' . l(t('Show more'), $_GET['q']) . '</li>',
        );
        $content['column_' . ($n + 1)]['list']['show-less'] = array(
          '#value' => '<li class="hide-link">' . l(t('Show fewer'), $_GET['q']) . '</li>',
        );
      }

      // If there is a copy, show an all link.
      if (isset($copy)) {
        $replacements = module_invoke_all('views_query_substitutions', $copy);
        // TODO Please convert this statement to the D7 database API syntax.
        $count = db_query('SELECT COUNT(*) FROM (' . str_replace(array_keys($replacements), $replacements, $copy->query->query(TRUE)) . ') count_alias', $copy->query->get_where_args())->fetchField();

        $args = $view->args;
        if ($n > count($args)) {
          $args = array_merge(array_fill(count($args), $n - count($args), 'all'), $args);
        }
        $args[$n] = 'all';
        $content['column_' . ($n + 1)]['list'][] = array(
          '#prefix' => '<li>',
          '#value' => l(t('@name (@count)', array('@name' => check_plain($argument['wildcard_substitution']), '@count' => $count)), preg_replace('!(/all)*$!', '', 'marketplace-preview/' . implode('/', $args)), array('attributes' => array('class' => array('all')))),
          '#suffix' => '</li>',
        );

        unset($copy);
      }

      $n += 1;
    }

    $view->display['default']->handler->options['header'] = drupal_render($content);
    $view->display['default']->handler->options['header_format'] = 3; // Full HTML
  }
  elseif ($view->name === 'drupalorg_marketplace_hosting') {
    // Add gold-level hosting ads
    $page = drupal_strtolower($view->display[$view->current_display]->display_title);

    // TODO Please change this theme call to use an associative array for the $variables parameter.
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    // TODO Please change this theme call to use an associative array for the $variables parameter.
    $content = theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-a-300x100') .
      theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-b-300x100') .
      theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-c-300x100') .
      theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-d-300x100');
    if ($page === 'enterprise' || $page === 'shared') {
      // TODO Please change this theme call to use an associative array for the $variables parameter.
      // TODO Please change this theme call to use an associative array for the $variables parameter.
      $content .= theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-e-300x100') .
        theme('google_admanager_block', variable_get('google_admanager_account', ''), 'hosting-' . $page . '-f-300x100');
    }
    $view->display['default']->handler->options['header'] .= $content . $view->display['default']->handler->options['footer'];
    $view->display['default']->handler->options['footer'] = NULL;
    $view->display['default']->handler->options['header_format'] = 3; // Full HTML
  }
}

/**
 * Implements hook_user_view().
 */
function drupalorg_user_view($account, $view_mode) {
  global $user;

  // Column layout for profile pages.
  $content = drupalorg_crosssite_grid_elements(array(8, 4));

  // Link organization to organization node, if it exists.
  if (!empty($account->profile_current_company_organization)) {
    $nid = db_query("SELECT nid FROM {node} WHERE status = :status AND type = :type AND title = :title", array(':status' => 1, ':type' => 'organization', ':title' => $account->profile_current_company_organization))->fetchField();
    if ($nid != 0) {
      $organization = node_load($nid);
      $link = check_plain($organization->title);
      // todo D7 make sure logo works once marketplace feature is back #1595348
      if (isset($organization->field_logo[0])) {
        // TODO Please change this theme call to use an associative array for the $variables parameter.
        $link = theme('imagecache', 'grid-3', $organization->field_logo[0]['filepath'], $organization->title, $organization->title);
      }
      $account->content['Work']['profile_current_company_organization']['#markup'] = l($link, 'node/' . $nid, array('html' => TRUE));

      if (drupalorg_has_civimembership($organization, 'Organization')) {
        $content['column_2']['membership'][] = array(
          '#prefix' => '<div class="clear-block"><div class="grid-1 alpha"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association-organization.png') . '" alt="' . t('Drupal Association Organization Member') . '" /></a></div><div class="grid-3 omega"><p>',
          '#markup' => t('My organization is a member of the <a href="https://association.drupal.org/">Drupal Association</a>. We’re supporting the Drupal.org infrastructure and other large community initiatives. <a href="https://association.drupal.org/membership">Join us</a>.'),
          '#suffix' => '</p></div></div>',
        );
      }
    }
  }

  // Get the membership display content
  if ($account->uid === $user->uid) {
    $membership_personal = t('Hey! Want to support the Drupal Community, Drupal.org’s infrastructure, and get one of the cool <a href="https://association.drupal.org">Drupal Association</a> badges on your profile page? <a href="https://association.drupal.org/membership">Become a member today.</a>');
  }
  $query = db_select('drupalorg_civimembership', 'dc')
    ->fields('dc', array('membership_type', 'membership_status'))
    ->condition('user_name', $account->name, '=')
    ->execute();
  foreach ($query as $membership) {
    // If membership is not the organization owner's.
    if (!isset($organization) || $organization->uid !== $account->uid || $membership->membership_type !== 'Organization') {
      $placeholders = array(
        '@username' => $account->name,
        '@membership_type' => drupal_strtolower($membership->membership_type),
      );
      $content['column_2']['membership'][] = array(
        '#prefix' => '<div class="clear-block"><div class="grid-1 alpha"><a href="https://association.drupal.org/membership"><img src="' . url(drupal_get_path('module', 'drupalorg') . '/images/association-' . $placeholders['@membership_type'] . '.png') . '" alt="' . t('Drupal Association @membership_type member', $placeholders) . '" /></a></div><div class="grid-3 omega"><p>',
        '#markup' => t('@username is an <a href="https://association.drupal.org/membership">@membership_type member</a> of the <a href="https://association.drupal.org/">Drupal Association</a>, which fosters and supports the Drupal software project, the community and its growth.', $placeholders),
        '#suffix' => '</p></div></div>',
      );
    }

    if ($account->uid === $user->uid) {
      switch ($membership->status) {
        case 'New':
        case 'Current':
          $membership_personal = t('<strong>You Rock!</strong> Thank you for purchasing a <a href="https://association.drupal.org">Drupal Association</a> membership. Your support has helped us to support the Drupal community. We really appreciate your contribution to making Drupal and its community great.');
          break;

        case 'Grace':
          $membership_personal = t('<strong>Oh No!</strong> Your membership lapsed. You’re awesome, so we are leaving your membership badge up for a bit giving you time to renew. Continue supporting the <a href="https://association.drupal.org">Drupal Association</a> by <a href="https://association.drupal.org/membership">renewing your membership</a>');
          break;
      }
    }
  }
  if (isset($membership_personal)) {
    $content['column_2']['membership'][] = array(
      '#prefix' => '<p>',
      '#markup' => $membership_personal,
      '#suffix' => '</p>',
      '#weight' => -1,
    );
  }

  // Documentation edits
  if ($drupalorg_documentation = drupalorg_documentation_contributions($account)) {
    $account->content['summary']['drupalorg_documentation'] = array(
      '#type' => 'user_profile_item',
      '#title' => t('Documentation'),
      '#markup' => $drupalorg_documentation,
    );
  }

  $content['column_1'] = array_merge($content['column_1'], $account->content);
  $account->content = $content;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function drupalorg_documentation_contributions($account) {
  $count = (int) db_query("SELECT count(*) FROM {node} n INNER JOIN {node_revision} nr ON n.nid = nr.nid AND nr.uid = :uid WHERE n.type = :type AND n.status = :status", array(':type' => 'book', ':status' => 1, ':uid' => $account->uid))->fetchField();
  if ($count > 0) {
    // This isn't a leaderboard.
    if ($count === 1) {
      return t('1 edit');
    }
    elseif ($count <= 5) {
      return t('At least 1 edit');
    }
    else {
      foreach (array(10000, 5000, 1000, 500, 100, 50, 10, 5) as $threshold) {
        if ($count > $threshold) {
          return t('Over @count edits', array('@count' => $threshold));
        }
      }
    }
  }
  return FALSE;
}

/**
 * Check if an account has a Drupal Association membership.
 *
 * @param $account
 *   A fully-loaded account object representing the user who's membership
 *   details should be returned.
 * @param $type
 *   'Individual' or 'Organization' at time of writing.
 *
 * @return
 *   Boolean, TRUE if membership exists.
 */
function drupalorg_has_civimembership($account, $type) {
  return (bool) db_select('drupalorg_civimembership', 'dc')
    ->fields('dc', array('user_name'))
    ->condition('user_name', $account->name, '=')
    ->condition('membership_type', $type, '=')
    ->range(0, 1)->execute()->fetchField();
}

/**
 * Page callback for a custom 403 page to better handle error reporting.
 *
 * This checks if the user is on node/add/project-project but hasn't agreed to
 * the Git terms of service.
 */
function drupalorg_403_page() {
  global $user;
  if (!empty($_GET['destination']) && $_GET['destination'] == 'node/add/project-project' && !empty($user->uid) && empty($user->git_consent) && !empty($user->git_vetted)) {
    return drupalorg_git_gateway_no_consent_error($user);
  }
  return t('You are not authorized to access this page.');
}

/**
 * Only show one attached image on project teaser.
 */
function drupalorg_preprocess_content_field(&$v) {
  if ($v['field']['field_name'] === 'field_project_images' && $v['teaser']) {
    $v['items'] = array(reset($v['items']));
  }
}
