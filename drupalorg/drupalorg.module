<?php
// $Id$

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * Profile field ID for country.
 */
define('DRUPALORG_COUNTRY_PID', 17);

/**
 * Profile field ID for languages.
 */
define('DRUPALORG_LANGUAGES_PID', 48);

// == Core hooks ===============================================================

/**
 * Implementation of hook_menu().
 */
function drupalorg_menu() {
  $items['documentation'] = array(
    'title' => 'Documentation',
    'page callback' => 'drupalorg_documentation',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['documentation/index'] = array(
    'title' => 'Documentation',
    'page callback' => 'drupalorg_documentation_index',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['start'] = array(
    'title' => 'Getting started with Drupal',
    'page callback' => 'drupalorg_start',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'drupalorg_download',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['home'] = array(
    'title' => 'Drupal Homepage',
    'page callback' => 'drupalorg_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['about'] = array(
    'title' => 'About Drupal',
    'page callback' => 'drupalorg_about',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['community'] = array(
    'title' => 'Community & Support',
    'page callback' => 'drupalorg_community',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

// == Major landing pages ======================================================

/**
 * Page callback for the frontpage.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_home() {
  if (module_exists('jquery_ui')) {
    jquery_ui_add('ui.tabs');
    drupal_add_js("Drupal.behaviors.frontTabs = function() { $('#rotate > ul').tabs({ fx: { opacity: 'toggle' } }).tabs('rotate', 0); };", 'inline');
  }
  return theme('drupalorg_home');
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$vars) {
  if ($vars['is_front']) {
    $vars['mission'] = '<h2>Build Today. Innovate Tomorrow.</h2>
    <p class="standfirst">
      What can you make with Drupal? Beautiful, personal blogs or mighty, multi-featured, multiuser corporate sites. Go wherever your imagination takes you with our robust, open-source publishing software.
    </p>';
  }
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_preprocess_drupalorg_home(&$vars) {
  $vars['theme_images_directory'] = drupal_get_path('theme', variable_get('theme_default', 'bluecheese')) .'/images';

  // == Forums tab data/markup

  // Performs badly. Need to find a way to make this run quicker. Of course
  // we need to cache it, but it still runs dog slow.
  $vars['tab_content_forums'] = 'Recent forums tab content...';
  
  /*$sql = db_rewrite_sql("SELECT n.nid, n.title, n.created, n.uid, u.name FROM {node} n INNER JOIN {term_node} tn ON tn.vid = n.vid INNER JOIN {term_data} td ON td.tid = tn.tid INNER JOIN {users} u ON u.uid = u.uid WHERE n.status = 1 AND td.vid = %d ORDER BY n.nid DESC");
  $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, 5);
  $recent_forums = '';
  while ($node = db_fetch_object($result)) {
    $recent_forums .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>'; 
  }
  // We have no place to link this to in a nice way.
  // $fresh_news .= '<p>'. l(t('More recent forum topics...'), '...') .'</p>';
  $vars['tab_content_forums'] = $recent_forums;*/

  // == Counters for users

  // If we do not have data or our data was generated an hour ago,
  // try to generate it again.
  if (!count($stats = variable_get('drupalorg_front_counter_data', array())) || (variable_get('drupalorg_front_counter_time', 0) < (time() - 60*60))) {
    $stats = array();
    // Users: Count them.
    $stats['number_of_users'] = number_format(db_result(db_query('SELECT COUNT(*) FROM {users}')));

    // Country: A single text field, so we can filter it in SQL.
    $stats['number_of_countries'] = db_result(db_query('SELECT COUNT(DISTINCT value) FROM {profile_values} WHERE fid = %d', DRUPALORG_COUNTRY_PID));

    // Languages: Get all  the distinct combinations and then filter that down.
    $languages = array();
    $result_languages = db_query('SELECT DISTINCT value FROM {profile_values} WHERE fid = %d', DRUPALORG_LANGUAGES_PID);
    while ($language_profile = db_fetch_object($result_languages)) {
      $languages = array_merge($languages, explode('; ', $language_profile->value)); 
    }
    $languages = array_unique($languages);
    $stats['number_of_languages'] = count($languages);

    // Store all the results and the time.
    variable_set('drupalorg_front_counter_data', $stats);
    variable_set('drupalorg_front_counter_time', time());
  }
  $vars += $stats;
}

/**
 * Page callback for the documentation page.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_documentation() {
  return theme('drupalorg_documentation');
}

/**
 * Page callback for the documentation index page.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_documentation_index() {
  return theme('drupalorg_documentation_index');
}

/**
 * Page callback for the getting started page.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_start() {
  return theme('drupalorg_start');
}

/**
 * Page callback for the about Druapl page.
 */
function drupalorg_about() {
  return theme('drupalorg_about');
}

/**
 * Implementation of template_preprocess_drupalorg_start().
 *
 * @todo
 *   Add caching.
 */
function drupalorg_preprocess_drupalorg_start(&$variables) {
  $variables['version'] = 42;

  $variables['most_popular_modules'] = theme('item_list', array(
   '<a href="#">Content construction kit (CCK)</a>', 
   '<a href="#">Views</a>', 
   '<a href="#">Gallery</a>', 
   '<a href="#">Foo bar</a>')); // Will be made dynamic, see issue #372243

  $variables['most_popular_themes'] = theme('item_list', array(
   '<a href="#">Paris Eiffel Tower</a>', 
   '<a href="#">Cute yellow ducks</a>', 
   '<a href="#">Bluecheese</a>', 
   '<a href="#">Marvin</a>'));  // Will be made dynamic, see issue #372243
}

/**
 * Page callback for the download page.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_download() {
  return theme('drupalorg_download');
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 *
 * @todo
 *   Add caching.
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $variables['version'] = 42;

  $variables['most_popular_modules'] = theme('item_list', array(
   '<a href="#">Content construction kit (CCK)</a>', 
   '<a href="#">Views</a>', 
   '<a href="#">Gallery</a>', 
   '<a href="#">Foo bar</a>')); // Will be made dynamic, see issue #372243

  $variables['most_popular_themes'] = theme('item_list', array(
   '<a href="#">Paris Eiffel Tower</a>', 
   '<a href="#">Cute yellow ducks</a>', 
   '<a href="#">Bluecheese</a>', 
   '<a href="#">Marvin</a>'));  // Will be made dynamic, see issue #372243

  $variables['most_active_modules'] = theme('item_list', array(
   '<a href="#">Content construction kit (CCK)</a>', 
   '<a href="#">Views</a>', 
   '<a href="#">Gallery</a>', 
   '<a href="#">Foo bar</a>')); 
  
  $variables['most_active_themes'] = theme('item_list', array(
   '<a href="#">Paris Eiffel Tower</a>', 
   '<a href="#">Bluecheese</a>', 
   '<a href="#">Cute yellow ducks</a>', 
   '<a href="#">Marvin</a>'));

  $variables['new_modules'] = theme('item_list', array(
   '<a href="#">Gallery</a>', 
   '<a href="#">Content construction kit (CCK)</a>', 
   '<a href="#">Views</a>', 
   '<a href="#">Foo bar</a>')); 
  
  $variables['new_themes'] = theme('item_list', array(
   '<a href="#">Cute yellow ducks</a>', 
   '<a href="#">Paris Eiffel Tower</a>', 
   '<a href="#">Bluecheese</a>', 
   '<a href="#">Marvin</a>'));

  $variables['module_categories'] = theme('item_list', array(
   '<a href="#">Gallery</a>', 
   '<a href="#">Content construction kit (CCK)</a>', 
   '<a href="#">Views</a>', 
   '<a href="#">Foo bar</a>')); 
  
  $variables['theme_categories'] = theme('item_list', array(
   '<a href="#">Cute yellow ducks</a>', 
   '<a href="#">Paris Eiffel Tower</a>', 
   '<a href="#">Bluecheese</a>', 
   '<a href="#">Marvin</a>'));
}

/**
 * Page callback for the community page.
 *
 * @todo
 *   Add caching.
 */
function drupalorg_community() {
  return theme('drupalorg_community');
}

/**
 * Implementation of template_preprocess_drupalorg_community().
 *
 * @todo
 *   Add caching.
 */
function drupalorg_preprocess_drupalorg_community(&$variables) {
  $variables['advertisement'] = ''; // used to pull in the proper advertisement block.
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_documentation' => array(
      'template' => 'drupalorg-documentation',
    ),
    'drupalorg_documentation_index' => array(
      'template' => 'drupalorg-documentation-index',
    ),
    'drupalorg_start' => array(
      'template' => 'drupalorg-start',
    ),
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_home' => array(
      'template' => 'drupalorg-home',
    ),
    'drupalorg_about' => array(
      'template' => 'drupalorg-about',
    ),
    'drupalorg_community' => array(
      'template' => 'drupalorg-community',
    ),
  );
}

// == Altering existing behavior ===============================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // List of forms to check for overrides, and the corresponding permissions.
  $override_forms = array(
    'book_node_form'       => 'edit book pages',
    'forum_node_form'      => 'administer nodes',
    'page_node_form'       => 'administer nodes',
    'story_node_form'      => 'administer nodes',
  );
  // Override the access for attachments if it's a forbidden form,
  // and the user does not have sufficient permissions.
  if (in_array($form_id, array_keys($override_forms)) && !user_access($override_forms[$form_id])) {
    if (isset($form['attachments']['#access'])) {
      $form['attachments']['#access'] = FALSE;
    }
  }

  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }
  
  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }
  
  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }
  
  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }
}

// == User form functionality ==================================================

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_result(db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER('%s')", $match[1] .'+%%@'. $match[3])) > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 * @todo Headers are blocked by some providers so this is not accurate.
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = '%s' AND status = %d", 'homepage', 0);
    $masks = array();
    while ($mask = db_fetch_object($result)) {
      // Build masks array for preg_matching.
      $masks[] = '@'. strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) .'@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
    // Did not work due to several hosts rewriting headers.
    /*if (!user_access('administer users')) {
      // Check for Drupal-ness of website. Try only once.
      $response = drupal_http_request($form_state['values']['homepage'], array(), 'GET', NULL, 1);
      if ($response->headers['Expires'] != 'Sun, 19 Nov 1978 05:00:00 GMT') {
        form_set_error('homepage', t("Your website does not seem to be a Drupal site. If you think we are wrong, please open an issue in the webmasters' queue."));
      }
    }*/
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

// == External search block ====================================================

/**
 * Implementation of hook_block().
 *
 * @todo Hopefully remove as part of search migration.
 */
function drupalorg_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array('info' => t('External/Alternate Search Advice (only when search is disabled)'),
      'weight' => 0, 'enabled' => 0, 'region' => 'header');
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 0:
        $block = array('subject' => t('Search Engine'),
          'content' => drupalorg_display_block_external_search());
        break;
    }
    return $block;
  }
}

/**
 * Body for external search block.
 */
function drupalorg_display_block_external_search() {
  if (!user_access('search content')) {
    $form = '<form method="get" action="http://www.google.com/search"><div>
               <input type="hidden" name="ie" value="UTF-8" />
               <input type="hidden" name="oe" value="UTF-8" />
               <input type="hidden" name="domains" value="drupal.org" />
               <input type="hidden" name="sitesearch" value="drupal.org" />
               <input type="text" class="form-text" name="q" size="20" maxlength="255" value="" />
               <input type="submit" class="form-submit" name="btnG" value="Google Search" /></div>
               </form>';
    $message = '<p>Due to load issues the Drupal.org search occasionally has to be disabled.  When this happens, you can use external search engines and a modifier like "site:drupal.org" to refine your results to Drupal.  For more information <a href="http://drupal.org/node/271694">see the infrastructure queue</a></p>.';
    return $form . $message;
  }
}

// == IRC nick search ==========================================================

/**
 * Implementation of hook_search().
 *
 * Add support for searching for users based on the fixed IRC nickname field.
 *
 * @todo Possibly remove as part of search migration.
 */
function drupalorg_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('IRC nicks');
      }
    case 'search':
      if (user_access('access user profiles')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $result = pager_query("SELECT u.name, u.uid FROM {profile_values} pv INNER JOIN {users} u ON pv.uid = u.uid WHERE pv.fid = 35 AND LOWER(pv.value) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array('title' => $account->name, 'link' => url('user/'. $account->uid, array('html' => TRUE)));
        }
        return $find;
      }
  }
}
