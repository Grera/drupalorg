<?php
// $Id$

/**
 * @file
 *   This module contains customizations used on drupal.org itself. It is not
 *   meant to be useful for other sites, except as an example of the kinds of
 *   modifications you can make with a site-specific module.
 */

/**
 * Profile field ID for country.
 */
define('DRUPALORG_COUNTRY_PID', 17);

/**
 * Profile field ID for languages.
 */
define('DRUPALORG_LANGUAGES_PID', 48);

/**
 * Major version number for core project listings.
 */
define('DRUPALORG_DOWNLOAD_MAJOR_VERSION', 6);  // 6.x

/**
 * TID for API compatibility for project listings.
 */
define('DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID', 87);  // 6.x

// == Core hooks ===============================================================

function drupalorg_init() {
  // Use the dashboard as the home page if the user selected it.
  global $user;
  if ($user->uid !== 0 && isset($user->drupalorg_set_home) && $_SERVER['REQUEST_URI'] === url('')) {
    drupal_goto('user/' . $user->uid . '/dashboard');
  }

  // Use URL aliasing to get links to the About Drupal page right in book
  // navigation, but serve the drupalorg-generated page.
  if ($_GET['q'] === 'node/1') {
    $_GET['q'] = 'about';
  }

  drupal_add_js(drupal_get_path('module', 'drupalorg') .'/js/general.js');
}

/**
 * Implementation of hook_menu().
 */
function drupalorg_menu() {
  $items['start'] = array(
    'title' => 'Get Started with Drupal',
    'page callback' => 'drupalorg_start',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['download'] = array(
    'title' => 'Download & Extend',
    'page callback' => 'drupalorg_download',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['home'] = array(
    'title' => 'Drupal Open Source CMS',
    'page callback' => 'drupalorg_home',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['about'] = array(
    'title' => 'About Drupal',
    'page callback' => 'drupalorg_about',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['community'] = array(
    'title' => 'Community & Support',
    'page callback' => 'drupalorg_community',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Redirect some legacy paths related to the security listings.
  $items['security-contrib'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib'),
    'type' => MENU_CALLBACK,
  );
  $items['security-contrib/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/contrib/rss.xml'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa'),
    'type' => MENU_CALLBACK,
  );
  $items['security-psa/rss.xml'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('security/psa/rss.xml'),
    'type' => MENU_CALLBACK,
  );

  $items['drupalorg_set_home_js'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_set_home'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/drupalorg'] = array(
    'title' => 'Drupal.org settings',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupalorg_settings_form'),
  );

  return $items;
}

function drupalorg_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array(
        'get_involved' => array('info' => t('Ways to Get Involved')),
        'set_home' => array('info' => t('Set user home page')),
      );

    case 'view':
      switch ($delta) {
        case 'get_involved':
          return array(
            'subject' => t('Ways to Get Involved'),
            'content' => t('<p><a href="/forum">Forums</a> – Get advice and give advice.</p>
<p><a href="/irc">IRC</a> – Start chatting now with other community members.</p>
<p><a href="/developing/modules">Modules</a> – Build a module that other Drupal users can enjoy.</p>
<p><a href="/theme-guide">Themes</a> – Feeling creative? Design a theme for other people to customize their site with.</p>
<p><a href="http://localize.drupal.org">Translations</a> – Fluent in French or a speaker of Spanish? Translate Drupal for other users around the world.</p>
<p><a href="http://groups.drupal.org/event">Events</a> – Come to a Drupal event and have fun with the community.</p>
<p><a href="http://association.drupal.org/civicrm/contribute/transact">Donate</a> – Whether you want to say thanks or ensure there is a secure future for Drupal, every little bit helps and is gratefully received.</p>
<p><a href="/community-initiatives">Projects</a> – There are always projects that need a little extra help and attention along the way. Below are just a few that you can get involved with:</p>
<ul>
<li><a href="/community-initiatives/drupal-core">Drupal core</a></li>
<li><a href="/community-initiatives/redesign">Drupal.org redesign</a></li>
<li><a href="/community-initiatives/documentation">Documentation projects</a></li>
<li><a href="/community-initiatives/drupal-core/usability">Usability issues</a></li>
<li><a href="/node/363007">Core documentation</a></li>
</ul>'),
          );

        case 'set_home':
          global $user;
          if ($user->uid) {
            return array('content' => drupal_get_form('drupalorg_set_home'));
          }
      }
      break;
  }
}

function drupalorg_set_home() {
  global $user;
  $items = array();
  if ($user->drupalorg_set_home) {
    $message = t('Use Default Homepage');
  }
  else {
    $message = t('Make this my Homepage');
  }

  $items[] = array(
    '#value' => l(t($message), $_GET['q'], array('attributes' => array('class' => 'add'))),
  );
  $items['submit'] = array(
    '#type' => 'submit',
    '#value' => $message,
    '#drupalorg_set_home' => $user->drupalorg_set_home ? NULL : TRUE,
    '#ahah' => array(
      'path' => 'drupalorg_set_home_js',
      'event' => 'click',
      'wrapper' => 'drupalorg-set-home',
      'method' => 'replaceWith',
    ),
  );

  return $items;
}

function drupalorg_set_home_submit($form, $form_state) {
  global $user;

  $user = user_save($user, array('drupalorg_set_home' => $form_state['clicked_button']['#drupalorg_set_home']));

  $_POST['form_id'] = NULL;
  print drupal_json(array(
    'status' => TRUE,
    'data' => drupal_get_form('drupalorg_set_home'),
  ));
  exit;
}

// == Major landing pages ======================================================

/**
 * Page callback for the frontpage.
 */
function drupalorg_home() {
  jquery_ui_add('ui.tabs');
  drupal_add_js(drupal_get_path('module', 'drupalorg') .'/js/jquery.bt.min.js');
  drupal_add_js(drupal_get_path('module', 'drupalorg') .'/js/home.js');

  return theme('drupalorg_home');
}

/**
 * Implementation of template_preprocess_page().
 */
function drupalorg_preprocess_page(&$variables) {
  if ($variables['is_front']) {
    $variables['mission'] = '<h2>Come for the software, stay for the community</h2>
    <p class="standfirst">
      What can you make with Drupal? Beautiful, personal blogs or mighty, multi-featured, multiuser corporate sites. Go wherever your imagination takes you with our robust, open-source publishing software.
    </p>';
  }
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 */
function drupalorg_preprocess_drupalorg_home(&$variables) {
  $variables['theme_images_directory'] = drupal_get_path('theme', variable_get('theme_default', 'bluecheese')) .'/images';

  // == Things we made with drupal
  $things = drupalorg_get_most_recent_things_we_made(4);
  $variables['things_we_made'] = drupalorg_render_things_we_made($things);

  $variables['map_content'] = '<div class="homepage-pin homepage-pin-commit"><span class="latitude">41.836944</span><span class="longitude">-87.684444</span><div class="content"><a href="http://chicago2011.drupal.org/"><img src="http://chicago2011.drupal.org/sites/default/themes/conchicago/logo.png" alt="DrupalCon Chicago March 7-10 2011" /></a></div></div>
<div class="homepage-pin homepage-pin-forum"><span class="latitude">60</span><span class="longitude">20</span><div class="content">todo todo todo</div></div>';

  // == Forums tab data/markup
  $sql = db_rewrite_sql("SELECT n.nid, n.title, n.created, n.uid, u.name FROM {node} n INNER JOIN {term_node} tn ON tn.vid = n.vid INNER JOIN {term_data} td ON td.tid = tn.tid INNER JOIN {users} u ON n.uid = u.uid WHERE n.status = 1 AND td.vid = %d ORDER BY n.nid DESC");
  $result = db_query_range($sql, variable_get('forum_nav_vocabulary', ''), 0, 5);
  $recent_forums = '';
  while ($node = db_fetch_object($result)) {
    $recent_forums .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>'; 
  }
  $recent_forums .= '<p>' . l(t('More recent forum topics…'), 'forum') .'</p>';
  $variables['tab_content_forums'] = $recent_forums;

  // == Counters for users

  // If we do not have data or our data was generated an hour ago,
  // try to generate it again.
  if (!count($stats = variable_get('drupalorg_front_counter_data', array())) || (variable_get('drupalorg_front_counter_time', 0) < (time() - 60*60))) {
    $stats = array();

    $stats['number_of_cvs_accounts'] = number_format(db_result(db_query('SELECT count(*) FROM {cvs_accounts} WHERE status <> 0')));
    $stats['number_of_cvs_commits'] = number_format(db_result(db_query('SELECT count(*) FROM {cvs_messages} WHERE created > (unix_timestamp() - 7*24*60*60)')));

    // Users: Count them.
    $stats['number_of_users'] = number_format(db_result(db_query('SELECT COUNT(*) FROM {users}')));

    // Country: A single text field, so we can filter it in SQL.
    $stats['number_of_countries'] = db_result(db_query('SELECT COUNT(DISTINCT value) FROM {profile_values} WHERE fid = %d', DRUPALORG_COUNTRY_PID));

    // Languages: Get all  the distinct combinations and then filter that down.
    $languages = array();
    $result_languages = db_query('SELECT DISTINCT value FROM {profile_values} WHERE fid = %d', DRUPALORG_LANGUAGES_PID);
    while ($language_profile = db_fetch_object($result_languages)) {
      $languages = array_merge($languages, explode('; ', $language_profile->value)); 
    }
    $languages = array_unique($languages);
    $stats['number_of_languages'] = count($languages);

    // Store all the results and the time.
    variable_set('drupalorg_front_counter_data', $stats);
    variable_set('drupalorg_front_counter_time', time());
  }
  $variables += $stats;
}

/**
 * Page callback for the getting started page.
 */
function drupalorg_start() {
  return theme('drupalorg_start');
}

/**
 * Page callback for the about Druapl page.
 */
function drupalorg_about() {
  return theme('drupalorg_about');
}

/**
 * Implementation of template_preprocess_drupalorg_about().
 */
function drupalorg_preprocess_drupalorg_about(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
}

/**
 * Implementation of template_preprocess_drupalorg_start().
 */
function drupalorg_preprocess_drupalorg_start(&$variables) {
  $variables['theme_images_directory'] = drupal_get_path('theme', variable_get('theme_default', 'bluecheese')) .'/images';

  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');
  $variables['drupalorg_featured_install_profiles'] = variable_get('drupalorg_featured_install_profiles', '');

  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_MODULE_TID,
  )));
  $variables['most_popular_modules'] = drupalorg_order_facet_content('sort_most_installed');

  project_solr_run_project_query('project/themes', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_THEME_TID,
  )));
  $variables['most_popular_themes'] = drupalorg_order_facet_content('sort_most_installed');
}

/**
 * Page callback for the download page.
 */
function drupalorg_download() {
  return theme('drupalorg_download');
}

/**
 * Implementation of template_preprocess_drupalorg_download().
 */
function drupalorg_preprocess_drupalorg_download(&$variables) {
  $variables['core_download_button'] = drupalorg_download_drupal_link_button('Download Drupal');
  $variables['drupalorg_featured_translations'] = variable_get('drupalorg_featured_translations', '');
  $variables['drupalorg_featured_install_profiles'] = variable_get('drupalorg_featured_install_profiles', '');

  // Create and cache a solr query for use by block elements.
  project_solr_run_project_query('project/modules', array(array(
    'key' => 'im_vid_' . _project_get_vid(),
    'value' => DRUPALORG_MODULE_TID,
  )));
  
  // Since we control what facets we're building, we can just utilize the
  // delta as the unique key for the sake of brevity (both here and in the
  // $variables array).
  $facets = array(
    'sort_most_installed' => 'drupalorg_order_facet',
    'sort_created' => 'drupalorg_order_facet',
  );
  // Render and save the facet blocks.
  foreach ($facets as $delta => $module) {
    $variables[$delta] = drupalorg_block_render($module, $delta);
  }

  $variables['version_form'] = drupal_get_form('project_solr_version_form', 'download', t('Show only modules for Drupal version'));

  // Rendering the block directly from views doesn't work nicely here, since
  // the resulting markup is harder to use with bluecheese. Plus, we're doing
  // some magic to ensure that the version filter impacts this block as well.
  // So, we just load the view object, do some magic, run the view, fetch the
  // results and render those ourselves. This also lets us add our 'View full
  // index' link directly as another li in the list (as bluecheese expects)
  // instead of having it in its own div.
  $view = views_get_view('project_index');
  $view->set_display('block_1');
  $view->set_arguments(array('modules'));
  // See if the version filter was used, and if so, have it impact the view.
  if (!empty($_GET['filters'])) {
    $matches = array();
    if (preg_match('/drupal_core:(\d+)/', $_GET['filters'], $matches)) {
      $core_version = $matches[1];
      $filters = $view->display_handler->get_option('filters');
      $filters['tid']['value'] = array($core_version);
      $filters['tid']['exposed'] = FALSE;
      $view->display_handler->set_option('filters', $filters);
    }
  }
  $view->pre_execute();
  $view->execute();
  $results = $view->result;
  foreach ($results as $result) {
    $modules[] = l($result->node_title, 'node/' . $result->nid);
  }
  $modules[] = '<a href="/project/modules/index" class="all">View full index</a>';
  $module_index = '<h2>' . t('Module index') . '</h2>';
  $module_index .= theme('item_list', $modules, NULL, 'ul', array('class' => 'flat'));
  $variables['module_index'] = $module_index;
}

/**
 * Page callback for the community page.
 */
function drupalorg_community() {
  return theme('drupalorg_community');
}

/**
 * Implementation of template_preprocess_drupalorg_community().
 */
function drupalorg_preprocess_drupalorg_community(&$variables) {
  $variables['advertisement'] = ''; // used to pull in the proper advertisement block.
  $variables['help_form'] = '';
  if (module_exists('drupalorg_search')) {
    $variables['help_form'] = drupal_get_form('drupalorg_search_help_form');
  }
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_theme() {
  return array(
    'drupalorg_start' => array(
      'template' => 'drupalorg-start',
    ),
    'drupalorg_download' => array(
      'template' => 'drupalorg-download',
    ),
    'drupalorg_home' => array(
      'template' => 'drupalorg-home',
    ),
    'drupalorg_about' => array(
      'template' => 'drupalorg-about',
    ),
    'drupalorg_community' => array(
      'template' => 'drupalorg-community',
    ),
  );
}

// == Altering existing behavior ===============================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_form_alter(&$form, $form_state, $form_id) {
  // List of forms to check for overrides, and the corresponding permissions.
  $override_forms = array(
    'book_node_form'       => 'revert revisions',
    'forum_node_form'      => 'administer nodes',
    'page_node_form'       => 'administer nodes',
    'story_node_form'      => 'administer nodes',
  );
  // Override the access for attachments if it's a forbidden form,
  // and the user does not have sufficient permissions.
  if (in_array($form_id, array_keys($override_forms)) && !user_access($override_forms[$form_id])) {
    if (isset($form['attachments']['#access'])) {
      $form['attachments']['#access'] = FALSE;
    }
  }

  // Ensure that wildcard email addresses are not abused.
  if ($form_id == 'user_register') {
    $form['#validate'][] = 'drupalorg_register_mail_validate';
  }
  
  // Core search index is not used, so clear off wipe option.
  if ($form_id == 'search_admin_settings') {
    unset($form['status']['wipe']);
  }
  
  // Add home page option to user access rule adding and editing.
  // Make sure if we edit a homepage option, we keep using that as a default.
  if ($form_id == 'user_admin_access_add_form' || $form_id == 'user_admin_access_edit_form') {
    if ($form['#parameters'][2]['type'] == 'homepage') {
      $form['type']['#default_value'] = 'homepage';
    }
    $form['type']['#options']['homepage'] = t('Homepage');
  }
  
  // Ensure nice Drupal home page addresses
  if ($form_id == 'user_profile_form') {
    $form['#validate'][] = 'drupalorg_profile_user_edit_validate';
    // Hack to make the language list a multiselect field (there is no UI
    // for this in profile module). We need to hack around that profile only
    // ever stores select field values as strings, so we need to explode what
    // was in there for our multiselect form.
    if (isset($form['Personal information']['profile_languages'])) {
      $form['Personal information']['profile_languages']['#multiple'] = TRUE;
      $form['Personal information']['profile_languages']['#default_value'] = explode('; ', $form['Personal information']['profile_languages']['#default_value']);
      $form['#submit'] = array_merge(array('drupalorg_profile_fix_languages'), $form['#submit']);
    }
  }

  // Add extra choices to the dblog settings selector
  if ($form_id == 'dblog_admin_settings') {
    $form['dblog_row_limit']['#options'] = drupal_map_assoc(array(100, 1000, 10000, 100000, 250000, 500000, 1000000));
  }
}

// == User form functionality ==================================================

/**
 * Try to catch wildcard email address signups, such as joe+drupal@gmail.com.
 */
function drupalorg_register_mail_validate($form, &$form_state) {
  $hit = preg_match('/(.*)\+(.*)\@(.*)/', $form_state['values']['mail'], $match);
  if ($hit) {
    if (db_result(db_query("SELECT uid FROM {users} WHERE LOWER(mail) LIKE LOWER('%s')", $match[1] .'+%%@'. $match[3])) > 0) {
      form_set_error('mail', t('An e-mail address similar to %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['mail'], '@password' => url('user/password'))));
    }
  }
}

/**
 * Validate all fields in the user_edit form against the list of bad words.
 *
 * @todo Core almost supports it with above form_alter but listings are bad
 *   (when the value is homepage, core does not know about it, so does not print it).
 * @todo Headers are blocked by some providers so this is not accurate.
 */
function drupalorg_profile_user_edit_validate($form, &$form_state) {
  if (!empty($form_state['values']['homepage']) && is_string($form_state['values']['homepage']) && (strlen($form_state['values']['homepage']) > 7)) {
    $result = db_query("SELECT mask FROM {access} WHERE type = '%s' AND status = %d", 'homepage', 0);
    $masks = array();
    while ($mask = db_fetch_object($result)) {
      // Build masks array for preg_matching.
      $masks[] = '@'. strtr($mask->mask, array('.' => '\.', '%' => '.*', '_' => '.')) .'@';
    }
    // Check denied homepages.
    foreach ($masks as $mask) {
      if (preg_match($mask, $form_state['values']['homepage'])) {
        form_set_error('homepage', t('Unsuitable Drupal site detected. This address cannot be set as your Drupal site link.'));
      }
    }
    // Did not work due to several hosts rewriting headers.
    /*if (!user_access('administer users')) {
      // Check for Drupal-ness of website. Try only once.
      $response = drupal_http_request($form_state['values']['homepage'], array(), 'GET', NULL, 1);
      if ($response->headers['Expires'] != 'Sun, 19 Nov 1978 05:00:00 GMT') {
        form_set_error('homepage', t("Your website does not seem to be a Drupal site. If you think we are wrong, please open an issue in the webmasters' queue."));
      }
    }*/
  }
}

/**
 * Submit handler for the user profile form, to serialize languages to a string.
 */
function drupalorg_profile_fix_languages(&$form, &$form_state) {
  if (is_array($form_state['values']['profile_languages'])) {
    $form_state['values']['profile_languages'] = join('; ', array_keys($form_state['values']['profile_languages']));
  }
}

/**
 * Add support for searching for users based on the fixed IRC nickname field.
 *
 * @todo Possibly remove as part of search migration.
 */
function drupalorg_search($op = 'search', $keys = NULL) {
  switch ($op) {
    case 'name':
      if (user_access('access user profiles')) {
        return t('IRC nicks');
      }
    case 'search':
      if (user_access('access user profiles')) {
        $find = array();
        // Replace wildcards with MySQL/PostgreSQL wildcards.
        $keys = preg_replace('!\*+!', '%', $keys);
        $result = pager_query("SELECT u.name, u.uid FROM {profile_values} pv INNER JOIN {users} u ON pv.uid = u.uid WHERE pv.fid = 35 AND LOWER(pv.value) LIKE LOWER('%%%s%%')", 15, 0, NULL, $keys);
        while ($account = db_fetch_object($result)) {
          $find[] = array('title' => $account->name, 'link' => url('user/'. $account->uid, array('html' => TRUE)));
        }
        return $find;
      }
  }
}

/**
 * Implementation of hook_views_api().
 */
function drupalorg_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'drupalorg'),
  );
}

/**
 * Implement hook_views_default_views_alter().
 */
function drupalorg_views_default_views_alter(&$views) {
  $path = drupal_get_path('module', 'drupalorg');
  require_once("$path/drupalorg.views_default.inc");
  _drupalorg_views_default_views_alter($views);
}
  
/**
* Return an array of the most recently created projects with the given taxonomy term.
*
* @return
*   An array of of the most recent case study images created projects. The array includes the node
*   ID and node title and image url.
*/
function drupalorg_get_most_recent_things_we_made($limit = 4) {

  $cached = cache_get('things_we_made');

  if ($cached->data) {
    $things = $cached->data;
  }
  else {
    // Obtain our case studies
    // We will pad the results to try to make sure we have enough images
    $things = array();
    $result = db_query('SELECT n.nid, n.title, nr.body FROM {node} n LEFT JOIN {term_node} tn ON n.nid = tn.nid AND n.vid = tn.vid LEFT JOIN {node_revisions} nr ON nr.nid = n.nid AND nr.vid = n.vid WHERE tn.tid = 25 AND n.status = 1 AND n.promote = 1 ORDER BY n.created DESC LIMIT %d', $limit * 2);

    // Find the images in the case study
    while ($thing = db_fetch_object($result)) {
      $image_url = '';
      $has_image = preg_match("/http:\/\/[^\'\"]*\.(png|jpg|jpeg)/", $thing->body, $image_url);
      if ($has_image) {
        $things[] = array(
          'nid' => $thing->nid,
          'title' => $thing->title,
          'image_url' => $image_url[0],
        );
      }

      // Stop looking if we have met our limit
      if (count($things) == $limit) {
        break;
      }
    }
    cache_set('things_we_made', $things);
  }

  return $things;
}

/**
 * Render Things We Made block on the homepage
 *
 * @return a themed ul listing of case study images
 */
function drupalorg_render_things_we_made($things) {
  $slides = array();
  foreach ($things as $i => $thing) {
    $image = theme('image', $thing['image_url'], $thing['title'], $thing['title'], NULL, FALSE);
    $caption = '<div class="caption">'. $thing['title'] .'</div>';
    $output = l($image . $caption, 'node/'. $thing['nid'], array('html' => TRUE));

    $slides[] = array(
      'data' => $output,
      'class' => $i == 0 ? 'active thing-'. $i : 'thing-'. $i,
    );
  }
  $things = theme('item_list', $slides, NULL, 'ul', array('class' => 'things-we-made'));

  return '<div class="things-we-made-wrapper">'. $things .'</div>';
}

/*
 * Returns a link to the latest recommended release for the Drupal project.
 *
 * @param $text
 *   Text to be used for the button in addition to the version string
 *
 * @return
 *   HTML string with link to the release node.
 */
function drupalorg_download_drupal_link_button($text) {
  $release = project_release_get_current_recommended(3060, DRUPALORG_DOWNLOAD_API_COMPATIBILITY_TID, DRUPALORG_DOWNLOAD_MAJOR_VERSION, 'recommended');
  return l('<span>'. check_plain("$text $release->version") .'</span>', "node/$release->nid", array('html' => TRUE, 'attributes' => array('class' => 'link-button')));
}

/**
 * Default dashboard content.
 *
 * @todo this is totally provisional at this point.
 */
function drupalorg_homebox() {
  return array(
    'dashboard' => array(
      'title' => 'Dashboard',
      'path' => 'dashboard',
      'menu' => 0,
      'enabled' => 1,
      'regions' => 3,
      'cache' => 0,
      'full' => 0,
      'custom' => 0,
      'roles' => array(
        0 => 'authenticated user',
      ),
      'color' => 0,
      'colors' => array(
        0 => '#e4f0f8',
        1 => '#c4d5b4',
        2 => '#ecc189',
        3 => '#ec8989',
        4 => '#6b6b70',
        5 => '#4b97e5',
      ),
      'widths' => array(),
      'blocks' => array(
        // Column 1
        'drupalorg_news_drupal-news' => array(
          'module' => 'drupalorg_news',
          'delta' => 'drupal-news',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -33,
        ),
        'aggregator_category-2' => array(
          'module' => 'aggregator',
          'delta' => 'category-2',
          'region' => 1,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -31,
        ),
        // Column 2
        'views_flag_bookmarks-block' => array(
          'module' => 'views',
          'delta' => 'flag_bookmarks-block',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
        'tracker2_user' => array(
          'module' => 'tracker2',
          'delta' => 'user',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => 1,
        ),
        'views_a512ec6dea837b33a2b010c2af17ed85' => array(
          'module' => 'views',
          'delta' => 'a512ec6dea837b33a2b010c2af17ed85',
          'region' => 2,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => 2,
        ),
        // Column 3
        'project_issue_issue_cockpit' => array(
          'module' => 'project_issue',
          'delta' => 'issue_cockpit',
          'nid' => 3060,
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -32,
        ),
        'drupalorg_project_0' => array(
          'module' => 'drupalorg_project',
          'delta' => '0',
          'region' => 3,
          'movable' => 1,
          'status' => 1,
          'open' => 1,
          'closable' => 1,
          'title' => '',
          'weight' => -7,
        ),
      ),
    ),
  );
}

/**
 * Render the HTML for a given block.
 *
 * This function takes a module and a delta, loads the block info from the DB,
 * invokes the function to compute the block content, and then renders the
 * block to HTML via theme('block'). This is basically a heavily pared back
 * implementation of block_list() for a single block.
 *
 * @param string $module
 *   The module that defines the block we're rendering.
 * 
 * @param string $delta
 *   The delta of the block that we're rendering.
 * 
 * @return
 *   The rendered HTML for the given block.
 * 
 * @see block_list()
 * @see theme_block()
 */
function drupalorg_block_render($module, $delta) {
  // Load the title, since that can be modified administratively.  
  $title = db_result(db_query("SELECT title FROM {blocks} WHERE module = '%s' AND delta = '%s'", $module, $delta));

  $block_output = module_invoke($module, 'block', 'view', $delta);
  foreach ($block_output as $k => $v) {
    $block->$k = $v;
  }

  // Set the module and delta so that the blocks contain
  // at least the minimum of expected information.
  $block->module = $module;
  $block->delta = $delta;

  if (isset($block->content) && $block->content) {
    // Override default block title if a custom display title is present.
    if ($title) {
      // Check plain admin-generated titles, but not titles set in code.
      $block->subject = $title == '<none>' ? '' : check_plain($title);
    }
    if (!isset($block->subject)) {
      $block->subject = '';
    }
  }
  return theme('block', $block);
}

function drupalorg_settings_form() {
  $form = array();

  $form['drupalorg_featured_translations'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured translations'),
    '#default_value' => variable_get('drupalorg_featured_translations', ''),
    '#rows' => 5,
  );
  $form['drupalorg_featured_install_profiles'] = array(
    '#type' => 'textarea',
    '#title' => t('Featured install profiles'),
    '#default_value' => variable_get('drupalorg_featured_install_profiles', ''),
    '#rows' => 5,
  );

  return system_settings_form($form);
}
