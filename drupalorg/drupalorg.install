<?php

/**
 * @file
 *   Install and upgrade functionality for drupalorg.module.
 */

/**
 * Implements hook_schema().
 */
function drupalorg_schema() {
  $system_schema = system_schema();
  $schema = array(
    'drupalorg' => $system_schema['cache'],
  );
  $schema['drupalorg']['description'] = 'Cache table for home page map data, with a mediocre name.';
  return $schema;
}

/**
 * Set the system weight heavier than cvslog so our form_alter comes later.
 * See http://drupal.org/node/210497 for more information.
 */
function drupalorg_install() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'drupalorg')
    ->execute();
}

/**
 * Update dependencies.
 */
function drupalorg_update_dependencies() {
  return array(
    'drupalorg' => array(
      // drupalorg_update_7003() after profile_update_7001() so that
      // {profile_field} exists.
      7003 => array(
        'profile' => 7001,
      ),
      // drupalorg_update_7006() after tracker_update_7000() so that tracker
      // tables exist.
      7006 => array(
        'tracker' => 7000,
      ),
    ),
    // drupalorg_update_7003() needs to run before any call to module_enable()
    // because that triggers feature rebuilds. Field types need to be enabled
    // ahead of time.
    'project' => array(
      7000 => array(
        'drupalorg' => 7003,
      ),
    ),
  );
}

/**
 * Move users access column back to core default.
 */
function drupalorg_update_7000() {
  // Re-create access column.
  db_add_field('users', 'access', array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'Timestamp for previous time user accessed the site.',
  ));

  // Migrate data.
  // Use a multi table update for speed reasons.
  db_query('UPDATE {users}, {users_access} SET {users}.access = {users_access}.access WHERE {users}.uid = {users_access}.uid');

  // Remove table.
  db_drop_table('users_access');
}

/**
 * Remove cache headers columns.
 */
function drupalorg_update_7001() {
  $schema = system_schema_cache_7054();
  $cache_tables = array(
    'drupalorg' => 'Cache table for home page map data, with a mediocre name.',
  );
  foreach ($cache_tables as $table => $description) {
    $schema['description'] = $description;
    db_drop_table($table);
    db_create_table($table, $schema);
  }
}

/**
 * Disable aggregator feed blocks, there are so many that they overwhelm the
 * block admin UI.
 */
function drupalorg_update_7002() {
  db_update('aggregator_feed')
    ->fields(array('block' => 0))
    ->execute();
}

/**
 * Enable new dependencies for change notice feature.
 */
function drupalorg_update_7003() {
  module_enable(array('entity', 'entityreference', 'machine_name', 'file', 'list', 'field_group'));
  drupal_flush_all_caches();
}

/**
 * Migrate user locations.
 */
function drupalorg_update_7004() {
  module_enable(array('drupalorg_user', 'drupalorg_home_support'));
  features_flush_caches();

  // This will generate the field data using the math functions built into the
  // database instead of needing to run multiple queries and round-trip to php.
  $query = db_select('html5_user_geolocation', 'hug');
  $query->innerJoin('users', 'u', 'u.uid = hug.uid');
  $query->addExpression(':entity_type', 'entity_type', array(':entity_type' => 'user'));
  $query->addExpression(':bundle', 'bundle', array(':bundle' => 'user'));
  $query->addExpression(':deleted', 'deleted', array(':deleted' => 0));
  $query->addField('u', 'uid', 'entity_id');
  $query->addField('u', 'uid', 'revision_id');
  $query->addExpression(':language', 'language', array(':language' => LANGUAGE_NONE));
  $query->addExpression(':delta', 'delta', array(':delta' => 0));
  $query->addField('hug', 'latitude', 'field_user_geolocation_lat');
  $query->addField('hug', 'longitude', 'field_user_geolocation_lng');
  $query->addExpression('SIN(RADIANS(hug.latitude))', 'field_user_geolocation_lat_sin');
  $query->addExpression('COS(RADIANS(hug.latitude))', 'field_user_geolocation_lat_cos');
  $query->addExpression('RADIANS(hug.longitude)', 'field_user_geolocation_lng_rad');

  $query2 = clone($query);
  // Direct field injection for speed reasons.
  db_insert('field_data_field_user_geolocation')
    ->from($query)
    ->execute();
  db_insert('field_revision_field_user_geolocation')
    ->from($query2)
    ->execute();
  // Since we have manually injected data, we need to explicitly clear the field cache.
  field_cache_clear();

  db_drop_table('html5_user_geolocation');
}

/**
 * Populate tracker.
 */
function drupalorg_update_7006() {
  module_enable(array('tracker'));
  // Tell the normal indexer that everything's up to date.
  variable_set('tracker_index_nid', 0);
  // Quickly recalculate the tracker using a few massive queries instead of
  // indexing a single node at a time.
  db_query('TRUNCATE {tracker_node}');
  db_query('TRUNCATE {tracker_user}');
  // Tracker entry for all nodes.
  db_query("INSERT INTO {tracker_node} (nid, published, changed) (SELECT n.nid, n.status, GREATEST(n.changed, IFNULL(MAX(c.changed), 0)) FROM {node} n LEFT JOIN {comment} c ON n.nid = c.nid GROUP BY n.nid)");
  // Add a temporary index to use for the next query.
  db_add_index('comment', 'tmp_tracking_idx', array('nid', 'status', 'uid'));
  // Tracker entries for commenters.
  db_query("INSERT INTO {tracker_user} (nid, uid, published, changed) (SELECT t.nid, c.uid, t.published, t.changed FROM {tracker_node} t INNER JOIN {comment} c ON t.nid = c.nid WHERE c.status = 1 GROUP BY c.nid, c.uid)");
  db_drop_index('comment', 'tmp_tracking_idx');
  // Tracker entry for node authors.
  db_query("INSERT IGNORE INTO {tracker_user} (nid, uid, published, changed) (SELECT n.nid, n.uid, t.published, t.changed FROM {tracker_node} t INNER JOIN {node} n ON t.nid = n.nid)");
}

/**
 * Update renamed dashboard block.
 */
function drupalorg_update_7007() {
  $query = db_select('homebox_users', 'hu');
  $query->condition('settings', '%tracker2_user%', 'LIKE');
  $query->fields('hu', array('uid', 'name', 'settings'));
  foreach ($query->execute() as $row) {
    $row->settings = unserialize($row->settings);
    if (isset($row->settings['tracker2_user'])) {
      $row->settings['drupalorg_tracker_user'] = $row->settings['tracker2_user'];
      $row->settings['drupalorg_tracker_user']['module'] = 'drupalorg';
      $row->settings['drupalorg_tracker_user']['delta'] = 'tracker_user';
      unset($row->settings['tracker2_user']);
      db_update('homebox_users')
        ->fields(array('settings' => serialize($row->settings)))
        ->condition('uid', $row->uid, '=')
        ->condition('name', $row->name, '=')
        ->execute();
    }
  }
}

/**
 * Moved to drupalorg_crosssite.
 */
function drupalorg_update_7008() {
  db_drop_table('drupalorg_civimembership');
}

/**
 * Patch user settings for homebox blocks that had block delta changes.
 */
function drupalorg_update_7009() {
  // Need to handle both 9 and 10 element arrays due to "color" key going away.
  $old = 's:19:"drupalorg_project_0";a:10:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:1:"0";';
  $new = 's:29:"drupalorg_project_bingo-block";a:10:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:11:"bingo-block";';
  db_query("UPDATE {homebox_users} SET settings = REPLACE(settings, :old, :new)", array(':old' => $old, ':new' => $new));
  $old = 's:19:"drupalorg_project_0";a:9:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:1:"0";';
  $new = 's:29:"drupalorg_project_bingo-block";a:9:{s:6:"module";s:17:"drupalorg_project";s:5:"delta";s:11:"bingo-block";';
  db_query("UPDATE {homebox_users} SET settings = REPLACE(settings, :old, :new)", array(':old' => $old, ':new' => $new));
}

/**
 * Bind updated project-related permissions to roles.
 */
function drupalorg_update_7010() {
  $query = db_insert('role_permission')
    ->fields(array('rid', 'permission', 'module'));

  $types = array(
    'project_distribution',
    'project_core',
    'project_drupalorg',
    'project_module',
    'project_theme',
    'project_theme_engine',
    'project_translation'
  );

  foreach ($types as $type) {
    $query->values(array(
      'rid' => 20,
      'permission' => "create $type content",
      'module' => 'node',
    ));

    $query->values(array(
      'rid' => 20,
      'permission' => "edit own $type content",
      'module' => 'node',
    ));

    $query->values(array(
      'rid' => 3,
      'permission' => "delete any $type content",
      'module' => 'node',
    ));

    $query->values(array(
      'rid' => 3,
      'permission' => "edit any $type content",
      'module' => 'node',
    ));
  }

  $query->execute();
}
