<?php
// $Id$

/**
 * @file
 *   Cross-site functionality for Drupal.org subsites, which should be enabled
 *   on more subsites.
 */

// == Core hooks ===============================================================

/**
 * Implementation of hook_preprocess_page().
 *
 * Add header, footer and content menu data to the page variables.
 */
function drupalorg_crosssite_preprocess_page(&$vars, $hook) {
  global $user;

  // Site hostnames for the sites we use.
  $sites = drupalorg_crosssite_menu_sites();

  // == Build the header navigation

  // Hardcoded list of menu items. These are not supposed to have any indication
  // of the active item, since the page title and submenus have that indication.
  // Also, we should not let people edit these, since they should be standard
  // among all the subsites. So this is why they are here.
  $nav_header_links = array(
    'getting-started' => array('href' => 'start',           'title' => t('Get Started'), '#site' => 'main'),
    'forum'           => array('href' => 'community',       'title' => t('Community & Support'), '#site' => 'main'),
    'handbooks'       => array('href' => 'documentation',   'title' => t('Documentation'), '#site' => 'docs'),
    'project'         => array('href' => 'download',        'title' => t('Download & Extend'), '#site' => 'project'),
    'marketplace'     => array('href' => 'services',        'title' => t('Marketplace'), '#site' => 'main'),
    'about'           => array('href' => 'about',           'title' => t('About'), '#site' => 'main'),
  );
  // Make all external links right.
  $nav_header_links = drupalorg_crosssite_menu_absolute_links($nav_header_links);
  // Theme as links, and avoid class="links" on it.
  $vars['nav_header'] = theme('links', $nav_header_links, array());

  // == Build the footer navigation

  $nav_footer_links = array(
    array(
      'news'        => array('href' => 'news', 'title' => t('Drupal News'), '#site' => 'main'),
      'planet'      => array('href' => 'planet', 'title' => t('Planet Drupal'), '#site' => 'main'),
      'association' => array('href' => '', 'title' => t('Association'), '#site' => 'association'),
      'jobs'        => array('href' => 'jobs', 'title' => t('Jobs'), '#site' => 'groups'),
    ),
    array(
      'getting-started' => array('href' => 'getting-started', 'title' => t('Getting Started'), '#site' => 'main'),
      'download-core'   => array('href' => 'project/Drupal+project', 'title' => t('Downloading Drupal'), '#site' => 'project'),
      'get-involved'    => array('href' => '', 'title' => t('Get Involved'), '#site' => 'main'),
    ),
    array(
      'download'          => array('href' => 'project', 'title' => t('Download & Extend'), '#site' => 'project'),
      'download-core'     => array('href' => 'project/Drupal+project', 'title' => t('Drupal core'), '#site' => 'project'),
      'download-modules'  => array('href' => 'project/Modules', 'title' => t('Modules'), '#site' => 'main'),
      'download-themes'   => array('href' => 'project/Themes', 'title' => t('Themes'), '#site' => 'main'),
      'download-profiles' => array('href' => 'project/Installation+profiles', 'title' => t('Installation Profiles'), '#site' => 'main'),
    ),
    array(
      'events'      => array('href' => 'events', 'title' => t('Events'), '#site' => 'groups'),
      'drupalcon'   => array('href' => 'events?filter0%5B%5D=drupalcon', 'title' => t('Drupalcon'), '#site' => 'groups'),
      'groups-join' => array('href' => '', 'title' => t('Join a Local Group'), '#site' => 'groups'),
      'training'    => array('href' => 'events?filter0%5B%5D=training', 'title' => t('Training'), '#site' => 'groups'),
      'druplicon'   => array('href' => 'druplicon', 'title' => t('Druplicon'), '#site' => 'main'),
    ),
    array(
      'col5item1' => array('href' => 'col5item1', 'title' => t('col5item1'), '#site' => 'main'),
      'col5item2' => array('href' => 'col5item2', 'title' => t('col5item2'), '#site' => 'main'),
      'col5item3' => array('href' => 'col5item3', 'title' => t('col5item3'), '#site' => 'main'),
    ),
  );

  $vars['nav_footer'] = '';
  foreach ($nav_footer_links as $num => $links_column) {
    // Make all external links right.
    $links_column = drupalorg_crosssite_menu_absolute_links($links_column);

    // Add alpha and omega class to first and last item.
    $alpha_omega = '';
    if ($num == 0) {
      $alpha_omega = ' alpha';
    }
    else if ($num == count($nav_footer_links) - 1) {
      $alpha_omega = ' omega';
    }

    // Theme as links, and avoid class="links" on it.
    $vars['nav_footer'] .= '<div class="grid-footer'. $alpha_omega .'">'. theme('links', $links_column, array()) .'</div>';
  }

  // Add content header navigation.
  drupalorg_crosssite_content_menu($vars);

  // Add page tool navigation.
  $page_tools = module_invoke_all('drupalorg_crosssite_page_tools');
  if (count($page_tools) > 0) {
    $vars['page_tools'] = theme('links', $page_tools);
  }

  // == Nav masthead links

  $nav_masthead_links = array(
    'homepage'       => array('href' => 'home',      'title' => t('Drupal Homepage'),  '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^(home|)/?$')),
    'dashboard'      => array('href' => 'dashboard', 'title' => t('Your dashboard'),   '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^dashboard(/|$)')),
  );
  $userinfo = '';
  if ($user->uid == 0) {
    $nav_masthead_links['login-register'] = array('href' => 'user', 'title' => t('Login / Register'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^user(/|$)'));
  }
  else {
    // If not the main site (or a test server), provide logout link to the main site, since
    // that would log us out of the single-sign-on-domain. @todo
    // $single_sign_on_prefix = drupalorg_crosssite_menu_site('main') ? '' : 'http://drupal.org/';

    // Add user page link and logout link.
    $userinfo = '<div id="userinfo">'. l(t('Logged in as @username', array('@username' => $user->name)), 'user') .' '. l(t('Logout'), 'logout') .'</div>';
  }
  // Make all external links right.
  $nav_masthead_links = drupalorg_crosssite_menu_absolute_links($nav_masthead_links);
  // Theme as links, and avoid class="links" on it.
  $vars['nav_masthead'] = theme('links', $nav_masthead_links, array()) . $userinfo;
}

/**
 * Content for the content top menu.
 *
 * We implement this as "custom menus", since we need to have cross-site menu
 * items in some cases, and having these sycned across all subsites would be
 * painful (read: menu items would have different URLs and menu ids on subsites,
 * since an API link on the docs site would link out to API while a docs link
 * on the API would link out to the docs site).
 */
function drupalorg_crosssite_content_menu(&$vars) {
  global $user;

  // Specify the high level matching criteria for each menu and let others put
  // in more menus.
  $nav_content_areas = array(
    'documentation' => drupalorg_crosssite_menu_site('api') || drupalorg_crosssite_menu_type('docs', array('book')) || drupalorg_crosssite_menu_path('docs', '^(documentation|handbooks)(/|$)'),
    'downloads'     => drupalorg_crosssite_menu_path('project', '^(project|download)(/|$)') || drupalorg_crosssite_menu_type('project', array('project_project', 'project_issue', 'project_release')),
    // Events appear at here and as an individual tab list. Commented out from here.
    'community'     => drupalorg_crosssite_menu_path('main', '^(irc|mailing-lists|profile|forum|community)(/|$)'), // || drupalorg_crosssite_menu_path('groups', '^events'),
    'jobs'          => drupalorg_crosssite_menu_path('groups', '^(jobs)(/|$)'),
    'association'   => drupalorg_crosssite_menu_site('association'),
    'events'        => drupalorg_crosssite_menu_path('groups', '^events(/|$)'),
    'druplicon'     => drupalorg_crosssite_menu_path('main', '^(node/9068|druplicon)(/|$)'),
    'dashboard'     => drupalorg_crosssite_menu_path('main', '^(dashboard|user/'. $user->uid .')(/|$)'),
  );

  // Theoretically, the matching criteria made one of the areas win (have TRUE as
  // the array value). If there are two menus to display on the same path, we
  // are in trouble, since we only have one menu displayed per path. Fix the above
  // matching in that case. (This will pick the first matched in that case).
  $matched_menu = array_search(TRUE, $nav_content_areas);

  //Identify sections names/titles to be displayed above content area menus
  $section_names = array(
    'downloads' => 'Download and Extend',
    'documentation' => 'Documentation',
    'community' => 'Community &amp; Support',
    'dashboard' => '',
  );
  //set the section_name variable to be output in page.tpl.php
  if (isset($section_names[$matched_menu])) {
    $vars['section_name'] = $section_names[$matched_menu];
  }

  // Now ask for all the menu items for the matched menu. Let modules add in
  // menu items (eg. in case of dashboard module adding items we don't know about).
  $nav_content_links = module_invoke_all('drupalorg_crosssite_content_menu_items', $matched_menu);

  if (count($nav_content_links)) {
    // Make all external links right.

    $nav_content_links = drupalorg_crosssite_menu_absolute_links($nav_content_links);

    //check the links to see if it is an active link
    foreach ($nav_content_links as $key => $link) {
      $class = $key;
      if (isset($link['href']) && ($link['href'] == $_GET['q'] || ($link['href'] == '<front>' && drupal_is_front_page()))
          && (empty($link['language']) || $link['language']->language == $language->language)) {
          //this is an active link/tab, therefore we don't want
          //to display the page title - used in page.tpl.php
          $vars['matched_content_link'] = TRUE;
      }
    }

    // Theme the links for the page, bypassing class="links".
    $vars['nav_content'] = theme('links', $nav_content_links, array());
    $vars['nav_content_class'] = ' class="nav-content-'. $matched_menu .'"';
    return;
  }

  // Else just return an empty content nav menu.
  $vars['nav_content'] = $vars['nav_content_class'] = '';
}

/**
 * Implementation of hook_drupalorg_crosssite_content_menu_items().
 *
 * Return a list of menu items for the given menu with metadata on their
 * associated site and whether they are active at the moment.
 */
function drupalorg_crosssite_drupalorg_crosssite_content_menu_items($matched_menu) {
  switch ($matched_menu) {

    // REAL cross-site.
    case 'documentation':
      return array(
        'home'    => array('href' => 'documentation', 'title' => t('Docs Home'), '#site' => 'docs', '#active' => drupalorg_crosssite_menu_type('docs', array('book')) || drupalorg_crosssite_menu_path('docs', '^(documentation(?!/index|/recent)|handbooks(/|$))')),
        'api'     => array('href' => '', 'title' => t('API'), '#site' => 'api', '#active' => drupalorg_crosssite_menu_site('api')),
        'index'   => array('href' => 'documentation/index', 'title' => t('Index'), '#site' => 'docs', '#active' => drupalorg_crosssite_menu_path('docs', '^(documentation/index)(/|$)')),
        'recent'  => array('href' => 'documentation/recent', 'title' => t('Recently updated'), '#site' => 'docs', '#active' => drupalorg_crosssite_menu_path('docs', '^(node/23192)(/|$)')),
      );

    // Just on the project site.
    case 'downloads':
      return array(
        // All are exact paths and so theme('links') will make them gain active
        // classes when on the projects site. Therefore no need for #active.
        'home'         => array('href' => 'download', 'title' => t('Download & Extend Home'), '#site' => 'project'),
        'core'         => array('href' => 'project/drupal', 'title' => t('Drupal Core'), '#site' => 'project'),
        'modules'      => array('href' => 'project/modules', 'title' => t('Modules'), '#site' => 'project'),
        'themes'       => array('href' => 'project/themes', 'title' => t('Themes'), '#site' => 'project'),
        'translations' => array('href' => 'project/translations', 'title' => t('Translations'), '#site' => 'project'),
        'theme-engine' => array('href' => 'project/theme engines', 'title' => t('Theme Engines'), '#site' => 'project'),
        'install-profiles' => array('href' => 'project/installation profiles', 'title' => t('Installation Profiles'), '#site' => 'project'),
      );

    // REAL cross-site.
    case 'community':
      return array(
        'home'          => array('href' => 'community', 'title' => t('Community Home'), '#site' => 'main'),
        'local-groups'  => array('href' => '??', 'title' => t('Local Groups'), '#site' => 'groups'),
        'online-groups' => array('href' => '??', 'title' => t('Online Groups'), '#site' => 'groups'),
        'chat'          => array('href' => 'irc', 'title' => t('Chat'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^irc(/|$)')),
        // Does not make sense, see question to Mark at http://groups.drupal.org/node/19010
        // 'events'        => array('href' => 'events', 'title' => t('Events'), '#site' => 'groups'),
        'lists'         => array('href' => 'mailing-lists', 'title' => t('Mailing lists'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^mailing-lists(/|$)')),
        'members'       => array('href' => 'profile', 'title' => t('Member directory'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^profile(/|$)')),
        'forum'         => array('href' => 'forum', 'title' => t('Forum'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^forum(/|$)') || drupalorg_crosssite_menu_type('main', array('forum'))),
      );

    // Just on the jobs site. Will need dynamic listing based on numbers.
    case 'jobs':
      return array(
        'latest'     => array('href' => 'jobs', 'title' => t('Latest'), '#site' => 'groups'),
        'developers' => array('href' => '??', 'title' => t('Developers (#)'), '#site' => 'groups'),
        'designers'  => array('href' => '??', 'title' => t('Designers (#)'), '#site' => 'groups'),
        'writers'    => array('href' => '??', 'title' => t('Writers (#)'), '#site' => 'groups'),
      );

    // Just on the association site.
    case 'association':
      return array(
        'home'       => array('href' => '', 'title' => t('Association Home'), '#site' => 'association'),
        'blogs'      => array('href' => 'blogs', 'title' => t('Blogs'), '#site' => 'association'),
        'about'      => array('href' => 'about', 'title' => t('About'), '#site' => 'association'),
        'donate'     => array('href' => 'civicrm/contribute/transact?reset=1&id=8', 'title' => t('Donate'), '#site' => 'association'),
        'membership' => array('href' => 'membership', 'title' => t('Memberships'), '#site' => 'association'),
        'press'      => array('href' => 'press', 'title' => t('Press'), '#site' => 'association'),
        'faq'        => array('href' => 'faq', 'title' => t('FAQ'), '#site' => 'association'),
        'staff'      => array('href' => 'about/staff', 'title' => t('Staff'), '#site' => 'association'),
        'contact'    => array('href' => 'contact', 'title' => t('Contact'), '#site' => 'association'),
        // Was on the mockups but makes no sense.
        //'home' => array('href' => '', 'title' => t('Login')),
      );

    // Just on the events site. Could possibly do the same dynamic
    // stuff as jobs for consistency (counting number of events).
    case 'events':
      return array(
        'latest'    => array('href' => 'events', 'title' => t('Latest'), '#site' => 'groups'),
        'local'     => array('href' => 'events?filter0%5B%5D=usergroup', 'title' => t('Local Group Meeting'), '#site' => 'groups'),
        'training'  => array('href' => 'events?filter0%5B%5D=training', 'title' => t('Training'), 'site' => '#groups'),
        'regional'  => array('href' => 'events?filter0%5B%5D=regional', 'title' => t('Regional Conference'), '#site' => 'groups'),
        'drupalcon' => array('href' => 'events?filter0%5B%5D=drupalcon', 'title' => t('Drupalcon'), '#site' => 'groups'),
        'virtual'   => array('href' => 'events?filter0%5B%5D=virtual', 'title' => t('Virtual Meeting'), '#site' => 'groups'),
      );

    // Just on the main website.
    case 'druplicon':
      return array(
        'home'     => array('href' => '??', 'title' => t('Druplicon Home'), '#site' => 'main'),
        'about'    => array('href' => 'druplicon', 'title' => t('About Druplicon'), '#site' => 'main'),
        'download' => array('href' => 'node/9068', 'title' => t('Download Druplicon'), '#site' => 'main'),
        'other'    => array('href' => '??', 'title' => t('Other Druplicons'), '#site' => 'main'),
      );

    case 'dashboard':
      if (module_exists('dashboard')) {
        global $user;
        $links = module_invoke('dashboard', 'user_tabs');
        array_splice($links, -1, 0, array('dashboard-profile' => array(
          'title' => t('Profile'),
          'href' => 'user/'. $user->uid,
          'attributes' => array('class' => 'nav-tab'),
        )));
        foreach (array_keys($links) as $key) {
          $links[$key]['#site'] = 'main';
          if (isset($links[$key]['#href'])) {
            $links[$key]['#active'] = drupalorg_crosssite_menu_path('main', '^' . $links[$key]['#href'] . '($|/)');
          }
        }
        return $links;
      }
  }
}

// == API functions ============================================================

/**
 * Which site is which URL?
 *
 * We have multiple keys for different functionality, so in case we need to
 * break these out, we can quickly swap these URLs and be done with updating
 * the navigation by deploying the new version of this module across all
 * subsites.
 */
function drupalorg_crosssite_menu_sites() {
  $base_domain = variable_get('drupalorg_base_domain', 'drupal.org');
  return array(
    'docs'        => $base_domain,
    'main'        => $base_domain,
    'project'     => $base_domain,
    'api'         => 'api.' . $base_domain,
    'association' => 'association.' . $base_domain,
    'groups'      => 'groups.' . $base_domain,
    'localize'    => 'localize' . $base_domain,
  );
}

/**
 * Check whether we are on the specified site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @return
 *   TRUE if on the site specified by $site_key.
 */
function drupalorg_crosssite_menu_site($site_key) {
  static $site = NULL;
  static $sites = NULL;
  if (!isset($site)) {
    $site = variable_get('drupalorg_site', 'main');
    $sites = drupalorg_crosssite_menu_sites();
  }

  return isset($sites[$site_key]) && isset($sites[$site]) && ($site_key == $site);
}

/**
 * Check whether we are viewing any of the specified node types on the given site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @param $node_types
 *   An array of possible node types to check for.
 * @return
 *   TRUE if on the site specified by $site_key, looking at a node of any of the
 *   types specified in $node_types.
 */
function drupalorg_crosssite_menu_type($site_key, $node_types) {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if (drupalorg_crosssite_menu_site($site_key) && ($node = menu_get_object())) {
    return in_array($node->type, $node_types);
  }
}

/**
 * Check whether we are viewing any of the specified paths on the given site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @param $path_regex
 *   A Per regular expression to match against the current path.
 * @return
 *   TRUE if on the site specified by $site_key, looking at a path matching
 *   $path_regex.
 * @todo
 *   Investigate path alias matching. This will probably be broken a bit in
 *   that regard for now.
 */
function drupalorg_crosssite_menu_path($site_key, $path_regex = '') {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if (drupalorg_crosssite_menu_site($site_key)) {
    if (empty($path_regex)) {
      // We need to match the front page.
      return (empty($_GET['q']));
    }
    else {
      // Use the full preg_match.
      return preg_match('#'. $path_regex .'#', $_GET['q']);
    }
  }
}

/**
 * Make sure outside links are absolute and add "active" classes as required.
 *
 * @param $links
 *   List of links array as expected by theme('links') with #site and
 *   #active keys for the individual links to specify which site to point
 *   the link to and whether the item is active.
 *
 *    - For possible #site values, @see drupalorg_crosssite_menu_sites().
 *    - #active can be built with @see drupalorg_crosssite_menu_path(),
 *      @see drupalorg_crosssite_menu_site() and
 *      @see drupalorg_crosssite_menu_type() (as well as possibly
 *      @see user_access() and friends, if you made sure the link will be
 *      local, so you can do local access checks against it).
 *
 * @return
 *   The modified link array.
 */
function drupalorg_crosssite_menu_absolute_links($links) {
  static $sites = NULL;
  if (!isset($sites)) {
    $sites = drupalorg_crosssite_menu_sites();
  }

  $activated_links = array();
  foreach ($links as $key => $link) {
    // If we are not on the given site, convert the link to an absolute link
    // to the given site.
    if (isset($link['#site']) && !drupalorg_crosssite_menu_site($link['#site'])) {
      $link['href'] = 'http://'. $sites[$link['#site']] .'/'. $link['href'];
    }
    // Otherwise, it might be an active link still, so add on the active class,
    // if we know #active was defined TRUE.
    elseif (!empty($link['#active'])) {
      // theme('link') uses the key as class, so add active class that way.
      $key = $key .' active';
    }
    // Add a tab class for styling.
    if (isset($link['attributes']['class'])) {
      $link['attributes']['class'] .= ' nav-tab';
    }
    else {
      $link['attributes']['class'] = 'nav-tab';
    }
    $activated_links[$key] = $link;
  }
  return $activated_links;
}
