<?php
// $Id$

/**
 * @file
 *   Cross-site functionality for Drupal.org subsites, which should be enabled
 *   on more subsites.
 */

/**
 * The TID of the "Modules" term.
 */
define('DRUPALORG_MODULE_TID', 14);

/**
 * The TID of the "Themes" term.
 */
define('DRUPALORG_THEME_TID', 15);

// == Core hooks ===============================================================

/**
 * Implementation of hook_preprocess_page().
 *
 * Add header, footer and content menu data to the page variables.
 */
function drupalorg_crosssite_preprocess_page(&$vars, $hook) {
  global $user;

  // Site hostnames for the sites we use.
  $sites = drupalorg_crosssite_menu_sites();

  // == Build the header navigation

  // Hardcoded list of menu items. These are not supposed to have any indication
  // of the active item, since the page title and submenus have that indication.
  // Also, we should not let people edit these, since they should be standard
  // among all the subsites. So this is why they are here.
  $nav_header_links = array(
    'getting-started' => array('href' => 'getting-started/before', 'title' => t('Get Started'), '#site' => 'main'),
    'forum'           => array('href' => 'community',              'title' => t('Community & Support'), '#site' => 'main'),
    'handbooks'       => array('href' => 'handbook',               'title' => t('Documentation'), '#site' => 'main'),
    'project'         => array('href' => 'download',               'title' => t('Download & Extend'), '#site' => 'main'),
    'marketplace'     => array('href' => 'services',               'title' => t('Marketplace'), '#site' => 'main'),
    'about'           => array('href' => 'about',                  'title' => t('About'), '#site' => 'main'),
  );
  if (variable_get('drupalorg_crosssite_redesign', FALSE)) {
    $nav_header_links['getting-started']['href'] = 'start';
  }
  // Make all external links right.
  $nav_header_links = drupalorg_crosssite_menu_absolute_links($nav_header_links);
  // Theme as links, and avoid class="links" on it.
  $vars['nav_header'] = theme('links', $nav_header_links, array());

  // == Build the footer navigation

  $nav_footer_links = array(
    array(
      'news'        => array('href' => 'news', 'title' => t('Drupal News'), '#site' => 'main'),
      'planet'      => array('href' => 'planet', 'title' => t('Planet Drupal'), '#site' => 'main'),
      'association' => array('href' => '', 'title' => t('Association'), '#site' => 'association'),
      'jobs'        => array('href' => 'jobs', 'title' => t('Jobs'), '#site' => 'groups'),
    ),
    array(
      'getting-started' => array('href' => 'start', 'title' => t('Get Started'), '#site' => 'main'),
      'download-core'   => array('href' => 'node/3060', 'title' => t('Downloading Drupal'), '#site' => 'main'),
      'get-involved'    => array('href' => 'getting-involved', 'title' => t('Get Involved'), '#site' => 'main'),
    ),
    array(
      'download'          => array('href' => 'download', 'title' => t('Download & Extend'), '#site' => 'main'),
      'download-core'     => array('href' => 'node/3060', 'title' => t('Drupal Core'), '#site' => 'main'),
      'download-modules'  => array('href' => 'project/modules', 'title' => t('Modules'), '#site' => 'main'),
      'download-themes'   => array('href' => 'project/themes', 'title' => t('Themes'), '#site' => 'main'),
      'download-profiles' => array('href' => 'project/installation+profiles', 'title' => t('Installation Profiles'), '#site' => 'main'),
    ),
    array(
      'events'      => array('href' => 'events', 'title' => t('Events'), '#site' => 'groups'),
      'drupalcon'   => array('href' => 'events?filter0%5B%5D=drupalcon', 'title' => t('Drupalcon'), '#site' => 'groups'),
      'groups-join' => array('href' => '', 'title' => t('Join a Local Group'), '#site' => 'groups'),
      'training'    => array('href' => 'events?filter0%5B%5D=training', 'title' => t('Training'), '#site' => 'groups'),
      'druplicon'   => array('href' => 'druplicon', 'title' => t('Druplicon'), '#site' => 'main'),
    ),
    array(
      'advertise' => array('href' => 'advertising', 'title' => t('Advertise'), '#site' => 'association'),
      'security'  => array('href' => 'security', 'title' => t('Security Announcements'), '#site' => 'main'),
    ),
  );

  $vars['nav_footer'] = '';
  foreach ($nav_footer_links as $num => $links_column) {
    // Make all external links right.
    $links_column = drupalorg_crosssite_menu_absolute_links($links_column);

    // Add alpha and omega class to first and last item.
    $alpha_omega = '';
    if ($num == 0) {
      $alpha_omega = ' alpha';
    }
    else if ($num == count($nav_footer_links) - 1) {
      $alpha_omega = ' omega';
    }

    // Theme as links, and avoid class="links" on it.
    $vars['nav_footer'] .= '<div class="grid-footer'. $alpha_omega .'">'. theme('links', $links_column, array()) .'</div>';
  }

  // Add content header navigation.
  drupalorg_crosssite_content_menu($vars);

  // Add page tool navigation.
  $page_tools = module_invoke_all('drupalorg_crosssite_page_tools');
  if (count($page_tools) > 0) {
    $vars['page_tools'] = theme('links', $page_tools);
  }

  // == Nav masthead links

  $nav_masthead_links = array(
    'homepage'       => array('href' => '',      'title' => t('Drupal Homepage'),  '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^(home|)/?$')),
    'dashboard'      => array('href' => 'user/' . $user->uid . '/dashboard', 'title' => t('Your Dashboard'),   '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^user/[0-9]+/dashboard(/|$)')),
  );
  if (!variable_get('drupalorg_crosssite_redesign', FALSE)) {
    unset($nav_masthead_links['dashboard']);
  }
  $userinfo = '';
  if ($user->uid == 0) {
    unset($nav_masthead_links['dashboard']);
    $nav_masthead_links['login-register'] = array('href' => 'user', 'query' => drupal_get_destination(), 'title' => t('Login / Register'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^user(/|$)'));
  }
  else {
    // Add user page link and logout link.
    $userinfo = '<div id="userinfo">'. l(t('Logged in as @username', array('@username' => $user->name)), 'user') .' '. l(t('Logout'), 'logout');
    if (variable_get('drupalorg_crosssite_redesign', FALSE)) {
      $userinfo = '<div id="userinfo">'. l(t('Logged in as @username', array('@username' => $user->name)), 'http://' . $sites['main'] . '/user') .' '. l(t('Logout'), 'http://' . $sites['main'] . '/logout');
    }

    if (user_access('administer site configuration')) {
      $userinfo .= ' ' . l(t('Admin'), 'admin');
    }

    $userinfo .= '</div>';
  }
  // Make all external links right.
  $nav_masthead_links = drupalorg_crosssite_menu_absolute_links($nav_masthead_links);
  // Theme as links, and avoid class="links" on it.
  $vars['nav_masthead'] = theme('links', $nav_masthead_links, array()) . $userinfo;

  // Put in a body class for CSS hooking and a variable for theme dependence
  // if we are on the main site's home page. Many things should be different
  // there.
  if (drupalorg_crosssite_menu_site('main') && drupal_is_front_page()) {
    $vars['body_classes'] .= ' drupalorg-front';
    $vars['is_drupalorg_front'] = TRUE;
  }
}

/**
 * Content for the content top menu.
 *
 * We implement this as "custom menus", since we need to have cross-site menu
 * items in some cases, and having these sycned across all subsites would be
 * painful (read: menu items would have different URLs and menu ids on subsites,
 * since an API link on the docs site would link out to API while a docs link
 * on the API would link out to the docs site).
 */
function drupalorg_crosssite_content_menu(&$vars) {
  global $user;

  // Specify the high level matching criteria for each menu and let others put
  // in more menus.
  $nav_content_areas = array(
    'downloads'     => drupalorg_crosssite_menu_path('main', '^(project|download)(/|$)') || drupalorg_crosssite_menu_type('main', array('project_project', 'project_issue', 'project_release')),
    // Events appear at here and as an individual tab list. Commented out from here.
    'community'     => drupalorg_crosssite_menu_path('main', '^(irc|mailing-lists|profile|forum|community)(/|$)'), // || drupalorg_crosssite_menu_path('groups', '^events'),
    'documentation' => drupalorg_crosssite_menu_site('api') || drupalorg_crosssite_menu_type('main', array('book')) || drupalorg_crosssite_menu_path('main', '^(documentation|handbook)(/|$)'),
    'jobs'          => drupalorg_crosssite_menu_path('groups', '^(jobs)(/|$)'),
    'association'   => drupalorg_crosssite_menu_site('association'),
    'events'        => drupalorg_crosssite_menu_path('groups', '^events(/|$)'),
    'druplicon'     => drupalorg_crosssite_menu_path('main', '^(node/9068|druplicon)(/|$)'),
    'dashboard'     => drupalorg_crosssite_menu_path('main', '^user/'. $user->uid .'(/|$)'),
    'localize'      => drupalorg_crosssite_menu_site('localize'),
  );

  // Theoretically, the matching criteria made one of the areas win (have TRUE as
  // the array value). If there are two menus to display on the same path, we
  // are in trouble, since we only have one menu displayed per path. Fix the above
  // matching in that case. (This will pick the first matched in that case).
  $matched_menu = array_search(TRUE, $nav_content_areas);

  //Identify sections names/titles to be displayed above content area menus
  $section_names = array(
    'downloads' => 'Download &amp; Extend',
    'documentation' => 'Documentation',
    'community' => 'Community &amp; Support',
    'dashboard' => check_plain($user->name),
    'localize' => 'Localize',
    'association' => 'Association',
  );
  //set the section_name variable to be output in page.tpl.php
  if (isset($section_names[$matched_menu])) {
    $vars['section_name'] = $section_names[$matched_menu];
  }

  // Now ask for all the menu items for the matched menu. Let modules add in
  // menu items (eg. in case of dashboard module adding items we don't know about).
  $nav_content_links = module_invoke_all('drupalorg_crosssite_content_menu_items', $matched_menu);

  if (count($nav_content_links)) {
    // Make all external links right.

    $nav_content_links = drupalorg_crosssite_menu_absolute_links($nav_content_links);

    //check the links to see if it is an active link
    foreach ($nav_content_links as $key => $link) {
      $class = $key;
      if ($link['href'] === '<front>') {
        $link['href'] = variable_get('site_frontpage', 'node');
      }
      $item = menu_get_item();
      $parts = explode('/', $item['tab_root']);
      $args = arg();
      foreach ($parts as $index => $part) {
        if ($part == '%') {
          $parts[$index] = $args[$index];
        }
      }
      $tab_root_href = implode('/', $parts);
      if (isset($link['href']) && ($link['href'] === $tab_root_href) && (empty($link['language']) || $link['language']->language == $language->language)) {
        // This is an active link/tab, therefore we don't want to display the
        // page title. Used in page.tpl.php. 
        $vars['matched_content_link'] = TRUE;
      }
    }

    // Theme the links for the page.
    $vars['nav_content'] = theme('links', $nav_content_links);
    $vars['nav_content_class'] = ' class="nav-content-'. $matched_menu .'"';
    return;
  }

  // Else just return an empty content nav menu.
  $vars['nav_content'] = $vars['nav_content_class'] = '';
}

/**
 * Implementation of hook_drupalorg_crosssite_content_menu_items().
 *
 * Return a list of menu items for the given menu with metadata on their
 * associated site and whether they are active at the moment.
 */
function drupalorg_crosssite_drupalorg_crosssite_content_menu_items($matched_menu) {
  switch ($matched_menu) {

    // REAL cross-site.
    case 'documentation':
      return array(
        'home'    => array('href' => 'handbook', 'title' => t('Docs Home'), '#site' => 'main', '#active' => (drupalorg_crosssite_menu_type('main', array('book')) || drupalorg_crosssite_menu_path('main', '^(documentation|handbook)(/|$)')) && !drupalorg_crosssite_menu_path('main', '^(node/23192|handbook/updates)(/|$)')),
        'api'     => array('href' => '<front>', 'title' => t('API'), '#site' => 'api', '#active' => drupalorg_crosssite_menu_site('api')),
        'recent'  => array('href' => 'handbook/updates', 'title' => t('Recently Updated'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^(node/23192|handbook/updates)(/|$)')),
      );

    case 'downloads':
      return array(
        // All are exact paths and so theme('links') will make them gain active
        // classes when on the projects site. Therefore no need for #active.
        'home'         => array('href' => 'download', 'title' => t('Download & Extend Home'), '#site' => 'main'),
        'core'         => array('href' => 'node/3060', 'title' => t('Drupal Core'), '#site' => 'main'),
        'modules'      => array('href' => 'project/modules', 'title' => t('Modules'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_term('main', array(DRUPALORG_MODULE_TID))),
        'themes'       => array('href' => 'project/themes', 'title' => t('Themes'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_term('main', array(DRUPALORG_THEME_TID))),
        'translations' => array('href' => 'project/translations', 'title' => t('Translations'), '#site' => 'main'),
        'theme-engine' => array('href' => 'project/theme+engines', 'title' => t('Theme Engines'), '#site' => 'main'),
        'install-profiles' => array('href' => 'project/installation+profiles', 'title' => t('Installation Profiles'), '#site' => 'main'),
      );

    // REAL cross-site.
    case 'community':
      return array(
        'home'          => array('href' => 'community', 'title' => t('Community Home'), '#site' => 'main'),
        'local-groups'  => array('href' => '??', 'title' => t('Local Groups'), '#site' => 'groups'),
        'online-groups' => array('href' => '??', 'title' => t('Online Groups'), '#site' => 'groups'),
        'chat'          => array('href' => 'irc', 'title' => t('Chat'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^irc(/|$)')),
        'lists'         => array('href' => 'mailing-lists', 'title' => t('Mailing Lists'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^mailing-lists(/|$)')),
        'members'       => array('href' => 'profile', 'title' => t('Member Directory'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^profile(/|$)')),
        'forum'         => array('href' => 'forum', 'title' => t('Forum'), '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^forum(/|$)') || drupalorg_crosssite_menu_type('main', array('forum'))),
      );

    // Just on the jobs site. Will need dynamic listing based on numbers.
    case 'jobs':
      return array(
        'latest'     => array('href' => 'jobs', 'title' => t('Latest'), '#site' => 'groups'),
        'developers' => array('href' => '??', 'title' => t('Developers (#)'), '#site' => 'groups'),
        'designers'  => array('href' => '??', 'title' => t('Designers (#)'), '#site' => 'groups'),
        'writers'    => array('href' => '??', 'title' => t('Writers (#)'), '#site' => 'groups'),
      );

    // Just on the association site.
    case 'association':
      return array(
        'home'       => array('href' => '<front>', 'title' => t('Association Home'), '#site' => 'association'),
        'blogs'      => array('href' => 'blogs', 'title' => t('Blogs'), '#site' => 'association'),
        'about'      => array('href' => 'about', 'title' => t('About'), '#site' => 'association'),
        'donate'     => array('href' => 'civicrm/contribute/transact?reset=1&id=8', 'title' => t('Donate'), '#site' => 'association'),
        'membership' => array('href' => 'membership', 'title' => t('Memberships'), '#site' => 'association'),
        'press'      => array('href' => 'press', 'title' => t('Press'), '#site' => 'association'),
        'faq'        => array('href' => 'faq', 'title' => t('FAQ'), '#site' => 'association'),
        'staff'      => array('href' => 'about/staff', 'title' => t('Staff'), '#site' => 'association'),
        'contact'    => array('href' => 'contact', 'title' => t('Contact'), '#site' => 'association'),
      );

    // Just on the events site. Could possibly do the same dynamic
    // stuff as jobs for consistency (counting number of events).
    case 'events':
      return array(
        'latest'    => array('href' => 'events', 'title' => t('Latest'), '#site' => 'groups'),
        'local'     => array('href' => 'events?filter0%5B%5D=usergroup', 'title' => t('Local Group Meeting'), '#site' => 'groups'),
        'training'  => array('href' => 'events?filter0%5B%5D=training', 'title' => t('Training'), 'site' => '#groups'),
        'regional'  => array('href' => 'events?filter0%5B%5D=regional', 'title' => t('Regional Conference'), '#site' => 'groups'),
        'drupalcon' => array('href' => 'events?filter0%5B%5D=drupalcon', 'title' => t('Drupalcon'), '#site' => 'groups'),
        'virtual'   => array('href' => 'events?filter0%5B%5D=virtual', 'title' => t('Virtual Meeting'), '#site' => 'groups'),
      );

    // Just on the main website.
    case 'druplicon':
      return array(
        'home'     => array('href' => '??', 'title' => t('Druplicon Home'), '#site' => 'main'),
        'about'    => array('href' => 'druplicon', 'title' => t('About Druplicon'), '#site' => 'main'),
        'download' => array('href' => 'node/9068', 'title' => t('Download Druplicon'), '#site' => 'main'),
        'other'    => array('href' => '??', 'title' => t('Other Druplicons'), '#site' => 'main'),
      );

    // Just on the localization site.
    case 'localize':
      return array(
        // All are exact paths and so theme('links') will make them gain active
        // classes when on the localize site. Therefore no need for #active.
        'home'         => array('href' => '<front>', 'title' => t('Translations Home'), '#site' => 'localize'),
        'languages'    => array('href' => 'translate/languages', 'title' => t('Languages'), '#site' => 'localize'),
        'projects'     => array('href' => 'translate/projects', 'title' => t('Projects'), '#site' => 'localize'),
        'download'     => array('href' => 'download', 'title' => t('Download'), '#site' => 'localize', '#active' => drupalorg_crosssite_menu_path('localize', '^download$')),
        'news'         => array('href' => 'news', 'title' => t('News'), '#site' => 'localize', '#active' => drupalorg_crosssite_menu_path('localize', '^news$')),
        'faq'          => array('href' => 'faq', 'title' => t('FAQ'), '#site' => 'localize', '#active' => drupalorg_crosssite_menu_path('localize', '^faq$')),
      );

    case 'dashboard':
      global $user;
      return array(
        'your-dashboard' => array('title' => t('Dashboard'), 'href' => 'user/' . $user->uid . '/dashboard', '#site' => 'main'),
        'your-posts' => array('title' => t('Your Posts'), 'href' => 'user/' . $user->uid . '/track', '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^user/' . $user->uid . '/track')),
        'your-groups' => array('title' => t('Your Groups'), 'href' => 'unread', '#site' => 'groups'),
        'your-profile' => array('title' => t('Profile'), 'href' => 'user/'. $user->uid, '#site' => 'main', '#active' => drupalorg_crosssite_menu_path('main', '^user/' . $user->uid . '(?!/(dashboard|track))')),
      );
  }
}

// == API functions ============================================================

/**
 * Which site is which URL?
 *
 * We have multiple keys for different functionality, so in case we need to
 * break these out, we can quickly swap these URLs and be done with updating
 * the navigation by deploying the new version of this module across all
 * subsites.
 */
function drupalorg_crosssite_menu_sites() {
  $base_domain = variable_get('drupalorg_base_domain', 'drupal.org');
  return array(
    'main'        => $base_domain,
    'api'         => 'api.' . $base_domain,
    'association' => 'association.' . $base_domain,
    'groups'      => 'groups.' . $base_domain,
    'localize'    => 'localize.' . $base_domain,
  );
}

/**
 * Check whether we are on the specified site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @return
 *   TRUE if on the site specified by $site_key.
 */
function drupalorg_crosssite_menu_site($site_key) {
  static $site = NULL;
  static $sites = NULL;
  if (!isset($site)) {
    $site = variable_get('drupalorg_site', 'main');
    $sites = drupalorg_crosssite_menu_sites();
  }

  return isset($sites[$site_key]) && isset($sites[$site]) && ($site_key == $site);
}

/**
 * Check whether we are viewing any of the specified node types on the given site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @param $node_types
 *   An array of possible node types to check for.
 * @return
 *   TRUE if on the site specified by $site_key, looking at a node of any of the
 *   types specified in $node_types.
 */
function drupalorg_crosssite_menu_type($site_key, $node_types) {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if (drupalorg_crosssite_menu_site($site_key) && ($node = menu_get_object())) {
    return in_array($node->type, $node_types);
  }
}

/**
 * Check whether we are viewing any of the specified node terms on the given site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @param $node_tids
 *   An array of possible node term IDs to check for.
 * @return
 *   TRUE if on the site specified by $site_key, looking at a node of any of the
 *   term IDs specified in $node_tids.
 */
function drupalorg_crosssite_menu_term($site_key, $node_tids) {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if (drupalorg_crosssite_menu_site($site_key) && ($node = menu_get_object())) {
    return count(array_intersect(array_keys($node->taxonomy), $node_tids)) > 0;
  }
}

/**
 * Check whether we are viewing any of the specified paths on the given site.
 *
 * @param $site_key
 *   One of the sitekeys as defined in drupalorg_crosssite_menu_sites().
 * @param $path_regex
 *   A Per regular expression to match against the current path.
 * @return
 *   TRUE if on the site specified by $site_key, looking at a path matching
 *   $path_regex.
 */
function drupalorg_crosssite_menu_path($site_key, $path_regex = '') {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if (drupalorg_crosssite_menu_site($site_key)) {
    if (empty($path_regex)) {
      // We need to match the front page.
      return (empty($_GET['q']));
    }
    else {
      // Use the full preg_match.
      return preg_match('#'. $path_regex .'#', drupal_get_path_alias($_GET['q']));
    }
  }
}

/**
 * Make sure outside links are absolute and add "active" classes as required.
 *
 * @param $links
 *   List of links array as expected by theme('links') with #site and
 *   #active keys for the individual links to specify which site to point
 *   the link to and whether the item is active.
 *
 *    - For possible #site values, @see drupalorg_crosssite_menu_sites().
 *    - #active can be built with @see drupalorg_crosssite_menu_path(),
 *      @see drupalorg_crosssite_menu_site() and
 *      @see drupalorg_crosssite_menu_type() (as well as possibly
 *      @see user_access() and friends, if you made sure the link will be
 *      local, so you can do local access checks against it).
 *
 * @return
 *   The modified link array.
 */
function drupalorg_crosssite_menu_absolute_links($links) {
  static $sites = NULL;
  if (!isset($sites)) {
    $sites = drupalorg_crosssite_menu_sites();
  }

  $activated_links = array();
  foreach ($links as $key => $link) {
    // If we are not on the given site, convert the link to an absolute link
    // to the given site.
    if (isset($link['#site']) && !drupalorg_crosssite_menu_site($link['#site'])) {
      $link['href'] = 'http://'. $sites[$link['#site']] .'/'. ($link['href'] == '<front>' ? '' : $link['href']);
    }
    // Otherwise, it might be an active link still, so add on the active class,
    // if we know #active was defined TRUE.
    elseif (!empty($link['#active'])) {
      // theme('link') uses the key as class, so add active class that way.
      $key = $key .' active';
      $link['attributes']['class'] = 'active';
    }
    $activated_links[$key] = $link;
  }
  return $activated_links;
}

/**
 * Arrange local tasks for user pages.
 */
function drupalorg_crosssite_menu_alter(&$items) {
  if (isset($items['user/%user/dashboard'])) {
    $items['user/%user/dashboard']['type'] = MENU_NORMAL_ITEM;
  }
  if (isset($items['user/%user/track'])) {
    $items['user/%user/track']['type'] = MENU_NORMAL_ITEM;
  }
}

// == Search functions =========================================================

/**
 * Define Mark Boulton's "filter by..." entries.
 */
function drupalorg_crosssite_meta_types() {
  return array(
    // 'API' => t('API'),
    'module' => t('Modules'),
    'theme' => t('Themes'),
    'documentation' => t('Documentation'),
    'forum-issues' => t('Forums & Issues'),
    // 'marketplace' => t('Marketplace'),
  );
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Exclude the meta_type filter from faceting.
 */
function drupalorg_crosssite_apachesolr_modify_query(&$query, &$params) {
  // TODO: some pending improvements to Apachesolr may simplify this.
  foreach ($query->get_filters() as $filter) {
    if ($filter['#name'] == 'ss_meta_type') {
      $query->remove_filter($filter['#name'], $filter['#value']);
      $query->add_filter('{!tag=meta_type}' . $filter['#name'], $filter['#value']);
    }
  }
  if (isset($params['facet.field'])) {
    foreach ($params['facet.field'] as &$field) {
      if ($field == 'ss_meta_type') {
        $field = '{!ex=meta_type}' . $field;
      }
    }
  }
}

/**
 * Implementation of hook_apachesolr_update_index().
 *
 * This adds our specific facets to the Apachesolr search index.
 */
function drupalorg_crosssite_apachesolr_update_index(&$document, $node) {
  if ($type = drupalorg_crosssite_meta_type_traverse($node, drupalorg_crosssite_get_meta_type_rules())) {
    $document->ss_meta_type = $type;
  }
}

/**
 * Define rules, per site in the multi-site index, for what meta-types should be
 * applied to what type of content.
 */
function drupalorg_crosssite_get_meta_type_rules() {
  $site = variable_get('drupalorg_site', 'main');
  
  $rule_set = array();
  if ($site == 'main') {
    $rule_set = array(
      // Define the type of selector: in this case, type.
      'type' => array(
        // Define the type values that map to meta-types: in this case,
        // project_project, book, project_issue, and forum.
        'project_project' => array(
          // Define a sub-selector to only be run after matching on the primary
          // selector: in this case, taxonomy.
          'taxonomy' => array(
            // Define taxonomy term values and resultant meta types: in this
            // case after matching a type of project_project, an associated
            // tid of DRUPALORG_MODULE_TID maps to 'module' while an associated 
            // tid of DRUPALORG_THEME_TID maps to 'theme'.
            DRUPALORG_MODULE_TID => 'module',
            DRUPALORG_THEME_TID => 'theme',
          ), 
        ),
        'book' => 'documentation',
        'project_issue' => 'forum-issues',
        'forum' => 'forum-issues',
      ),
    );
  }
  return $rule_set;
}

/**
 * Recursively iterates through an array looking for type or taxonomy filters,
 * and attempting to match against values in the passed in array.
 * 
 * This function takes an array (set in the $conf array in settings.php) and
 * handles two conditionals: type and taxonomy. Type values match against the
 * node type and taxonomy values match against associated taxonomy terms. If a
 * node matches all the criteria, a string will be returned representing the
 * meta-type of the node for use by the apachesolr module.
 * 
 * @param object $node
 *   A fully-formed node object as passed from hook_apachesolr_update_index.
 * @param mixed $value
 *   An array initially respresents the order of operations and the
 *   resulting meta type value. Currently supported comparisons are type and
 *   taxonomy. In the final iteration of drupalorg_crosssite_meta_type_traverse,
 *   $value should be a string value rather than an array.
 *   @see drupalorg_crosssite_get_meta_type_rules for the 'main' site to see
 *   an example of $value.
 * 
 * @return mixed
 *   Returns NULL if no meta type is found for the particular node, otherwise,
 *   if a meta-type is found, a string representing that meta-type is returned.
 *   
 * @see drupalorg_crosssite_get_meta_type_rules
 */
function drupalorg_crosssite_meta_type_traverse(&$node, $value) {
  // If we've traversed to a point where we have a string value
  // simply return it.
  if (is_string($value)) {
    return $value;
  }
  // If we have a meta type based off of the node type, check that first.
  if (isset($value['type'])) {
    // If our node type has an associated meta-type (or further filtering)
    // recursively call this function to determine the meta-type.
    if (in_array($node->type, array_keys($value['type']))) {      
      return drupalorg_crosssite_meta_type_traverse($node, $value['type'][$node->type]);
    }
  }
  // If we have a meta-type based off of taxonomy, check that next.
  if (isset($value['taxonomy'])) {
    // If we have a taxonomy term that relates to a meta-type, determine all
    // matching terms in the node.
    if ($keys = array_intersect(array_keys($node->taxonomy), array_keys($value['taxonomy']))) {
      // We should only ever have 1 match (meta-type is singular), so do a
      // sanity check. If we do only have 1 term, recursively call this function
      // to determine the meta-type.
      if (count($keys) == 1) {
        $tid = array_pop($keys);
        return drupalorg_crosssite_meta_type_traverse($node, $value['taxonomy'][$tid]);
      }
    }
  }
}

/**
 * Implementation of hook_form_search_theme_form_alter().
 */
function drupalorg_crosssite_form_search_theme_form_alter(&$form, $form_state) {
  
  // If we already ran a query, remember those values in the header search bar.
  $meta_type = '';
  if (module_exists('apachesolr') && apachesolr_has_searched() && $query = apachesolr_current_query()) {
    // If a meta_type was specified to refine the search, save that.
    $filter = $query->get_filters('ss_meta_type');
    if (!empty($filter)) {
      $meta_type = $filter[0]['#value'];
    }
    // Default the search text to the value of the queried text.
    $form['search_theme_form']['#default_value'] = $query->get_keys();
  }

  $form['search_theme_form']['#title'] = t('Search Drupal.org');
  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refine your search'),
    '#collapsible' => !drupal_is_front_page(),
    '#collapsed' => !drupal_is_front_page(),
  );
  $form['advanced']['meta_type'] = array(
    '#type' => 'radios',
    '#options' => drupalorg_crosssite_meta_types(),
    '#default_value' => $meta_type,
  );
  $form['#submit'][] = 'drupalorg_crosssite_search_theme_form_submit';
}

function drupalorg_crosssite_search_theme_form_submit($form, &$form_state) {
  if (!is_array($form_state['redirect'])) {
    $form_state['redirect'] = array($form_state['redirect']);
  }
  if (!empty($form_state['values']['meta_type'])) {
    $form_state['redirect'][1]['filters'] = 'ss_meta_type:'. $form_state['values']['meta_type'];
  }
}
