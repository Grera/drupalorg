<?php

/**
 * @file
 *   Cross-site functionality for Drupal.org subsites, which should be enabled
 *   on more subsites.
 */

/**
 * The TID of the "Modules" term.
 */
define('DRUPALORG_MODULE_TID', 14);

/**
 * The TID of the "Themes" term.
 */
define('DRUPALORG_THEME_TID', 15);

/**
 * Implementation of hook_preprocess_page().
 *
 * Add header, footer and content menu data to the page variables.
 */
function drupalorg_crosssite_preprocess_page(&$vars, $hook) {
  global $user;

  // In most cases, the navigation elements should provide orientatiuon within
  // the site. Breadcrumbs are usually not necessary.
  if (arg(0) !== 'admin') {
    $vars['breadcrumb'] = '';
  }

  // Build the header navigation
  if (variable_get('drupalorg_site', 'main') === 'main') {
    $vars['site_name'] = 'Drupal'; // todo do not hardcode
  }
  $vars['drupalorg_logo_link'] = l($vars['site_name'], '', array('attributes' => array('title' => $vars['site_name'])));
  $vars['nav_header'] = theme('links', $vars['primary_links'], array());
  $nav_masthead_links = array(
    'homepage' => array('href' => '<front>', 'title' => t('@site Homepage', array('@site' => str_replace('Drupal ', '', $vars['site_name'])))),
  );
  if (!user_is_logged_in()) {
    $nav_masthead_links['login-register'] = array('href' => 'user', 'query' => drupal_get_destination(), 'title' => t('Log in / Register'), '#active' => drupalorg_crosssite_match_path('^user(/|$)'));
  }
  if (variable_get('drupalorg_site', 'main') === 'main') {
    if (user_is_logged_in()) {
      $nav_masthead_links['dashboard'] = array('href' => 'user/' . $user->uid . '/dashboard', 'title' => t('Your Dashboard'));
    }
  }
  else {
    $vars['nav_header'] = l(t('â—„ Go to Drupal.org'), 'http://drupal.org', array('attributes' => array('class' => 'home'))) . $vars['nav_header'];
  }
  $vars['nav_masthead'] = theme('links', drupalorg_crosssite_menu_absolute_links($nav_masthead_links), array());
  if (user_is_logged_in()) {
    // Add user page link and logout link.
    $vars['nav_masthead'] .= '<div id="userinfo">' . l(t('Logged in as @username', array('@username' => $user->name)), 'user', array('html' => TRUE, 'attributes' => array('title' => t('View & edit your user profile')))) . ' ' . l(t('Log out'), 'logout');
    if (user_access('access administration pages')) {
      $vars['nav_masthead'] .= ' ' . l(t('Admin'), 'admin');
    }
    $vars['nav_masthead'] .= '</div>';
  }

  // Build the footer navigation
  $nav_footer = drupalorg_crosssite_grid_elements(array_fill(0, 5, 'footer'));
  unset($nav_footer['#prefix']);
  unset($nav_footer['#suffix']);
  $nav_footer['column_1']['#value'] = theme('links', array(
    array('href' => 'http://drupal.org/news', 'title' => t('Drupal News')),
    array('href' => 'http://drupal.org/planet', 'title' => t('Planet Drupal'), 'attributes' => array('title' => t('News from Drupal community members'))),
    array('href' => 'https://association.drupal.org/news', 'title' => t('Association News'), 'attributes' => array('title' => t('News from association.drupal.org'))),
    array('href' => 'http://drupal.org/security', 'title' => t('Security Announcements'), 'attributes' => array('title' => t('Advisories from the security team'))),
    array('href' => 'http://groups.drupal.org/jobs', 'title' => t('Jobs'), 'attributes' => array('title' => t('Jobs posted on groups.drupal.org'))),
  ), array());
  $nav_footer['column_2']['#value'] = theme('links', array(
    array('href' => 'http://drupal.org/community', 'title' => t('Community')),
    array('href' => 'http://drupal.org/getting-involved', 'title' => t('Getting Involved'), 'attributes' => array('title' => t('Learn how to contribute to the Drupal project'))),
    array('title' => l(t('Services'), 'http://drupal.org/drupal-services', array('attributes' => array('title' => t('People and organizations offering Drupal services')))) . ', '
      . l(t('Training'), 'http://drupal.org/training-services', array('attributes' => array('title' => t('People and organizations offering Drupal training')))) . ' & '
      . l(t('Hosting'), 'http://drupal.org/hosting', array('attributes' => array('title' => t('Organizations offering Drupal hosting')))), 'html' => TRUE),
    array('href' => 'http://groups.drupal.org/groups', 'title' => t('Groups & Meetups'), 'attributes' => array('title' => t('groups.drupal.org'))),
    array('href' => 'http://drupal.org/drupalcon', 'title' => t('DrupalCon'), 'attributes' => array('title' => t('Upcoming and past DrupalCons'))),
  ), array());
  $nav_footer['column_3']['#value'] = theme('links', array(
    array('href' => 'http://drupal.org/start', 'title' => t('Get Started')),
    array('href' => 'http://drupal.org/documentation', 'title' => t('Documentation Home'), 'attributes' => array('title' => t('Guidebooks and documentation for working with Drupal'))),
    array('href' => 'http://drupal.org/documentation/install', 'title' => t('Installation Guide'), 'attributes' => array('title' => t('Guide for installing Drupal'))),
    array('href' => 'http://drupal.org/documentation/build', 'title' => t('Site Building Guide'), 'attributes' => array('title' => t('Guide for building and extending Drupal sites'))),
    array('href' => 'http://drupal.org/support', 'title' => t('Support'), 'attributes' => array('title' => t('Drupal support options'))),
    array('href' => 'http://api.drupal.org/', 'title' => t('api.drupal.org'), 'attributes' => array('title' => t('Drupal API Reference'))),
  ), array());
  $nav_footer['column_4']['#value'] = theme('links', array(
    array('href' => 'http://drupal.org/download', 'title' => t('Download & Extend')),
    array('href' => 'http://drupal.org/project/drupal', 'title' => t('Drupal Core'), 'attributes' => array('title' => t('Download the latest version of the Drupal software'))),
    array('href' => 'http://drupal.org/project/modules', 'title' => t('Modules'), 'attributes' => array('title' => t('Download add-on features and functionality'))),
    array('href' => 'http://drupal.org/project/themes', 'title' => t('Themes'), 'attributes' => array('title' => t('Download pre-designed styles for Drupal'))),
    array('href' => 'http://drupal.org/project/installation+profiles', 'title' => t('Installation Profiles'), 'attributes' => array('title' => t('Download a pre-packaged Drupal site'))),
  ), array());
  $nav_footer['column_5']['#value'] = theme('links', array(
    array('href' => 'http://drupal.org/about', 'title' => t('About')),
    array('href' => 'http://drupal.org/druplicon', 'title' => t('Druplicon'), 'attributes' => array('title' => t('Drupalâ€™s mascot'))),
    array('href' => 'https://association.drupal.org/about', 'title' => t('The Drupal Association'), 'attributes' => array('title' => t('About the Drupal Association'))),
    array('href' => 'https://association.drupal.org/advertising', 'title' => t('Advertise'), 'attributes' => array('title' => t('How to advertise on Drupal.org'))),
    array('href' => 'http://drupal.org/node/179723', 'title' => t('About Drupal.org'), 'attributes' => array('title' => t('About Drupal.org'))),
    array('href' => 'http://drupal.org/about/accessibility', 'title' => t('Web accessibility'), array('title' => t('Drupal Accessibility Statement'))),
  ), array());
  $vars['nav_footer'] = drupal_render($nav_footer);

  $nav_content_links = array();
  switch (drupalorg_crosssite_section()) {
    case 'documentation':
      $vars['section_name'] = 'Community Documentation';
      $nav_content_links = array(
        'home' => array('href' => 'node/26419', 'title' => t('Community Docs Home'), '#active' => (drupalorg_crosssite_is_type(array('book')) || drupalorg_crosssite_match_path('^(documentation|handbook)(/|$)')) && !drupalorg_crosssite_child_of('node/251019') && !drupalorg_crosssite_child_of('node/627152')),
        'install' => array('href' => 'node/251019', 'title' => t('Installation Guide'), '#active' => drupalorg_crosssite_child_of('node/251019')),
        'admin' => array('href' => 'node/627152', 'title' => t('Administration Guide'), '#active' => drupalorg_crosssite_child_of('node/627152')),
      );
      break;

    case 'downloads':
      $vars['section_name'] = 'Download &amp; Extend';
      $nav_content_links = array(
        'home' => array('href' => 'download', 'title' => t('Download & Extend Home')),
        'core' => array('href' => 'node/' . DRUPALORG_CORE_NID, 'title' => t('Drupal Core'), '#active' => drupalorg_crosssite_child_of('node/' . DRUPALORG_CORE_NID, $vars) || drupalorg_crosssite_child_of('project/drupal core', $vars)),
        'modules' => array('href' => 'project/modules', 'title' => t('Modules'), '#active' => drupalorg_crosssite_child_of('project/modules', $vars)),
        'themes' => array('href' => 'project/themes', 'title' => t('Themes'), '#active' => drupalorg_crosssite_child_of('project/themes', $vars) || drupalorg_crosssite_child_of('project/theme engines', $vars)),
        'install-profiles' => array('href' => 'project/installation+profiles', 'title' => t('Installation Profiles'), '#active' => drupalorg_crosssite_child_of('project/installation profiles', $vars)),
      );
      break;

    case 'community':
      $vars['section_name'] = 'Community';
      $nav_content_links = array(
        'home' => array('href' => 'community', 'title' => t('Community Home')),
        'getting-involved' => array('href' => 'getting-involved', 'title' => t('Getting Involved'), '#active' => drupalorg_crosssite_match_path('^(getting-involved|community-spotlight)(/|$)') || (drupalorg_crosssite_child_of('node/281873') && !drupalorg_crosssite_match_path('^irc(/|$)') && !drupalorg_crosssite_match_path('^mailing-lists(/|$)'))),
        'chat' => array('href' => 'irc', 'title' => t('Chat'), '#active' => drupalorg_crosssite_match_path('^irc(/|$)')),
        'lists' => array('href' => 'mailing-lists', 'title' => t('Mailing Lists'), '#active' => drupalorg_crosssite_match_path('^mailing-lists(/|$)')),
        'members' => array('href' => 'profile', 'title' => t('Member Directory'), '#active' => drupalorg_crosssite_match_path('^profile(/|$)'), '#title_match' => 'q'),
        'forum' => array('href' => 'forum', 'title' => t('Forum'), '#active' => drupalorg_crosssite_in_breadcrumb('forum', $vars), '#title_match' => 'q'),
      );
      break;

    case 'dashboard':
      $vars['section_name'] = check_plain($user->name);
      $code_item = menu_get_item('user/' . $user->uid . '/track/code');
      $nav_content_links = array(
        'your-dashboard' => array('title' => t('Dashboard'), 'href' => 'user/' . $user->uid . '/dashboard'),
        'your-posts' => array('title' => t('Your Posts'), 'href' => 'user/' . $user->uid . '/track'),
        'commits' => array('title' => t('Your Commits'), 'href' => 'user/' . $user->uid . '/track/code', '#enabled' => $code_item['access']),
        'your-issues' => array('title' => t('Your Issues'), 'href' => 'project/issues/user'),
        'your-projects' => array('title' => t('Your Projects'), 'href' => 'project/user'),
        'your-profile' => array('title' => t('Profile'), 'href' => 'user/' . $user->uid, '#active' => drupalorg_crosssite_match_path('^user/' . $user->uid . '(?!/(dashboard|track))')),
      );
      break;

    case 'user':
      if (is_numeric(arg(1))) {
        $account = user_load(arg(1));
        $code_item = menu_get_item('user/' . $account->uid . '/track/code');
        $nav_content_links = array(
          'user-profile' => array('title' => t('Profile'), 'href' => 'user/' . $account->uid, '#active' => drupalorg_crosssite_match_path('^user/' . $account->uid . '(?!/(dashboard|track))')),
          'posts' => array('title' => t('Posts'), 'href' => 'user/' . $account->uid . '/track'),
          'commits' => array('title' => t('Commits'), 'href' => 'user/' . $account->uid . '/track/code', '#enabled' => $code_item['access']),
        );
      }
      break;

    case 'drupalorg':
      $vars['section_name'] = 'Drupal.org';
      $nav_content_links = array(
        // query may be removed with #910442 and/or #1019300.
        'home' => array('title' => t('Drupal.org Projects'), 'href' => 'project/drupal.org projects', 'query' => array('filters' => 'bs_project_sandbox:[* TO *]'), '#active' => drupalorg_crosssite_child_of('project/drupal.org projects', $vars) && !(drupalorg_crosssite_child_of('node/3202') || drupalorg_crosssite_child_of('node/18753') || drupalorg_crosssite_child_of('node/1025112') || drupalorg_crosssite_child_of('node/107028') || drupalorg_crosssite_child_of('node/651778'))),
        'drupalorg-faq' => array('title' => t('About Drupal.org'), 'href' => 'node/179723', '#active' => drupalorg_crosssite_child_of('node/179723')),
        'webmasters' => array('title' => t('Webmasters'), 'href' => 'node/3202', '#active' => drupalorg_crosssite_child_of('node/3202', $vars)),
        'documentation' => array('title' => t('Documentation'), 'href' => 'node/18753', '#active' => drupalorg_crosssite_child_of('node/18753', $vars)),
        'projectapplications' => array('title' => t('Project Applications'), 'href' => 'node/1025112', '#active' => drupalorg_crosssite_child_of('node/1025112', $vars)),
        'infrastructure' => array('title' => t('Infrastructure'), 'href' => 'node/107028', '#active' => drupalorg_crosssite_child_of('node/107028', $vars)),
        'theme' => array('title' => t('Theme'), 'href' => 'node/651778', '#active' => drupalorg_crosssite_child_of('node/651778', $vars)),
      );
      break;

    case 'marketplace':
      $vars['section_name'] = 'Marketplace';
      $nav_content_links = array(
        'services' => array('title' => t('Services'), 'href' => 'node/21791', '#active' => drupalorg_crosssite_child_of('drupal-services')),
        'hosting' => array('title' => t('Hosting'), 'href' => 'hosting', '#active' => drupalorg_crosssite_child_of('hosting')),
        'training' => array('title' => t('Training'), 'href' => 'node/313581', '#active' => drupalorg_crosssite_child_of('training-services')),
        'marketplace-preview' => array('title' => t('Marketplace preview'), 'href' => 'marketplace-preview', '#active' => drupalorg_crosssite_is_type(array('organization')) || drupalorg_crosssite_child_of('node/add/organization') || drupalorg_crosssite_match_path('^marketplace-preview')),
      );
      break;

    case 'security':
      $vars['section_name'] = 'Security advisories';
      $nav_content_links = array(
        'core' => array('title' => t('Drupal core'), 'href' => 'security', '#active' => drupalorg_crosssite_has_term(array(1852))),
        'contrib' => array('title' => t('Contributed projects'), 'href' => 'security/contrib', '#active' => drupalorg_crosssite_has_term(array(44))),
        'psa' => array('title' => t('Public service announcements'), 'href' => 'security/psa', '#active' => drupalorg_crosssite_has_term(array(1856))),
      );
      break;

    case 'bizconnect':
      $vars['section_name'] = 'Drupal BizConnect';
      $nav_content_links = array(
        'home' => array('title' => t('BizConnect Home'), 'href' => 'node/1064'),
        'getinvolved' => array('title' => t('Get Involved'), 'href' => 'node/1069'),
        'intheknow' => array('title' => t('In the Know'), 'href' => 'node/1074'),
        'sponsorships' => array('title' => t('Sponsorships'), 'href' => 'node/1079'),
        'leads' => array('title' => t('Advertise'), 'href' => 'node/1084'),
        'networking' => array('title' => t('Networking'), 'href' => 'node/1089'),
        'tools' => array('title' => t('Sales Tools'), 'href' => 'node/1094'),
      );
      break;

    case 'advertising':
      $vars['section_name'] = 'Drupal Association Media Kit';
      $nav_content_links = array(
        'home' => array('title' => t('Advertising Home'), 'href' => 'node/228'),
        'web' => array('title' => t('Web Advertising'), 'href' => 'node/1104'),
        'hosting' => array('title' => t('Hosting'), 'href' => 'node/1109'),
        'sponsorships' => array('title' => t('Sponsorships'), 'href' => 'node/1114'),
      );
      break;
  }

  $vars['nav_content'] = '';
  if (!empty($nav_content_links)) {
    // Make all external links right.
    $nav_content_links = drupalorg_crosssite_menu_absolute_links($nav_content_links);

    // Check the links to see if it is an active link. We want to know if the
    // tab root is the current page, replacing % with the used value. Example:
    // user/%/edit.
    $item = menu_get_item();
    $parts = explode('/', $item['tab_root']);
    $args = arg();
    foreach ($parts as $index => $part) {
      if ($part === '%') {
        $parts[$index] = $args[$index];
      }
    }
    $tab_root_href = implode('/', $parts);
    foreach ($nav_content_links as $key => $link) {
      // Disable if applicable
      if (isset($link['#enabled']) && !$link['#enabled']) {
        unset($nav_content_links[$key]);
        continue;
      }

      // Menu items which do not have placeholders for all their arguments will
      // have an inaccurate tab_root, so allow using $_REQUEST['q']. Example:
      // forum.
      $title_match = $tab_root_href;
      if (isset($link['#title_match']) && $link['#title_match'] === 'q') {
        $title_match = $_REQUEST['q'];
      }
      if (isset($link['href']) && ($link['href'] === $title_match) && (empty($link['language']) || $link['language']->language == $language->language)) {
        // This is an active link/tab, therefore we don't want to display the
        // page title. Used in page.tpl.php.
        $vars['matched_content_link'] = TRUE;
      }
    }

    // Theme the links for the page.
    $vars['nav_content'] = theme('links', $nav_content_links);
  }

  $vars['is_drupalorg_front'] = variable_get('drupalorg_site', 'main') === 'main' && drupal_is_front_page();

  $vars['body_classes'] .= ' drupalorg-site-' . variable_get('drupalorg_site', 'main');
}

/**
 * Specify the section matching criteria.
 */
function drupalorg_crosssite_section() {
  global $user, $conf;
  static $section = FALSE;

  if ($section === FALSE) {
    switch (variable_get('drupalorg_site', 'main')) {
      case 'association':
        if (drupalorg_crosssite_match_path('^bizconnect')) {
          $section = 'bizconnect';
        }
        elseif (drupalorg_crosssite_match_path('^advertising')) {
          $section = 'advertising';
        }
        break;

      case 'main':
        $node = menu_get_object();
        if (drupalorg_crosssite_match_path('^(user/' . $user->uid . '(/|$)|project(/issues)?/user$)')) {
          $section = 'dashboard';
        }
        elseif (drupalorg_crosssite_child_of('node/179723') || (drupalorg_crosssite_child_of('project/drupal.org projects') && !drupalorg_crosssite_child_of('node/' . DRUPALORG_CORE_NID))) {
          $section = 'drupalorg';
        }
        elseif (drupalorg_crosssite_match_path('^(project|download|list-changes|list-change-updates)(/|$)') || drupalorg_crosssite_match_path('^node/\d+/(release|committers|maintainers)') || drupalorg_crosssite_match_path('^node/add/project-issue') || drupalorg_crosssite_is_type(array('project_project', 'project_issue', 'project_release', 'changenotice'))) {
          $section = 'downloads';
        }
        elseif (drupalorg_crosssite_match_path('^security(|/contrib|/psa)$') || drupalorg_crosssite_has_term(array(1852, 44, 1856))) {
          $section = 'security';
        }
        elseif (drupalorg_crosssite_match_path('^(irc|mailing-lists|profile|community|getting-involved|community-spotlight)(/|$)') || drupalorg_crosssite_child_of('forum') || drupalorg_crosssite_is_type(array('forum')) || drupalorg_crosssite_child_of('node/281873')) {
          $section = 'community';
        }
        elseif (drupalorg_crosssite_child_of('node/366') || drupalorg_crosssite_is_type(array('organization')) || drupalorg_crosssite_child_of('node/add/organization') || drupalorg_crosssite_match_path('^(marketplace-preview|hosting)')) {
          $section = 'marketplace';
        }
        elseif (((isset($node) && isset($node->book['bid'])) || drupalorg_crosssite_match_path('^(handbook|documentation)')) && !(drupalorg_crosssite_child_of('node/1') || drupalorg_crosssite_child_of('node/909476'))) {
          $section = 'documentation';
        }
        elseif (drupalorg_crosssite_match_path('^user(/|$)')) {
          $section = 'user';
        }
        break;
    }

    if ($section === FALSE) {
      $section = NULL;
    }

    // Track section
    if (!empty($conf['googleanalytics_codesnippet_before'])) {
      $conf['googleanalytics_codesnippet_before'] .= "_gaq.push(['_setCustomVar', 2, 'Drupalorg-section', '" . $section . "', 3]);"; // 3 is page-level
    }
  }
  return $section;
}

function drupalorg_crosssite_child_of($path, &$vars = NULL) {
  return drupalorg_crosssite_match_path('^(' . $path . '|' . drupal_get_path_alias($path) . ')(/|$)') || drupalorg_crosssite_in_breadcrumb($path, $vars);
}

/**
 * Find a path in the breadcrumb. If found, return TRUE and set the shortened
 * breadcrumb.
 *
 * @param $path
 *   The path to search for, as used in the previously-set breadcrumb.
 * @param $path
 *   If you want to render part of the breadcrumbs, pass $vars.
 * @return
 *   TRUE if found, and modify $vars['breadcrumb'].
 */
function drupalorg_crosssite_in_breadcrumb($path, &$vars = NULL) {
  $url = url($path);
  foreach (drupal_get_breadcrumb() as $n => $breadcrumb) {
    if (strpos($breadcrumb, 'href="' . $url . '"') !== FALSE) {
      if (isset($vars)) {
        $vars['breadcrumb'] = theme('breadcrumb', array_slice(drupal_get_breadcrumb(), $n + 1));
      }
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Check whether we are viewing any of the specified node types on the given site.
 *
 * @param $node_types
 *   An array of possible node types to check for.
 * @return
 *   TRUE for node pages of any type specified in $node_types.
 */
function drupalorg_crosssite_is_type($node_types) {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if ($node = menu_get_object()) {
    return in_array($node->type, $node_types);
  }
}

/**
 * Check whether we are viewing any of the specified node terms on the given site.
 *
 * @param $node_tids
 *   An array of possible node term IDs to check for.
 * @return
 *   TRUE for node pages with term IDs specified in $node_tids.
 */
function drupalorg_crosssite_has_term($node_tids) {
  // menu_get_object() gets us the node, if we have a node loaded on the path.
  if ($node = menu_get_object()) {
    return count(array_intersect(array_keys($node->taxonomy), $node_tids)) > 0;
  }
}

/**
 * Check if the current path alias matches a regular expression.
 *
 * @param $path_regex
 *   A Perl regular expression.
 * @return
 *   TRUE if the aliased path matches $path_regex.
 */
function drupalorg_crosssite_match_path($path_regex) {
  return preg_match('#' . $path_regex . '#', drupal_get_path_alias($_GET['q']));
}

/**
 * Add "active" classes as required.
 *
 * @param $links
 *   List of links array as expected by theme('links') with an optional #active
 *   key for the individual links to make an item active. #active can be set
 *   with functions like drupalorg_crosssite_match_path() and
 *   drupalorg_crosssite_is_type().
 * @return
 *   The modified link array.
 */
function drupalorg_crosssite_menu_absolute_links($links) {
  $activated_links = array();
  foreach ($links as $key => $link) {
    if (!empty($link['#active'])) {
      // theme('link') uses the key as class, so add active class that way.
      $key = $key . ' active';
      $link['attributes']['class'] = 'active';
    }
    $activated_links[$key] = $link;
  }
  return $activated_links;
}

/**
 * Arrange local tasks for user pages.
 */
function drupalorg_crosssite_menu_alter(&$items) {
  if (isset($items['user/%user/dashboard'])) {
    $items['user/%user/dashboard']['type'] = MENU_CALLBACK;
  }
  if (isset($items['user/%user/track'])) {
    $items['user/%user/track']['type'] = MENU_CALLBACK;
  }
  if (isset($items['user/%user/track/code'])) {
    $items['user/%user/track/code']['type'] = MENU_CALLBACK;
  }
  // Modify the local tasks for search to hide the tabs.
  if (module_exists('search')) {
    foreach (module_implements('search') as $module) {
      if (isset($items['search/' . $module . '/%menu_tail'])) {
        $items['search/' . $module . '/%menu_tail']['type'] = MENU_CALLBACK;
      }
    }
  }
}

/**
 * Define Mark Boulton's "filter by..." entries.
 */
function drupalorg_crosssite_meta_types() {
  return array(
    // 'API' => t('API'),
    'module' => t('Modules'),
    'theme' => t('Themes'),
    'documentation' => t('Documentation'),
    'forum-issues' => t('Forums & Issues'),
    'group' => t('Groups'),
  );
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Exclude the meta_type filter from faceting.
 */
function drupalorg_crosssite_apachesolr_modify_query(&$query, &$params) {
  // TODO: some pending improvements to Apachesolr may simplify this.
  foreach ($query->get_filters() as $filter) {
    if ($filter['#name'] == 'ss_meta_type') {
      $query->remove_filter($filter['#name'], $filter['#value']);
      $query->add_filter('{!tag=meta_type}' . $filter['#name'], $filter['#value']);
    }
  }
  if (isset($params['facet.field'])) {
    foreach ($params['facet.field'] as &$field) {
      if ($field == 'ss_meta_type') {
        $field = '{!ex=meta_type}' . $field;
      }
    }
  }
}

/**
 * Implementation of hook_apachesolr_update_index().
 *
 * This adds our specific facets to the Apachesolr search index.
 */
function drupalorg_crosssite_apachesolr_update_index(&$document, $node) {
  if ($type = drupalorg_crosssite_meta_type_traverse($node, drupalorg_crosssite_get_meta_type_rules())) {
    $document->ss_meta_type = $type;
  }
}

/**
 * Implementation of hook_apachesolr_node_exclude().
 *
 * Excludes all nodes that are not publicly accessible to anonymous users. This
 * is done so that we can ensure that private content is not indexed and Solr
 * and potentially retrieved in an insecure fashion.
 */
function drupalorg_crosssite_apachesolr_node_exclude($node, $namespace) {
  static $account;

  if (!isset($account)) {
    // Load the anonymous user.
    $account = drupal_anonymous_user();
  }

  if (!node_access('view', $node, $account)) {
    // If the document isn't publicly accessible to everyone, don't index it.
    return TRUE;
  }
}

/**
 * Define rules, per site in the multi-site index, for what meta-types should be
 * applied to what type of content.
 */
function drupalorg_crosssite_get_meta_type_rules() {
  $site = variable_get('drupalorg_site', 'main');

  $rule_set = array();
  // For now, make these the rules for all sites, but can be sectioned off by
  // site using $site if needed.
  $rule_set = array(
    // Define the type of selector: in this case, type.
    'type' => array(
      // Define the type values that map to meta-types: in this case,
      // project_project, book, project_issue, and forum.
      'project_project' => array(
        // Define a sub-selector to only be run after matching on the primary
        // selector: in this case, taxonomy.
        'taxonomy' => array(
          // Define taxonomy term values and resultant meta types: in this
          // case after matching a type of project_project, an associated
          // tid of DRUPALORG_MODULE_TID maps to 'module' while an associated
          // tid of DRUPALORG_THEME_TID maps to 'theme'.
          DRUPALORG_MODULE_TID => 'module',
          DRUPALORG_THEME_TID => 'theme',
        ),
      ),
      'book' => 'documentation',
      'project_issue' => 'forum-issues',
      'forum' => 'forum-issues',
      'og' => 'group',
      // Map the session from chicago2011.drupal.org to the 'documentation' metatype
      'session' => 'documentation',
    ),
  );
  return $rule_set;
}

/**
 * Recursively iterates through an array looking for type or taxonomy filters,
 * and attempting to match against values in the passed in array.
 *
 * This function takes an array (set in the $conf array in settings.php) and
 * handles two conditionals: type and taxonomy. Type values match against the
 * node type and taxonomy values match against associated taxonomy terms. If a
 * node matches all the criteria, a string will be returned representing the
 * meta-type of the node for use by the apachesolr module.
 *
 * @param object $node
 *   A fully-formed node object as passed from hook_apachesolr_update_index.
 * @param mixed $value
 *   An array initially respresents the order of operations and the resulting
 *   meta type value. Currently supported comparisons are type and taxonomy. In
 *   the final iteration of drupalorg_crosssite_meta_type_traverse, $value
 *   should be a string value rather than an array. See
 *   drupalorg_crosssite_get_meta_type_rules for the 'main' site for an example
 *   of $value.
 *
 * @return mixed
 *   Returns NULL if no meta type is found for the particular node, otherwise,
 *   if a meta-type is found, a string representing that meta-type is returned.
 *
 * @see drupalorg_crosssite_get_meta_type_rules
 */
function drupalorg_crosssite_meta_type_traverse(&$node, $value) {
  // If we've traversed to a point where we have a string value
  // simply return it.
  if (is_string($value)) {
    return $value;
  }
  // If we have a meta type based off of the node type, check that first.
  if (isset($value['type'])) {
    // If our node type has an associated meta-type (or further filtering)
    // recursively call this function to determine the meta-type.
    if (in_array($node->type, array_keys($value['type']))) {
      return drupalorg_crosssite_meta_type_traverse($node, $value['type'][$node->type]);
    }
  }
  // If we have a meta-type based off of taxonomy, check that next.
  if (isset($value['taxonomy'])) {
    // If we have a taxonomy term that relates to a meta-type, determine all
    // matching terms in the node.
    if ($keys = array_intersect(array_keys($node->taxonomy), array_keys($value['taxonomy']))) {
      // We should only ever have 1 match (meta-type is singular), so do a
      // sanity check. If we do only have 1 term, recursively call this function
      // to determine the meta-type.
      if (count($keys) == 1) {
        $tid = array_pop($keys);
        return drupalorg_crosssite_meta_type_traverse($node, $value['taxonomy'][$tid]);
      }
    }
  }
}

/**
 * Implementation of hook_form_search_theme_form_alter().
 */
function drupalorg_crosssite_form_search_theme_form_alter(&$form, $form_state) {
  global $theme;
  if ($theme === 'bluecheese') {
    // If we already ran a query, remember those values in the header search bar.
    $meta_type = '';
    if (drupalorg_crosssite_apachesolr_has_searched() && $query = apachesolr_current_query()) {
      // If a meta_type was specified to refine the search, save that.
      $filter = $query->get_filters('ss_meta_type');
      if (!empty($filter)) {
        $meta_type = $filter[0]['#value'];
      }
      // Default the search text to the value of the queried text.
      $form['search_theme_form']['#default_value'] = $query->get_keys();
    }

    $form['search_theme_form']['#title'] = t('Search @site_name', array('@site_name' => variable_get('site_name', 'Drupal')));

    // Only show meta-types if searching on the main site.
    if (variable_get('drupalorg_site', 'main') === 'main') {
      $form['advanced'] = array(
        '#type' => 'fieldset',
        '#title' => t('Refine your search'),
        '#collapsible' => !drupal_is_front_page(),
        '#collapsed' => !drupal_is_front_page(),
      );
      $form['advanced']['meta_type'] = array(
        '#type' => 'radios',
        '#options' => array_merge(array('' => t('All')), drupalorg_crosssite_meta_types()),
        '#default_value' => $meta_type,
      );
    }

    $form['#submit'][] = 'drupalorg_crosssite_search_theme_form_submit';
  }
}

function drupalorg_crosssite_search_theme_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['meta_type'])) {
    if (!is_array($form_state['redirect'])) {
      $form_state['redirect'] = array($form_state['redirect']);
    }
    $form_state['redirect'][1]['filters'] = 'ss_meta_type:' . $form_state['values']['meta_type'];
  }
}

/**
 * Provide a single check for both multi-site searches and single-site searches
 * so that blocks that are agnostic about the type of search can still behave
 * as intended on the search pages.
 *
 * @return bool
 *   Returns TRUE if an apachesolr search has been run, regardless of whether it
 *   is a multisitesearch or a single site search. Returns FALSE otherwise.
 */
function drupalorg_crosssite_apachesolr_has_searched() {
  // If we have a single-site search for apachesolr, return TRUE.
  if (module_exists('apachesolr') && apachesolr_has_searched()) {
    return TRUE;
  }
  // If we are using apachesolr_multisitesearch and we have a multisitesearch,
  // then return TRUE.
  if (module_exists('apachesolr_multisitesearch') && apachesolr_multisitesearch_has_searched()) {
    return TRUE;
  }
  // In all other scenarios, return FALSE;
  return FALSE;
}

/**
 * Return an array tree suitable for drupal_render() and Bluecheese's grid
 * system.
 *
 * @param $columns
 *   An array of integers for column widths. Keep the sum 12 or under.
 *
 * @return
 *   An array tree for drupal_render().
 */
function drupalorg_crosssite_grid_elements(array $columns) {
  $content = array(
    '#prefix' => '<div class="clear-block"><div class="grid-' . array_sum($columns) . ' alpha omega">',
    '#suffix' => '</div></div>',
    '#sorted' => TRUE,
  );

  foreach ($columns as $n => $width) {
    $classes = array('grid-' . $width);
    if ($n === 0) {
      $classes[] = 'alpha';
    }
    elseif ($n === count($columns) - 1) {
      $classes[] = 'omega';
    }
    $content['column_' . ($n + 1)] = array(
      '#prefix' => '<div class="' . implode(' ', $classes) . '">',
      '#suffix' => '</div>',
      '#sorted' => TRUE,
      '#weight' => $n,
    );
  }

  return $content;
}

/**
 * Build an ad slot block. The note about ads is added via
 * drupalorg_crosssite_preprocess_block(). Enough is simulated to get that.
 *
 * @param $slot
 *   The ad manager slot name.
 * @param $md5_slot
 *   Ad manager likes using md5sums, if needed, keep true.
 */
function drupalorg_crosssite_ad_block($slot, $md5_slot = TRUE) {
  if ($md5_slot) {
    $slot = md5(trim($slot));
  }

  $block = (object) module_invoke('google_admanager', 'block', 'view', $slot);
  $block->region = 'right';
  $block->delta = $slot;
  $block->module = 'google_admanager';

  return theme('block', $block);
}

/**
 * Add notes to ads.
 */
function drupalorg_crosssite_preprocess_block(&$variables) {
  if ($variables['block']->module === 'google_admanager') {
    $variables['block']->content .= '<div class="gam-suffix"><a href="https://association.drupal.org/advertising">Advertising</a> helps build a successful ecosystem around Drupal.</div>';

    if ($variables['block']->delta === md5('Redesign_books')) {
      $variables['block']->content = '<div class="gam-prefix"><h3><a href="/books">Drupal Books</a></h3>
        <p>There are many useful books about Drupal. Here are just a few of our recommendations:</p></div>'
        . $variables['block']->content;
    }
    elseif ($variables['block']->delta === md5('Security_books')) {
      $variables['block']->content = '<div class="gam-prefix"><p>There are many useful <a href="/books">books about Drupal</a>. Here are two that discuss security:</p></div>'
        . $variables['block']->content;
    }
  }
}
