<?php
// $Id$

function handbook_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    $extra = '';
    switch ($node->nid) {
      case 43633: // Handbook pages with comments
        $extra = handbook_with_comments();
        break;
      case 43639: // Most popular handbooks
        $extra = handbook_most_popular();
        break;
      case 322: // Mailing list subscription
        $extra = drupal_get_form('lists_subscribe');
        break;
      case 318: // Coding standards, filtered for XSS
        $file = file_get_contents('/var/www/drupal.org/project/cvs/contrib-cvs/CODING_STANDARDS.html');
        $extra = filter_xss_admin($file);
        break;
      case 13355: // Site maintainers
        $extra = handbook_site_maintainers();
        break;
      case 109372: // Handbook maintainers
        $extra = handbook_maintainers();
        break;
      case 14205: // Book contributors
        $extra = handbook_book_contributors();
        break;
      case 263594: // Revision maintainers
        $extra = handbook_revision_maintainers();
        break;
      case 23192: // Recent updates
        $extra = handbook_recent_updates();
        break;
    }
    $node->content['body']['#value'] .= $extra;
  }
}

function handbook_with_comments() {
  $header = array(
    array('data' => 'Page'),
    array('data' => 'Comments', 'field' => 'comment_count', 'sort' => 'desc'),
    array('data' => 'Last comment', 'field' => 'last_comment_timestamp'),
  );

  $result = db_query("SELECT n.nid, n.title, s.comment_count, s.last_comment_timestamp FROM {node} n LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid WHERE n.type = 'book' AND s.comment_count > 1". tablesort_sql($header));

  while ($node = db_fetch_object($result)) {
    $rows[] = array(l($node->title, "node/$node->nid"), $node->comment_count, format_interval(time() - $node->last_comment_timestamp) .' ago');
  }

  return theme('table', $header, $rows);
}

function handbook_most_popular() {
  $header = array('Rank', 'Page', 'Visits today', 'Total visits');

  $result = db_query("SELECT n.nid, n.title, c.daycount, c.totalcount FROM {node} n INNER JOIN {node_counter} c ON n.nid = c.nid WHERE n.type = 'book' ORDER BY c.daycount DESC LIMIT 0, 100");
  while ($node = db_fetch_object($result)) {
    $rows[] = array(++$rank, l($node->title, "node/$node->nid"), $node->daycount, $node->totalcount);
  }

  return theme('table', $header, $rows);
}

function handbook_maintainers() {
  $output = '<p>If you are interested in helping maintain/update/correct the documentation on Drupal.org, read up on the <a href="http://drupal.org/node/24572">many ways to get involved</a>.</p>';
  $output .= '<p>Note: Many of our <a href="/site-maintainers">site maintainers</a> also participate on the documentation team and are not listed here. Due to their broader responsibilities on drupal.org, site maintainers are listed separately.</p>';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = 5 OR r.rid = 9 ORDER BY u.name "); // 3 = site maintainer, 4 = administrator 5 = document maintainer
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

function handbook_book_contributors() {
  $result = db_query("SELECT u.uid, u.name, COUNT(n.nid) AS pages FROM {node} n INNER JOIN {users} u ON n.uid = u.uid WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0 GROUP BY u.name ORDER BY pages DESC");
  $output .= "<ul>";
  while ($contributor = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $contributor) ." (". format_plural($contributor->pages, "1 page", "$contributor->pages pages") .")</li>";
  }
  $output .= "</ul>";
  return $output;
}

function handbook_site_maintainers() {
  $output = 'If you have been around for a while, and you want to help maintain Drupal.org and are willing to accept the added responsibilities that come with it, sign up on the <a href="http://drupal.org/mailing-lists">Infrastructure team</a> list.';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid WHERE r.rid = 3 OR r.rid = 4 OR r.rid = 9 ORDER BY u.name "); // 3 = site maintainer, 4 = administrator
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

function handbook_revision_maintainers() {
  if ($cache = cache_get('node_263594')) {
    return $cache->data;
  }

  $result = db_query("SELECT u.uid, u.name, COUNT(nr.vid) AS pages
    FROM {node} n INNER JOIN {node_revisions} nr ON n.nid = nr.nid INNER JOIN {users} u ON u.uid = n.uid WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0 GROUP BY u.name ORDER BY pages DESC");

  $list = array();
  while ($contributor = db_fetch_object($result)) {
    $list[] = theme('username', $contributor) ." (". format_plural($contributor->pages, "1 revision", "$contributor->pages revisions") .")";
  }

  $output = theme('item_list', $list);
  cache_set('node_263594', 'cache', $output, 300);
  return $output;
}

function handbook_recent_updates() {
  $result = db_query_range("SELECT n.nid, n.title, n.moderate, n.changed, r.log, u.uid, u.name
    FROM {node} n
    INNER JOIN {book} b ON n.vid = b.vid INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {users} u ON u.uid = r.uid
    ORDER BY n.changed DESC", 0, 50);

  while ($page = db_fetch_object($result)) {
    $rows[] = array(l($page->title, "node/$page->nid") .' '. theme('mark', node_mark($page->nid, $page->changed)) . ($page->log ? "<br />". check_plain($page->log) : ''), theme('username', $page), t('%time ago', array('%time' => format_interval(time() - $page->changed))), ($page->moderate == 1 ? 'no' : 'yes'));
  } 
  $header = array('Page', 'Edited', 'Updated', 'Approved');

  $output = theme('table', $header, $rows);
  return $output;
}
