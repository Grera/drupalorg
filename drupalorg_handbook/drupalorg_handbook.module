<?php
// $Id$

/**
 * @file
 *   Customizations and blocks for the handbook pages.
 */

/**
 * Taxonomy vid for the "Drupal versions" vocabulary.
 */
define('DRUPALORG_HANDBOOK_VERSION_VID', 5);

// == Core hooks ===============================================================

/**
 * Implementation of hook_nodeapi().
 */
function drupalorg_handbook_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    $extra = '';
    switch ($node->nid) {
      case 43633: // Handbook pages with comments
        $extra = drupalorg_handbook_with_comments();
        break;
      case 43639: // Most popular handbooks
        $extra = drupalorg_handbook_most_popular();
        break;
      case 322: // Mailing list subscription
        $extra = drupal_get_form('lists_subscribe_form');
        break;
      case 13355: // Site maintainers
        $extra = drupalorg_handbook_site_maintainers();
        break;
      case 109372: // Handbook maintainers
        $extra = drupalorg_handbook_maintainers();
        break;
      case 14205: // Book contributors
        $extra = drupalorg_handbook_book_contributors();
        break;
      case 263594: // Revision maintainers
        $extra = drupalorg_handbook_revision_maintainers();
        break;
      case 23192: // Recent updates
        $extra = drupalorg_handbook_display_recent_updates();
        break;
    }
    $node->content['body']['#value'] .= $extra;
    
    if (!empty($node->book['bid'])) {
      // Prepend the handbook meta data to book bodies.
      $node->content['body']['#value'] = drupalorg_handbook_meta_data($node) . $node->content['body']['#value'];
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_handbook_form_alter(&$form, $form_state, $form_id) {
  // Force a revision log entry when editing existing book nodes.
  if ($form_id == 'book_node_form' && isset($form['revision_information']['log']) && arg(1) != 'add') {
    $form['revision_information']['log']['#required'] = TRUE;
    $form['revision_information']['#collapsed'] = FALSE;

    // Remove the IA vocabs from handbooks other than the Theming Guide.
    if ($form['#node']->book['bid'] != 338057) {
      $form['taxonomy'][40]['#access'] = FALSE;
      $form['taxonomy']['tags'][42]['#access'] = FALSE;
    }
    else {
      // Add a note for the IA stuff.
      $form['taxonomy']['#description'] = t('The Theming guide has some additional vocabularies not found on other handbook pages,information type and subject matter, which are being used to assist our IA project. For more information on how to properly use these two vocabularies, please refer to the !guidelines.', array('!guidelines' => l('guidelines', 'node/548322')));
    }
  }
}

/**
 * Gather information for the top of handbook pages.
 *
 * @param $node
 *   The node object.
 * @return
 *   The HTML code for the book meta information.
 */
function drupalorg_handbook_meta_data($node) {
  if (count($node->taxonomy)) {
    // Group the terms by vid.
    $taxonomy = array();
    foreach ($node->taxonomy as $term_id => $term) {
      $taxonomy[$term->vid][] = $term;
    }

    if (count($taxonomy[DRUPALORG_HANDBOOK_VERSION_VID])) { 
      // Make list of versions associated to handbook page.
      $links = array();
      foreach ($taxonomy[DRUPALORG_HANDBOOK_VERSION_VID] as $tag) {
        $links[] = theme('drupalorg_handbook_meta_link', l($tag->name, 'taxonomy/term/'. $tag->tid));
      }
      $versions = implode(', ', $links);
    }
    /*
    if (count($taxonomy[DRUPALORG_HANDBOOK_VERSION_VID])) {
      // @todo Adjust DRUPALORG_HANDBOOK_VERSION_VID to the vid of the new feature vocabulary
      $links = array();
      foreach ($taxonomy[DRUPALORG_HANDBOOK_VERSION_VID] as $tag) {
        $links[] = theme('drupalorg_handbook_meta_link', l($tag->name, 'taxonomy/term/'. $tag->tid));
      }
      $features = implode(', ', $links);
    }
    */
  }
  
  // Set the modified date for display.
  // @todo Look into better localized date formats, whenever we have locales.
  $modified = format_date($node->changed, 'custom', 'F j, Y');
  
  // Collect a list of people who have edited the book page ever.
  // removing authors for now per issue http://drupal.org/node/428410
  /*$authors_query = db_query("SELECT u.uid, u.name FROM {node_revisions} nr JOIN {users} u ON nr.uid = u.uid WHERE nid = %d GROUP BY u.uid ORDER BY timestamp", $node->nid);
  while ($author = db_fetch_object($authors_query)) {
    $author_links[] = theme('drupalorg_handbook_meta_link', l($author->name, 'user/'. $author->uid));
  }
  $authors = implode(', ', $author_links);*/
  $authors = NULL;

  // @todo Add language listings when available.
  $languages = NULL; 
  // @todo Add alerts (discussion pages) when available.
  $alerts = NULL;

  return theme('drupalorg_handbook_meta_data', $versions, $features, $modified, $authors, $languages, $alerts);
}

/**
 * List handbook pages with comments in descending comment order.
 */
function drupalorg_handbook_with_comments() {
  $header = array(
    array('data' => 'Page'),
    array('data' => 'Comments', 'field' => 'comment_count', 'sort' => 'desc'),
    array('data' => 'Last comment', 'field' => 'last_comment_timestamp'),
  );

  $result = db_query("SELECT n.nid, n.title, s.comment_count, s.last_comment_timestamp
    FROM {node} n LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid
    WHERE n.type = 'book' AND s.comment_count >= 1 AND n.status = 1" . tablesort_sql($header));

  while ($node = db_fetch_object($result)) {
    $rows[] = array(l($node->title, "node/$node->nid"), $node->comment_count, format_interval(time() - $node->last_comment_timestamp) .' ago');
  }

  return theme('table', $header, $rows);
}

/**
 * List pages ordered by visit number descending order.
 */
function drupalorg_handbook_most_popular() {
  $header = array('Rank', 'Page', 'Visits today', 'Total visits');

  $result = db_query("SELECT n.nid, n.title, c.daycount, c.totalcount
    FROM {node} n INNER JOIN {node_counter} c ON n.nid = c.nid
    WHERE n.type = 'book' AND n.status = 1
    ORDER BY c.daycount DESC
    LIMIT 0, 100");
  while ($node = db_fetch_object($result)) {
    $rows[] = array(++$rank, l($node->title, "node/$node->nid"), $node->daycount, $node->totalcount);
  }

  return theme('table', $header, $rows);
}

/**
 * List usernames with site maintainer role.
 */
function drupalorg_handbook_site_maintainers() {
  $output = 'If you have been around for a while, and you want to help maintain Drupal.org and are willing to accept the added responsibilities that come with it, sign up on the <a href="http://drupal.org/mailing-lists">Infrastructure team</a> list.';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name
    FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid
    WHERE r.rid = 3 OR r.rid = 4 OR r.rid = 9
    ORDER BY u.name "); // 3 = site maintainer, 4 = administrator
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

/**
 * List usernames with handbook maintainer role.
 */
function drupalorg_handbook_maintainers() {
  $output = '<p>If you are interested in helping maintain/update/correct the documentation on Drupal.org, read up on the <a href="http://drupal.org/node/24572">many ways to get involved</a>.</p>';
  $output .= '<p>Note: Many of our <a href="/site-maintainers">site maintainers</a> also participate on the documentation team and are not listed here. Due to their broader responsibilities on drupal.org, site maintainers are listed separately.</p>';
  $output .= '<ol>';
  $result = db_query("SELECT DISTINCT(u.uid), u.name
    FROM {users} u INNER JOIN {users_roles} r ON u.uid = r.uid
    WHERE r.rid = 5 OR r.rid = 9
    ORDER BY u.name "); // 3 = site maintainer, 4 = administrator 5 = document maintainer
  while ($account = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $account) ."</li>";
  }
  $output .= '</ol>';
  return $output;
}

/**
 * Count and list contributors to the books.
 */
function drupalorg_handbook_book_contributors() {
  $result = db_query("SELECT u.uid, u.name, COUNT(n.nid) AS pages
  FROM {node} n INNER JOIN {users} u ON n.uid = u.uid
  WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0
  GROUP BY u.name
  ORDER BY pages DESC");
  $output .= "<ul>";
  while ($contributor = db_fetch_object($result)) {
    $output .= "<li>". theme('username', $contributor) ." (". format_plural($contributor->pages, "@count page", "@count pages") .")</li>";
  }
  $output .= "</ul>";
  return $output;
}

/**
 * Collect and cache revision maintainers (those who made revisions to books).
 */
function drupalorg_handbook_revision_maintainers() {
  if ($cache = cache_get('node_263594')) {
    return $cache->data;
  }

  $result = db_query("SELECT u.uid, u.name, COUNT(nr.vid) AS pages
    FROM {node} n INNER JOIN {node_revisions} nr ON n.nid = nr.nid INNER JOIN {users} u ON u.uid = n.uid
    WHERE n.type = 'book' AND n.status = 1 AND n.moderate = 0
    GROUP BY u.name
    ORDER BY pages DESC");

  $list = array();
  while ($contributor = db_fetch_object($result)) {
    $list[] = theme('username', $contributor) ." (". format_plural($contributor->pages, "@count revision", "@count revisions") .")";
  }

  $output = theme('item_list', $list);
  cache_set('node_263594', $output, 'cache', 300);
  return $output;
}

/**
 * API function to get recent update information for the documentation pages.
 */
function drupalorg_handbook_get_recent_updates($limit = 50) {
  return db_query_range("SELECT n.nid, n.title, n.changed, r.log, u.uid, u.name
    FROM {node} n
    INNER JOIN {book} b ON n.nid = b.nid INNER JOIN {node_revisions} r ON n.vid = r.vid INNER JOIN {users} u ON u.uid = r.uid
    WHERE n.status = 1
    ORDER BY n.changed DESC", 0, $limit);
}

/**
 * List most recent updates to book pages for moderation reasons.
 */
function drupalorg_handbook_display_recent_updates() {
  $result = drupalorg_handbook_get_recent_updates(50);
  while ($page = db_fetch_object($result)) {
    $rows[] = array(
      l($page->title, "node/$page->nid") .' '. theme('mark', node_mark($page->nid, $page->changed)) . ($page->log ? "<br />". check_plain($page->log) : ''), 
      theme('username', $page), 
      t('%time ago', array('%time' => format_interval(time() - $page->changed))),
      l(t('Diff'), "node/$page->nid/revisions/view/latest"),
    );
  } 
  $header = array('Page', 'Edited', 'Updated', 'Diff');

  $output = theme('table', $header, $rows);
  return $output;
}

/**
 * License and quick links blocks for docs.
 */
function drupalorg_handbook_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Handbook License');
      $blocks[1]['info'] = t('Documentation Quick Links');
      return $blocks;

    case 'view':
      switch($delta) {
        case 0:
          if (drupalorg_handbook_block_is_visible()) {
            $block['subject'] = t('Handbook license');
            $block['content'] = drupalorg_handbook_license();
            return $block;
          }

        case 1:
          if (drupalorg_handbook_block_is_visible()) {
            $block['subject'] = t('Documentation Quick Links');
            $block['content'] = drupalorg_handbook_doc_quick_links();
            return $block;
          }
     }
  }
}

/**
 * Check whether the current node is a block module.
 *
 * Based on Drupal 6 code from book_block().
 */
function drupalorg_handbook_block_is_visible() {
  return ($node = menu_get_object()) && !empty($node->book['bid']);
}

/**
 * Quick links on handbook pages.
 */
function drupalorg_handbook_doc_quick_links() {
  $output = <<<EOT
  <ul>
   <li><a href="/handbook/modules">Module documentation</a></li>
   <li><a href="/node/257">Customization and theming</a></li>
   <li><a href="/search/node">Search drupal.org</a></li>
   <li><a href="/forum/0">Support forums</a></li>
   <li><a href="/handbook">View other handbooks</a></li>
   <li><a href="/project/issues/documentation">Suggest documentation improvements</a></li>
   <li><a href="/node/23367">Join the doc team</a></li>
  </ul>
EOT;
  return $output;
}

/**
 * License block for the handbook pages.
 */
function drupalorg_handbook_license() {
  return t('The Drupal handbook pages are © 2000-!year by the <a href="@contributors_link">individual contributors</a> and can be used in accordance with the <a href="@ccl_url">Creative Commons License, Attribution-ShareAlike 2.0</a>. PHP code is distributed under the <a href="@gpl_url">GNU General Public License</a>', array('!year' => date('Y'), '@contributors_link' => url('node/14205'), '@ccl_url' => url('node/14307'), '@gpl_url' => url('http://www.gnu.org/licenses/old-licenses/gpl-2.0.html')));
}

/**
 * Implementation of hook_theme().
 */
function drupalorg_handbook_theme($existing, $type, $theme, $path) {
  return array(
    'drupalorg_handbook_meta_data' => array(
      'arguments' => array('versions' => NULL, 'features' => NULL, 'modified' => NULL, 'authors' => NULL, 'languages' => NULL, 'alerts' => NULL),
      'template' => 'handbook-meta-data',
    ),
    'drupalorg_handbook_meta_link' => array(
      'arguments' => array('link' => NULL),
    ),
  );
}

/**
 * Simply wraps links in a span to make button theming easier.
 * 
 * @param $link
 *   An already generated HTML link, from l() for example.
 * @return
 *   The link wrapped in spans to make it possible to use varying width buttons.
 */
function theme_drupalorg_handbook_meta_link($link) {
  return '<span>'. $link .'</span>';
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 *
 * @todo
 *   Add caching.
 */
function drupalorg_handbook_preprocess_drupalorg_home(&$vars) {
  $result = drupalorg_handbook_get_recent_updates(5);
  $recent_updates = '';
  while ($node = db_fetch_object($result)) {
    // Fake the created time for the theme function, so we can easily theme it.
    $node->created = $node->changed;
    $recent_updates .= '<h6>'. l($node->title, 'node/'. $node->nid) .'</h6><p class="submitted">'. theme('node_submitted', $node) .'</p>'; 
  }
  // We have no place to link this to in a nice way.
  // $fresh_news .= '<p>'. l(t('More documentation updates...'), '...') .'</p>';
  $vars['tab_content_docs'] = $recent_updates;
}
