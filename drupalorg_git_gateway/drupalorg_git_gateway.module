<?php

/**
 * @file
 */

/**
 * Role for granting git access.
 */
define('DRUPALORG_GIT_GATEWAY_RID', 20);

/**
 * Role for administering Git.
 */
define('DRUPALORG_GIT_GATEWAY_ADMIN_RID', 22);

/**
 * Role for granting access to create full projects.
 */
define('DRUPALORG_GIT_GATEWAY_VETTED_RID', 24);

/**
 * Implementation of hook_user().
 */
function drupalorg_git_gateway_user($op, &$edit, &$account, $category = NULL) {
  $function = 'drupalorg_git_gateway_user_' . $op;
  if (function_exists($function)) {
    return $function($edit, $account, $category);
  }
}

function drupalorg_git_gateway_user_categories(&$edit, &$account, $category = NULL) {
  return array(
    'git' => array(
      'name' => 'git',
      'title' => t('Git access'),
      'weight' => 1,
      // use defaults for access callback and arguments
    ),
  );
}

function drupalorg_git_gateway_user_form(&$edit, &$account, $category = NULL) {
  if ($category != 'git') {
    return;
  }

  $form = array();

  // Store some state information in local variables for easier checking later.
  $consented = !empty($account->git_consent);
  $disabled = !empty($account->git_disabled);
  $username_set = isset($account->git_username);

  // Compensate for hook_user horribleness by queueing messages to be dsm'd where
  // we can prevent them from being shown on the form submission passthrough.
  // Stupid hook_user().
  $form['_git_dsm'] = array(
    '#type' => 'value',
    '#value' => array(),
  );

  $form['git_tos'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git Access Agreement'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 10,
  );

  $form['git_tos']['terms'] = array(
    '#type' => 'item',
    '#title' => t("To use Drupal's version control systems you must agree to the following"),
    '#value' => theme('item_list', array(
      t('I will only commit <a href="!link">GPL v2+</a>-licensed code and resources to the Drupal code repository.', array('!link' => url('http://drupal.org/licensing/faq'))),
      t('I will only commit code and resources that I own or am permitted to distribute.'),
      t('I will cooperate with the <a href="!link">Drupal Security Team</a> as needed.', array('!link' => url('http://drupal.org/security-team'))),
      t('I have read and will adhere to the <a href="!link">Drupal Code of Conduct</a>.', array('!link' => url('http://drupal.org/dcoc'))),
      t('I agree to the <a href="!link">Drupal Code Repository Terms of Service</a>.', array('!link' => url('http://drupalcode.org/viewvc/drupal/contributions/TERMS.txt?view=co'))),
    )),
  );

  $form['git_tos']['git_consent'] = array(
    '#type' => 'checkbox',
    '#title' => t('I agree'),
    '#default_value' => $account->git_consent,
  );

  global $user;
  if ($user->uid != $account->uid) {
    // Even admins should never be able to change the state of whether someone
    // consented to our terms of service or not.
    $form['git_tos']['git_consent']['#disabled'] = TRUE;
  }

  // Both 'Git administrator' and 'User administrator' roles can toggle this.
  if (user_access('administer users') || user_access('administer version control systems')) {
    $form['git_tos']['git_disabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Disable Git access for this user'),
      '#default_value' => $account->git_disabled,
      '#description' => t('Globally disable Git access for this user across all of Drupal.org.'),
    );
  }

  if ($disabled) {
    $form['_git_dsm']['#value'][] = array(t('Your Git access has been suspended by a Drupal.org administrator.'), 'warning');
  }

  // Short-circuit early if the consent button hasn't been checked.
  if (!$consented) {
    $form['_git_dsm']['#value'][] = array(t('You will not be able to use Git unless the checkbox consenting to the terms of service is checked.'), 'warning');
    $form['git_tos']['#collapsible'] = FALSE;
    $form['git_tos']['#collapsed'] = FALSE;
    return $form;
  }

  if (!$username_set) {
    $form['_git_dsm']['#value'][] = array(t('You will not be able to use Git until you have selected a Git username. A suggestion has been provided for you, based on your username. <strong>Note that once chosen, your Git username cannot be changed.</strong>'), 'warning');
  }

  $form['username'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git Username'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if ($username_set) {
    $form['username']['git_username_display'] = array(
      '#type' => 'item',
      '#title' => t('Your Git username'),
      '#disabled' => TRUE,
      '#value' => $account->git_username,
      '#description' => t('Your Git username. It cannot be changed. Drupal.org uses this to generate your personalized sandbox URIs, and you use it as your SSH user when authenticating to Drupal.org with Git.'),
    );
  }
  else {
    $form['username']['#description'] = t('Choose a username to use for Git. Drupal.org will use this to generate your personalized sandbox URIs, and it will be the username you use to authenticate Git to Drupal.org when cloning and pushing code. <strong>Once chosen, your Git username cannot be changed.</strong>');
    $form['username']['git_username'] = array(
      '#type' => 'textfield',
      '#title' => t('Desired Git username'),
      '#maxlength' => 64,
      '#default_value' => drupalorg_git_gateway_suggest_git_username($account->name),
      '#description' => t('Acceptable characters are ANSI alphanumerics (A-Z, a-z, 0-9), underscores or dashes. A suggested username is provided, based on the acceptable characters in your Drupal username and the availability of Git usernames.'),
    );
    // Again, bail out early if the username isn't set, as we need it for the instructions.
    return $form;
  }

  $form['git_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git Configuration'),
    '#description' => t('Git has a number of configuration options you ought to set on your local system.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $user_config = t('Most important of all the configuration options is telling Git who you are by setting a name and e-mail. Based on your current account settings, the following settings are appropriate:') . "\n";
  $git_config_name = empty($account->profile_full_name) ? $account->name : $account->profile_full_name;
  $user_config .= '<div class="codeblock"><code>';
  $user_config .= "git config --global user.name '$git_config_name'<br/>";
  $user_config .= "git config --global user.email '$account->mail'<br/>";
  $user_config .= '</code></div>';
  $user_config .= 'E-mail addresses in Drupal Git repositories are never shown in a web browser, but they can be accessed by anyone looking directly at the Git repository logs. It is generally considered appropriate to use a real, public-facing e-mail for Git. However, if you prefer to use an anonymized address, use this special anonymized address: ';
  $anon_address = "{$account->git_username}@{$account->uid}.no-reply.drupal.org";
  $user_config .= "<div class=\"codeblock\"><code>git config --global user.email '$anon_address'</code></div>";
  $user_config .= t('Setting the Git e-mail to either an !multiemailadmin or the anonymized e-mail is very important. If you do not, your commits cannot be linked to your Drupal.org account, and you will not credited for them in commit statistics or listings.', array('!multiemailadmin' => l('e-mail address associated with your account', "user/$account->uid/edit/email-addresses")));

  $form['git_config']['user_config'] = array(
    '#type' => 'item',
    '#title' => t('Git user configuration'),
    '#value' => $user_config,
  );

  return $form;
}

function drupalorg_git_gateway_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != 'user_profile_form') {
    return;
  }

  // Add our custom validator, and before the built-in user.module one.
  array_unshift($form['#validate'], 'drupalorg_git_gateway_profile_form_validate');

  // Only show message if we're not on the submission passthrough by the form builder.
  if (empty($form_state['post']) && is_array($form['_git_dsm'])) {
    foreach ($form['_git_dsm']['#value'] as $messagedata) {
      list($message, $status) = $messagedata;
      drupal_set_message($message, $status);
    }
  }
}

function drupalorg_git_gateway_profile_form_validate($form, &$form_state) {
  global $user;

  // Validation checks related to admin users editing normal users.
  if (($user->uid != $form_state['values']['_account']->uid)) {
    if ($form_state['values']['_category'] == 'git' &&
       ($form_state['values']['git_consent'] != $form_state['values']['_account']->git_consent)) {
      // Even admins should never be able to change the state of whether someone
      // consented to our terms of service or not.
      form_set_error('git_consent', 'Only the account\'s owner can toggle their consent to the Git Terms of Service.');
      $form_state['values']['git_consent'] = $form_state['values']['_account']->git_consent;
    }
  }

  // If the git_username field is present, do some validation.
  if (isset($form['username']['git_username'])) {
    // Ensure the requested ID isn't taken.
    if ($uid = db_result(db_query("SELECT uid FROM {users} WHERE git_username = '%s' AND uid <> %d", $form_state['values']['git_username'], $form_state['values']['_account']->uid))) {
      form_set_error('git_username', t('The requested Git username is already taken.'));
    }
    else if (preg_match('/[^A-Za-z0-9_-]/', $form_state['values']['git_username'])) {
      form_set_error('git_username', t('The requested username contains invalid characters.'));
    }
  }
}

/**
 * Perform arbitration to determine if the user should be allocated the
 * all-important 'Git user' role.
 */
function drupalorg_git_gateway_user_update(&$edit, &$account, $category = NULL) {
  // Start by assuming we should not grant the perm.
  $grant = FALSE;

  // User has changed the state of their consent to the Git ToS. Log the change.
  if (isset($edit['git_consent']) && ($edit['git_consent'] != $account->git_consent)) {
    $values = array($account->uid, time(), $edit['git_consent']);
    db_query('INSERT INTO {drupalorg_git_consent_log} (uid, timestamp, action) VALUES (%d, %d, %d) ', $values);
  }

  // Munge edited values into place on the account for unified checking.
  foreach (array('git_disabled', 'git_username', 'git_consent') as $field) {
    if (isset($edit[$field])) {
      $account->$field = $edit[$field];
    }
  }

  if (empty($account->git_disabled)) {
    // Grant the perm IFF consent has been given and a username has been set.
    $grant = (!empty($account->git_username) && !empty($account->git_consent));
  }

  if ($grant) {
    $vals = array(
      'uid' => $account->uid,
      'rid' => DRUPALORG_GIT_GATEWAY_RID,
    );
    db_merge('users_roles')->key($vals)->fields($vals)->execute();
  }
  else {
    db_query('DELETE FROM {users_roles} WHERE uid = %d AND rid = %d', array($account->uid, DRUPALORG_GIT_GATEWAY_RID));
    unset($edit['roles'][DRUPALORG_GIT_GATEWAY_RID]);
  }
}

/**
 * Return total number of approved Git accounts.
 */
function drupalorg_git_gateway_get_total_accounts() {
  return db_result(db_query('SELECT count(distinct(uid)) FROM {users_roles} WHERE rid IN (%d, %d)', DRUPALORG_GIT_GATEWAY_RID, DRUPALORG_GIT_GATEWAY_VETTED_RID));
}

/**
 * Created a suggested username based on the provided name value, and ensuring
 * no conflicts with existing git usernames.
 *
 * @param string $name
 */
function drupalorg_git_gateway_suggest_git_username($name) {
  $base_suggestion = preg_replace('/[^A-Za-z0-9_-]/', '', $name);
  $len = strlen($base_suggestion);

  $result = db_query("SELECT git_username FROM {users} WHERE git_username LIKE ('%s%')", $name);
  $matches = array();
  while ($row = db_fetch_object($result)) {
    $matches[] = $row->git_username;
  }

  // Ensure no duplicates, and add an incrementing counter if one is found.
  $i = 0;
  while (array_search($base_suggestion, $matches) !== FALSE) {
    $base_suggestion = substr($base_suggestion, 0, $len) . ++$i;
  }
  return $base_suggestion;
}

function drupalorg_git_gateway_versioncontrol_project_auth_data_alter(&$data, $repository) {
  // FIXME What vc_project adds doesn't help us at all, just regenerate it all for now.
  unset($data['users']);

  $account_perms = array();
  $auth_data = $repository->getAuthHandler()->getUserData();
  foreach ($auth_data as $uid => $value) {
    $account = new stdClass;
    $account = user_load($uid);
    if (empty($account)) {
      continue;
    }

    $account_perms[$account->git_username] = $value;
    $ap =& $account_perms[$account->git_username];

    // User has global access disabled for some reason.
    if (!isset($account->roles[DRUPALORG_GIT_GATEWAY_RID])) {
      if (!empty($account->git_disabled)) {
        $ap['global'] = 1; // 1 == account suspended
      }
      else if (!empty($account->git_consent)) {
        $ap['global'] = 2; // 2 == user's ToS agree checkbox is unchecked
      }
      else {
        $ap['global'] = 3; // 3 == other, unknown reason.
      }
    }
    else {
      $ap['global'] = 0; // 0 == green light, all good
    }

    $ap['name'] = $account->git_username;
    $ap['pass'] = $account->pass;

    // Add sshkeys data.
    $keys = sshkey_load_all_by_entity('user', $account->uid);
    $ap['ssh_keys'][' '] = ' ';
    foreach ($keys as &$key) {
      $ap['ssh_keys'][$key->title] = $key->fingerprint;
    }
  }
  $data['users'] = $account_perms;
}

function drupalorg_git_gateway_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type != 'project_project' || empty($node->project['sandbox'])) {
    return;
  }

  switch ($op) {
    case 'insert':
    case 'update':
      // Clear existing alias for the sandbox, it's guaranteed to be wrong.
      path_set_alias("node/$node->nid");
      // Set the one with the git_username
      $user = user_load($node->uid);
      path_set_alias("node/$node->nid", "sandbox/{$user->git_username}/{$node->project['uri']}", NULL, isset($node->language) ? $node->language : '');
      break;
  }
}