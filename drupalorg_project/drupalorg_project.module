<?php
// $Id$

/**
 * @file
 *   Project* module related customizations used on drupal.org.
 */
 
/**
 * Release node ids for issues we're currently tracking (Drupal 7).
 */
define('DRUPALORG_ISSUE_RIDS', '156281');

/**
 * The CVS user role. Added to users with a CVS account.
 */
define('DRUPALORG_CVS_USER_ROLE', 8);

/**
 * The required simplenews newsletter tid for CVS account holders.
 */
define('DRUPALORG_CVS_NEWSLETTER', 118);

/**
 * URL for the Drupal Security Team.
 */
define('DRUPALORG_SECURITY_TEAM_URL', 'http://drupal.org/security-team');

/**
 * URL for links to contact the security team
 */
define('DRUPALORG_SECURITY_CONTACT_URL', 'http://drupal.org/security-team#report-issue');

/**
 * URL for the handbook page that describes the "Release type" vocabulary.
 */
define('DRUPALORG_RELEASE_TYPE_HANDBOOK_URL', 'http://drupal.org/handbook/cvs/releases/types#type');

/**
 * URL specifically to describe the "Security update" term.
 * For now, the general page for release types is the best we've got.
 */
define('DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL', DRUPALORG_RELEASE_TYPE_HANDBOOK_URL);

// == Basic core hooks =========================================================

/**
 * Implementation of hook_menu().
 */
function drupalorg_project_menu() { 
  // Menu items for patch bingo.
  $items['bug-bingo'] = array(
    'title'              => 'Bug bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('bug-core'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['contrib-bug-bingo'] = array(
    'title'              => 'Contrib bug bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('bug-contrib'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['patch-bingo'] = array(
    'title'              => 'Patch bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('patch-core'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );
  $items['contrib-patch-bingo'] = array(
    'title'              => 'Contrib patch bingo',
    'page callback'      => 'drupalorg_project_bingo_jump',
    'page arguments'     => array('patch-contrib'),
    'access arguments'   => array('access content'),
    'type'               => MENU_SUGGESTED_ITEM,
  );

  // Some redirect menu items.
  $items['project/drupal project'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('project/drupal'),
    'type' => MENU_CALLBACK,
  );
  $items['download'] = array(
    'access arguments' => array('access content'),
    'page callback' => 'drupal_goto',
    'page arguments' => array('project/drupal'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_help().
 */
function drupalorg_project_help($path, $arg) {
  switch ($path) {
    case 'project/usage':
      return '<p>'. t('These statistics are incomplete; only Drupal websites using the <a href="!update_status_url">Update Status</a> module are included in the data. As this module is now included with the download of Drupal since version 6.x, the data is heavily biased toward newer sites. <a href="!usage_description_url">Read more information about how these statistics are calculated.</a>', array('!update_status_url' => url('project/update_status'), '!usage_description_url' => url('node/329620'))) .'</p>';
  }

  if ($arg[0] == 'project' && strtolower($arg[1]) == 'modules') {
    return t('You can also view an <a href="@list_url">Alphabetical list of Projects</a> that includes all projects but only their names.', array('@list_url' => url('node/206666')));
  }
  if ($arg[0] == 'project' && $arg[1] == 'issues-term' && $arg[2] == '346') {
    return '<p>'. t('A more detailed overview of the issues can be seen in the Community Initiatives handbook section titled <a href="http://drupal.org/node/362117">Upgrade Drupal.org from Drupal 5 to 6</a>.') .'</p>';
  }
}

/**
 * Implementation of hook_cron().
 */
function drupalorg_project_cron() {
  drupalorg_project_issue_counts();
}

// == Issue counter ============================================================

/**
 * Pulls issue counts for various issue queues on drupal.org.
 *
 * Summarize issue counts for different types of issues for DRUPALORG_ISSUE_RIDS releases.
 */
function drupalorg_project_issue_counts() {
  $issue_counts['Pending bugs'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND category = 'bug' AND sid = 1 AND priority IN (1,2) AND rid IN (". DRUPALORG_ISSUE_RIDS .")"));
  $issue_counts['Critical issues'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND category IN ('bug', 'task') AND sid IN (1,8,13,14) AND priority = 1 AND rid IN (". DRUPALORG_ISSUE_RIDS .")"));
  $issue_counts['Patch queue'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND sid IN (8,13,14) AND rid IN (". DRUPALORG_ISSUE_RIDS .")"));
  $issue_counts['Patches to review'] = db_result(db_query("SELECT COUNT(*) FROM {project_issues} pi INNER JOIN {node} n ON pi.nid = n.nid WHERE n.status = 1 AND  pid = 3060 AND sid IN (8) AND rid IN (". DRUPALORG_ISSUE_RIDS .")"));
  variable_set('drupalorg_project_issue_counts', $issue_counts);
}

// == Altering of various forms ================================================

/**
 * Implementation of hook_form_alter().
 */
function drupalorg_project_form_alter(&$form, $form_state, $form_id) {
  // Add a description for the Priority and Status values.
  if ($form_id == 'project_issue_node_form' || $form_id == 'comment_form' && !empty($form['original_issue']['issue_info'])) {
    $priority_status_description = array(
      // The "standard" class adds a clear so the description is positioned
      // below the floated pull-downs.  "fieldset-description" is from
      // bluebeach to make the font size smaller.
      '#prefix' => '<div class="standard fieldset-description">',
      '#value' => t('Descriptions of the <a href="!priority_url">Priority</a> and <a href="!status_url">Status</a> values can be found in the <a href="!issue_queue_url">Issue queue handbook</a>.', array('!priority_url' => '/node/45111', '!status_url' => '/node/156119', '!issue_queue_url' => '/node/317')),
      '#suffix' => '</div>',
    );
  }

  // Make the "Issue tags" vocabulary not so prominent on issue nodes.
  if ($form_id == 'project_issue_node_form' || 
      ($form_id == 'comment_form' && !empty($form['original_issue']['issue_info']))) {
    $form['taxonomy']['#type'] = 'fieldset';
    $form['taxonomy']['#title'] = t('Tags');
    $form['taxonomy']['#collapsible'] = TRUE;
    $form['taxonomy']['#collapsed'] = TRUE;
    // We want this fieldset at the very bottom, just above the buttons, but
    // we need different weights for that depending on if it's a new issue or
    // a follow-up comment.
    if ($form_id == 'project_issue_node_form') {
      $form['taxonomy']['#weight'] = 35;
      $form['issue_info']['description'] = $priority_status_description;
    }
    else {
      $form['taxonomy']['#weight'] = 4;
      $form['original_issue']['issue_info']['description'] = $priority_status_description;
    }
  }

  // Add security update related checks to release forms.
  if ($form_id == 'project_release_node_form') {
    drupalorg_project_release_node_form_alter($form, $form_state);
  }
  
  // Add CVS maintainer newsletter signup to users when getting a CVS account.
  if ($form_id == 'cvs_user_edit_form') {
    $form['#submit'][] = 'drupalorg_project_cvs_user_edit_submit';
  }
    
  // Deprecate the "license" field, as it must always be GPLv2+ anyway.
  if ($form_id == 'project_project_node_form') {
    if (! $form['project']['license']['#default_value']) {
       $form['project']['license'] = array(
        '#type' => 'item',
        '#title' => $form['project']['license']['#title'],
        '#value' => t('<a href="@link_url">@link_name</a>', array(
          // Constants defined in CVS module.
          '@link_url' => CVS_LICENSE_LINK,
          '@link_name' => CVS_LICENSE,
        )),
      );
    }
  }
}

// == Security release restrictions ============================================

/**
 * Alter release node forms properly for security updates.
 *
 * Ensure that only privileged users can modify a security release tag and when
 * people add this tag, they get to know about the process.
 */
function drupalorg_project_release_node_form_alter(&$form, $form_state) {
  if (!empty($form['taxonomy'])) {
    $vid = drupalorg_project_get_release_type_vid();
    $security_tid = drupalorg_project_get_security_update_tid();
    if (!empty($form['taxonomy'][$vid])) {
      $form['taxonomy'][$vid]['#weight'] = 10;
      if (empty($form['nid']['#value'])) {
        // Adding a new release.
        if (!empty($form['project_release']['rebuild']['#value'])) {
          // This is a -dev, don't let anyone mark it a security update.
          _drupalorg_project_remove_security_update($form);
        }
        else {
          // Regular release
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL));
          // Add wrapper div for drupalorg_project.js
          $form['taxonomy'][$vid]['#prefix'] = '<div class="release-type-select">';
          $form['taxonomy'][$vid]['#suffix'] = '</div>';
          $form['#validate'][] = 'drupalorg_project_security_release_form_validate';
          $confirm_class = 'security-update-confirm';
          // Hide the confirmation checkbox on page load unless 'Security
          // update' is already selected.
          if (empty($form_state['values']['taxonomy'][$vid]) || (array_search($security_tid, $form_state['values']['taxonomy'][$vid]) === FALSE)) {
            $confirm_class .= ' js-hide';
          }
          $form['security_update_confirm'] = array(
            '#type' => 'checkbox',
            '#title' => t('Are you sure you want to mark this release as a <a href="@security_update_url">Security update</a>?', array('@security_update_url' => DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL)),
            '#prefix' => '<div class="'. $confirm_class .'">',
            '#suffix' => '</div>',
            '#weight' => -2,
            '#description' => t('If you select %security_update, your release will not be published without the manual intervention of the <a href="@security_url">Drupal Security Team</a>. You should have already <a href="@contact_url">contacted the Security Team</a> to coordinate a security advisory (SA) for your release before you committed any security-related patches.', array('%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL)),
            '#default_value' => !empty($form_state['values']['security_update_confirm']),
          );
          $drupalorg_project_path = drupal_get_path('module', 'drupalorg_project');
          drupal_add_js($drupalorg_project_path .'/drupalorg_project.js');
          drupal_add_css($drupalorg_project_path .'/drupalorg_project.css');
        }
      }
      else {
        // Editing an existing release.
        if (array_search($security_tid, $form['taxonomy'][$vid]['#default_value']) !== FALSE) {
          // If this release is already marked as a Security update, don't
          // let regular users change it any futher.
          if (!user_access('administer projects')) {
            $form['taxonomy'][$vid]['#disabled'] = TRUE;
            $form['taxonomy'][$vid]['#value'] = $form['taxonomy'][$vid]['#default_value'];
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a> Since this release is already marked as a %security_update, you can no longer change the release type. If you believe you need to do so for some reason, you should <a href="@contact_url">contact</a> the <a href="@security_url">Drupal Security Team</a>.', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL, '%security_update' => t('Security update'), '@security_url' => DRUPALORG_SECURITY_TEAM_URL, '@contact_url' => DRUPALORG_SECURITY_CONTACT_URL));
        }
        else {
          // Not a Security update, remove that option entirely if this is
          // either a -dev snapshot or a non-admin user.
          if (!empty($form['#node']->rebuild) || !user_access('administer projects')) {
            _drupalorg_project_remove_security_update($form);
          }
          $form['taxonomy'][$vid]['#description'] = t('<a href="@handbook_url">What is a release type?</a>', array('@handbook_url' => DRUPALORG_RELEASE_TYPE_HANDBOOK_URL));
        }
      }
    }
  }
}

/**
 * Utility function to remove the security update term on node forms.
 */
function _drupalorg_project_remove_security_update(&$form) {
  $vid = drupalorg_project_get_release_type_vid();
  $security_tid = drupalorg_project_get_security_update_tid();
  foreach ($form['taxonomy'][$vid]['#options'] as $i => $option) {
    if (!empty($option->option)) {
      $tid = key($option->option);
      if ($tid == $security_tid) {
        unset($form['taxonomy'][$vid]['#options'][$i]);
        return;
      }
    }
  }
}

/**
 * Set the project_release_type_vid Drupal variable and return its value.
 */
function drupalorg_project_get_release_type_vid() {
  static $vid = 0;
  if (empty($vid)) {
    $vid = variable_get('project_release_type_vid', 0);
    if (empty($vid)) {
      $vid = db_result(db_query("SELECT v.vid FROM {vocabulary} v INNER JOIN {vocabulary_node_types} n ON v.vid = n.vid WHERE n.type = 'project_release' AND v.name = 'Release type'"));
      variable_set('project_release_type_vid', $vid);
    }
  }
  return $vid;
}

/**
 * Set the project_release_type_security_update_tid Drupal variable and return its value.
 */
function drupalorg_project_get_security_update_tid() {
  static $tid = 0;
  if (empty($tid)) {
    $tid = variable_get('project_release_type_security_update_tid', 0);
    if (empty($tid)) {
      $tid = db_result(db_query("SELECT tid FROM {term_data} WHERE vid = %d AND name = '%s'", drupalorg_project_get_release_type_vid(), 'Security update'));
      variable_set('project_release_type_security_update_tid', $tid);
    }
  }
  return $tid;
}

/**
 * Form validation function for security release tag check.
 */
function drupalorg_project_security_release_form_validate($form, &$form_state) {
  $vid = drupalorg_project_get_release_type_vid();
  $security_tid = drupalorg_project_get_security_update_tid();
  if (!empty($form_state['values']['taxonomy'][$vid][$security_tid]) && empty($form_state['values']['security_update_confirm'])) {
    // Ensure the user confirms that this release should be marked security.
    form_set_error('security_update_confirm', t('You must confirm you want this release to be a <a href="@security_update_url">Security update</a>', array('@security_update_url' => DRUPALORG_SECURITY_UPDATE_HANDBOOK_URL)));
  }
}

// == CVS maintainer housekeeping ==============================================

/**
 * Add the user to the CVS maintainer role, when she gets an account.
 */
function drupalorg_project_cvs_user_edit_submit($form, &$form_state) {
  global $language;

  if (isset($form_state['values']['cvs_status'])) {
    $account = user_load(array('uid' => $form_state['values']['cvs_uid']));
    switch ($form_state['values']['cvs_status']) {
      case CVS_APPROVED:
        db_query('INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)', $form_state['values']['cvs_uid'], DRUPALORG_CVS_USER_ROLE);
        break;
      case CVS_DISABLED:
        db_query('DELETE FROM {users_roles} WHERE uid = %d AND rid = %d', $form_state['values']['cvs_uid'], DRUPALORG_CVS_USER_ROLE);
        break;
    }
    // Clear cache for this user, so that the user will see new functionality.
    cache_clear_all($form_state['values']['cvs_uid'] .':'. $language->language, 'cache_menu');
  }
}

// == Project links ============================================================

/**
 * Implemenation of hook_project_page_link_alter().
 */
function drupalorg_project_project_page_link_alter(&$links, $node) {
  // #310446: Alter issue queue links to view issues of all categories.
  if (isset($links['support']['links']['pending_support'])) {
    $prepend = array(
      'open_issues' => l(t('View open issues or create one'), 'project/issues/'. $node->project['uri']),
      'all_issues' => l(t('View all issues'), 'project/issues/'. $node->project['uri'], array('query' => 'status=All')),
    );
    $links['support']['links'] = $prepend + $links['support']['links'];
    unset($links['support']['links']['pending_support']);
    unset($links['support']['links']['pending_bugs']);
    unset($links['support']['links']['pending_features']);
    unset($links['development']['links']['pending_issues']);
  }
  // #310446: Remove issue creation links to avoid duplicate issues.
  if (isset($links['support']['links']['request_support'])) {
    unset($links['support']['links']['request_support']);
    unset($links['support']['links']['report_bug']);
    unset($links['support']['links']['request_feature']);
  }
  if (isset($links['support']['links']['create_forbidden'])) {
    unset($links['support']['links']['create_forbidden']);
  }
  // Link to security handbook page.
  $links['support']['links']['report_security_issue'] = l(t('Report a security issue'), 'security-team');
}

// == Utility functions ========================================================

/**
 * Project issue URL generator for Drupal issues.
 *
 * @param $query
 *   Array of array of options to pass on in the URL:
 *     - version (array of release node ids)
 *     - status (array of status ids)
 *     - priorities (array of prioristy ids)
 *     - categories (array of category names)
 *  @param $absolute
 *    Set to TRUE to get an absolute URL with http://drupal.org/...
 */
function drupalorg_project_issue_url($query = array(), $absolute = FALSE) {
  return url('project/issues/search/drupal', array('query' => $query, 'absolute' => $absolute));
}

// == Node overrides ===========================================================

/**
 * Implementation of hook_nodeapi().
 */
function drupalorg_project_nodeapi(&$node, $op = 'view', $teaser = FALSE, $page = FALSE) {
  if ($op == 'view' && $page) {
    $extra = '';
    switch ($node->nid) {
      case 206666: // List projects by Drupal core version.
        $extra = drupalorg_project_list_by_core();
        break;
      case 199251: // List projects with CVS RSS feeds.
        $extra = drupalorg_project_list_cvs_rss();
        break;
      case 97084: // List branches ever created in contrib.
        $extra = drupalorg_project_list_branches_contrib();
        break;
      case 93997: // List branches ever created in core.
        $extra = drupalorg_project_list_branches_core();
        break;
      case 9730:
        $url_queue = drupalorg_project_issue_url(
          array(
            'status' => array(8, 13, 14),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_queue);
        exit;

      case 9731:
        $url_bugs = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('bug'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_bugs);
        exit;

      case 9732:
        $url_tasks = drupalorg_project_issue_url(
          array(
            'status' => array(1),
            'categories' => array('task'),
          ),
          TRUE /* Absolute */
        );
        header('Location: '. $url_tasks);
        exit;

      case 133282:
        drupal_goto('patch/create');
        exit;
    }
    $node->content['body']['#value'] .= $extra;
  }
}

/**
 * List projects by Drupal core version.
 */
function drupalorg_project_list_by_core() {
  $output = '';

  $tags = array(
    'DRUPAL-4-7' => t('Drupal 4.7.x'),
    'DRUPAL-5'   => t('Drupal 5.x'),
    'DRUPAL-6'   => t('Drupal 6.x'),
  );

  foreach ($tags as $tag => $label) {
    $top_list[] = l($tag, $_GET['q'], array('fragment' => $tag));
    $projects = db_query("SELECT DISTINCT p.nid, n.title, p.uri
      FROM {project_projects} p INNER JOIN {project_release_nodes} r ON p.nid = r.pid INNER JOIN {node} n ON n.nid = p.nid INNER JOIN {term_node} tn ON p.nid = tn.nid
      WHERE tn.tid = 14 AND r.tag LIKE '%s%%'
      ORDER BY n.title", $tag);
    $list = array();
    while ($project = db_fetch_object($projects)) {
      $list[] = l($project->title, "project/$project->uri", array('html' => TRUE));
    }
    if (!empty($list)) {
      $output .= theme('item_list', $list, "<a name=\"$tag\">$label</a>");
    }
  }
  if (!empty($top_list)) {
    $output = theme('item_list', $top_list) . $output;
  }

  return $output;
}

/**
 * List projects with CVS RSS links.
 */
function drupalorg_project_list_cvs_rss() {
  $count_query = "SELECT COUNT(*) FROM {node} WHERE type = 'project_project' AND status = 1";
  $total = db_result(db_query($count_query));
  $header = array(array('data' => t('Number'), 'field' => 'nid', 'sort' => 'desc'), t('Title'), t('CVS/RSS'));
  $result = pager_query("SELECT nid, title, status FROM {node} WHERE type = 'project_project' AND status = 1 ". tablesort_sql($header), 100, 0, $count_query);
  $rows = array();
  $page = (int)$_GET['page'];
  $count = $total - $page * 100;
  while($row = db_fetch_array($result)) {
    $url = url('cvs', array('query' => 'rss=true&nid='. $row['nid'], 'absolute' => TRUE));
    $rows[]= array($count--, l($row['title'], 'node/'. $row['nid']), theme('feed_icon', $url));
  }
  drupal_set_message("There are $total projects.");

  return theme('table', $header, $rows). theme('pager');
}

/**
 * Show branches ever created in contrib based on CVS module data.
 */
function drupalorg_project_list_branches_contrib() {
  $output = '<ul>';
  $query= db_query("SELECT DISTINCT tag, COUNT(*) AS total
    FROM {cvs_tags}
    WHERE nid != 3060 AND nid != 0 AND tag RLIKE 'DRUPAL' AND branch = 1
    GROUP BY tag ORDER BY tag DESC");
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . ' ('. format_plural($tag->total, '1 project', '@count projects') .')</li>';
  }
  $output .= '</ul>';
  return $output;
}

/**
 * Show branches ever created in core based on CVS module data.
 */
function drupalorg_project_list_branches_core() {
  $output = '<ul>';
  $query= db_query("SELECT tag
    FROM {cvs_tags}
    WHERE nid = 3060 AND branch = 1 AND tag != 'DRUPAL-3-00'
    ORDER BY tag DESC");
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  $output .= '<a href="#tags"><h2 id="tags">Available tags</h2></a>';
  $output .= '<p>The tags currently available in Drupal core are:</p>';
  $output .= '<ul>';

  $query= db_query("SELECT tag
    FROM {cvs_tags}
    WHERE nid = 3060 AND branch = 0 AND tag RLIKE 'DRUPAL-'
    ORDER BY tag DESC");
  while($tag = db_fetch_object($query)) {
    $output .= ' <li>' . check_plain($tag->tag) . '</li>';
  }
  $output .= '</ul>';
  return $output;
}

// == Bug bingo ================================================================

/**
 * SQL randomizer for issues.
 */
function drupalorg_project_bingo_jump($type = NULL) {
  $sql = array(
    // Bug, core.
    'bug-core' => "SELECT nid FROM {project_issues} WHERE sid IN (1) AND category = 'bug' AND pid = 3060 ORDER BY RAND() LIMIT 1",
    // Bug, contrib.
    'bug-contrib' => "SELECT nid FROM {project_issues} WHERE sid IN (1) AND category = 'bug' AND pid != 3060 ORDER BY RAND() LIMIT 1",
    // Patch, core.
    'patch-core' => "SELECT nid FROM {project_issues} WHERE sid IN (8,13,14) AND pid = 3060 ORDER BY RAND() LIMIT 1",
    // Patch, contrib.
    'patch-contrib' => "SELECT nid FROM {project_issues} WHERE sid IN (8,13,14) AND pid != 3060 ORDER BY RAND() LIMIT 1",
  );
  if (!isset($type) || !isset($sql[$type])) {
    $type = 'bug-core';
  }

  $nid = db_result(db_query($sql[$type]));
  if ($_GET['stop'] != 1) {
    drupal_goto('node/'. $nid);
  }
}

/**
 * Implementation of hook_block().
 */
function drupalorg_project_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Contributor links');
      return $blocks;

    case 'view':
      $block['subject'] = t('Contributor links');
      $block['content'] = drupalorg_project_bingo_block_output();
      return $block;
  }
}

/**
 * Utility function to look up the title for the patch spotlight node.
 */
function drupalorg_project_bingo_spotlight_title() {
  $nid = 132970;
  $title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $nid));
  $clean_title = str_replace('Patch spotlight: ', '', $title);
  return l($clean_title, 'node/'. $nid);
}

/**
 * Output links with issue counts for different types of issues.
 */
function drupalorg_project_bingo_block_output() {
  $spotlight = drupalorg_project_bingo_spotlight_title();

  $counts = variable_get('drupalorg_project_issue_counts', array());

  $counts_pending = $counts['Pending bugs'];
  $counts_critical = $counts['Critical issues'];
  $counts_queue = $counts['Patch queue'];
  $counts_review = $counts['Patches to review'];

  $versions = array_map('trim', explode(',', DRUPALORG_ISSUE_RIDS));
  $url_pending = drupalorg_project_issue_url(
    array(
      'version' => $versions,
      'status' => array(1),
      'priorities' => array(1, 2),
      'categories' => array('bug'),
    )
  );
  $url_critical = drupalorg_project_issue_url(
    array(
      'version' => $versions,
      'status' => array(1, 8, 13, 14),
      'priorities' => array(1),
      'categories' => array('bug', 'task'),
    )
  );
  $url_queue = drupalorg_project_issue_url(
    array(
      'version' => $versions,
      'status' => array(8, 13, 14),
    )
  );
  $url_review = drupalorg_project_issue_url(
    array(
      'version' => $versions,
      'status' => array(8, 14),
    )
  );

  $output = <<<EOT
<div class="item-list">
<ul>
  <li>
    <strong>Queues</strong>
    <ul>
      <li>
        <a href="/project/issues/user">
          My issues
        </a>
      </li>
      <li>
        <a href="$url_pending">
          $counts_pending Pending bugs (D7)
        </a>
      </li>
      <li>
        <a href="$url_critical">
          $counts_critical Critical issues (D7)
        </a>
      </li>
      <li>
        <a href="$url_queue">
          $counts_queue Patch queue (D7)
        </a>
      </li>
      <li>
        <a href="$url_review">
          $counts_review Patches to review (D7)
        </a>
      </li>
    </ul>
  </li>
  <li>
    <strong>Patch spotlight</strong>
     <ul>
       <li>$spotlight</li>
    </ul>
  </li>
  <li><strong>Play patch bingo!</strong>
  <ul>
   <li><a href="/patch-bingo" title="Select a random patch for review">Drupal core</a></li>
   <li><a href="/contrib-patch-bingo" title="Select a random patch for review from the contributions">Contributions</a></li>
 </ul>
 </li>
 <li><strong>Play bug bingo!</strong>
 <ul>
 <li><a href="/bug-bingo" title="Select a random bug to fix">Drupal core</a></li>
 <li><a href="/contrib-bug-bingo" title="Select a random bug to fix from the contributions">Contributions</a></li>
 </ul></li>
 <li><a href="/mailing-lists">Mailing list archives</a></li>
 <li><a href="/project/issues/webmasters">Drupal.org webmasters</a></li>
 <li><a href="/project/issues/infrastructure">Drupal.org server administrators</a></li>
 <li><strong>Web links</strong>
 <ul>
 <li><a href="/planet">Planet Drupal</a></li>
 <li><a href="/talk">Drupal talk</a></li>
 <li><a href="http://groups.drupal.org/drupal-dojo">Drupal dojo</a></li>
 </ul></li>
 </ul>
 </div>
EOT;
  return $output;
}

/**
 * Implementation of template_preprocess_drupalorg_home().
 *
 * @todo
 *   Add caching.
 */
function drupalorg_project_preprocess_drupalorg_home(&$vars) {
  $result = db_query_range("SELECT m.*, u.name, u.uid FROM {cvs_messages} m INNER JOIN {users} u ON m.uid = u.uid ORDER BY m.created DESC", 0, 5);
  $recent_updates = '';
  while ($message = db_fetch_object($result)) {
    $recent_updates .= '<h6>'. l(truncate_utf8($message->message, 80) .'...', 'cvs', array('query' => 'commit='. $message->cid)) .'</h6><p class="submitted">'. theme('node_submitted', $message) .'</p>'; 
  }
  // We have no place to link this to in a nice way.
  $recent_updates .= '<p>'. l(t('More commit messages...'), 'cvs') .'</p>';
  $vars['tab_content_cvs'] = $recent_updates;
}
