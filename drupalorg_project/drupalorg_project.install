<?php

/**
 * @file
 *   Install functionality for drupalorg_project.module.
 */

/**
 * Implements hook_install().
 *
 * Set the system weight heavier than project* so project altering works.
 */
function drupalorg_project_install() {
  db_update('system')
    ->fields(array('weight' => 5))
    ->condition('name', 'drupalorg_project')
    ->execute();
}

/**
 * Implements hook_update_dependencies().
 */
function drupalorg_project_update_dependencies() {
  $dependencies['drupalorg_project'][7000] = array(
    // Since we're editing the field_issue_status field, we need to wait
    // until it actually exists...
    'project_issue' => 7000,
  );
  $dependencies['drupalorg_project'][7001] = array(
    // Make sure projects are fully migrated before we muck about with them.
    'project' => 7004,
    // Make sure releases are too!
    'project_release' => 7011,
  );
  $dependencies['project'][7006] = array(
    // Make sure we have drupal.org custom node types before allowing project
    // to make pathauto aliases.
    'drupalorg_project' => 7001,
  );
  return $dependencies;
}

/**
 * Add missing statuses back into the field_issue_status field.
 */
function drupalorg_project_update_7000() {
  $field = field_info_field('field_issue_status');

  // Define the entire array again to preserve our ordering.
  // Copied from drupal.org's {project_issue_state} table.
  $field['settings']['allowed_values'] = array(
    1 => 'Active',
    13 => 'Needs work',
    8 => 'Needs review',
    14 => 'Reviewed & tested by the community', // d.o specific.
    15 => 'Patch (to be ported)', // d.o specific.
    2 => 'Fixed',
    4 => 'Postponed',
    16 => 'Postponed (maintainer needs more info)', // d.o specific.
    3 => 'Closed (duplicate)',
    5 => "Closed (won't fix)",
    6 => 'Closed (works as designed)',
    18 => 'Closed (cannot reproduce)',
    7 => 'Closed (fixed)',
  );
  field_update_field($field);

  // Update the project_issue_open_states variable to add more open states.
  variable_set('project_issue_open_states', array(1,2,4,8,13,14,15,16));

  // Drupal.org {project_issue_state}.
  //+-----+----------------------------------------+--------+------------+---------------+
  //| sid | name                                   | weight | author_has | default_query |
  //+-----+----------------------------------------+--------+------------+---------------+
  //|   1 | active                                 |    -15 |          0 |             1 |
  //|  13 | needs work                             |    -14 |          0 |             1 |
  //|   8 | needs review                           |    -13 |          0 |             1 |
  //|  14 | reviewed & tested by the community     |    -12 |          0 |             1 |
  //|  15 | patch (to be ported)                   |    -11 |          0 |             1 |
  //|   2 | fixed                                  |    -10 |          0 |             1 |
  //|   4 | postponed                              |     -9 |          0 |             1 |
  //|  16 | postponed (maintainer needs more info) |     -8 |          0 |             1 |
  //|   3 | closed (duplicate)                     |     -7 |          0 |             0 |
  //|   5 | closed (won't fix)                     |     -6 |          0 |             0 |
  //|   6 | closed (works as designed)             |     -5 |          0 |             0 |
  //|  18 | closed (cannot reproduce)              |     -4 |          0 |             0 |
  //|   7 | closed (fixed)                         |     -3 |          0 |             0 |
  //+-----+----------------------------------------+--------+------------+---------------+
}

/**
 * Create content types for project types.
 */
function drupalorg_project_update_7001() {
  foreach (drupalorg_project_project_types() as $project_type => $type_data) {
    $type = node_type_load('project');
    // We are cloning, not renaming.
    unset($type->old_type);
    $type->type = $project_type;
    $type->name = $type_data['title'];
    $type->description = taxonomy_term_load($type_data['tid'])->description;
    node_type_save($type);
    node_types_rebuild();

    // Define node workflow and comment settings.
    variable_set('node_options_' . $type->type, array('status', 'revision'));
    variable_set('comment_' . $type->type, COMMENT_NODE_CLOSED);

    // Set the project behavior setting for this node type say it's a project.
    variable_set('project_behavior_' . $type->type, 'project');

    // Copy all but body field over.
    $instances = field_read_instances(array('entity_type' => 'node', 'bundle' => 'project'));
    foreach ($instances as $name => $instance) {
      $instance['bundle'] = $type->type;
      if (!field_read_instance('node', $instance['field_name'], $instance['bundle'])) {
        field_create_instance($instance);
      }
    }

    // Fix up any legacy cck fields.
    $result = db_query('SELECT * FROM {content_node_field_instance} WHERE type_name = :type', array(':type' => 'project_project'));
    foreach ($result as $cckfield) {
      try {
        db_insert('content_node_field_instance')->fields(array(
          'field_name' => $cckfield->field_name,
          'type_name' => $project_type,
          'weight' => $cckfield->weight,
          'label' => $cckfield->label,
          'widget_type' => $cckfield->widget_type,
          'widget_settings' => $cckfield->widget_settings,
          'display_settings' => $cckfield->display_settings,
          'description' => $cckfield->description,
          'widget_module' => $cckfield->widget_module,
          'widget_active' => $cckfield->widget_active,
        ))
        ->execute();
      }
      catch (Exception $e) {
        // Do nothing, is harmless.
      }
    }

    // Update field_project target bundles
    foreach (array('field_project', 'field_release_project') as $field_name) {
      $field = field_read_field($field_name);
      $field['settings']['handler_settings']['target_bundles'][$type->type] = $type->type;
      field_update_field($field);
      $instances = field_read_instances(array('field_name' => $field_name));
      foreach ($instances as $instance) {
        $instance['settings']['handler_settings']['target_bundles'][$type->type] = $type->type;
        field_update_instance($instance);
      }
    }
  }
  // Delete the old project_project instances now that we're done.
  db_query('DELETE FROM {content_node_field_instance} WHERE type_name = :type', array(':type' => 'project_project'));
}

/**
 * Shunt projects into their correct respective types.
 */
function drupalorg_project_update_7002() {
  $instances = field_read_instances(array('entity_type' => 'node', 'bundle' => 'project'));
  foreach (drupalorg_project_project_types() as $type => $type_data) {
    // Twiddle the node types of all the projects.
    $tid = $type_data['tid'];
    db_query('UPDATE {node}, {taxonomy_index} SET {node}.type = :type WHERE {node}.nid = {taxonomy_index}.nid AND {taxonomy_index}.tid = :tid', array(':type' => $type, ':tid' => $tid));
    // Loop over all the fields and update the bundles.
    foreach ($instances as $instance) {
      foreach (array('field_data_' . $instance['field_name'], 'field_revision_' . $instance['field_name']) as $table) {
        db_query('UPDATE {' . $table . '}, {taxonomy_index} SET {' . $table . '}.bundle = :bundle WHERE entity_type = :type AND entity_id = {taxonomy_index}.nid AND {taxonomy_index}.tid = :tid', array(':bundle' => $type, ':type' => 'node', ':tid' => $tid));
      }
    }
  }

  if (function_exists('apachesolr_environment_variable_get')) {
    $env_id = apachesolr_default_environment();
    $bias = apachesolr_environment_variable_get($env_id, 'apachesolr_search_type_boosts');
    foreach (drupalorg_project_project_types() as $type => $type_data) {
      // Update apachesolr configuration.
      db_query("INSERT IGNORE INTO {apachesolr_index_bundles} (env_id, entity_type, bundle) VALUES ('solr', 'node', :bundle)", array(':bundle' => $type));
      // Copy legacy project bias into all project node types.
      $bias[$type] = $bias['project_project'];
    }
    // Since we have tweaked the apachesolr configuration, we need to clear the apachesolr cache.
    db_query('TRUNCATE {cache_apachesolr}');

    // Write out the updated biases.
    apachesolr_environment_variable_set($env_id, 'apachesolr_search_type_boosts', $bias);
  }

  // Since we have manually mucked about in field tables, we need to clear the field cache.
  field_cache_clear();

  // Might as well rebuild node types again for safety.
  node_types_rebuild();
}

/**
 * Repurpose vocabulary 3 to be purely module categorization.
 */
function drupalorg_project_update_7003() {
  // We will remove the project types from vocab 3 and leave just the module categorization terms.

  // Update the vocabulary.
  $vocab = taxonomy_vocabulary_load(3);
  $vocab->name = 'Module categories';
  taxonomy_vocabulary_save($vocab);

  // First, we need to move the categorization terms to the top level so they
  // don't get deleted when 'Module' is deleted.
  $terms = taxonomy_get_children(14);
  foreach ($terms as $term) {
    $term->parent = 0;
    taxonomy_term_save($term);
  }
  // Now, we can delete the project type terms.
  foreach (drupalorg_project_project_types() as $type => $type_data) {
    taxonomy_term_delete($type_data['tid']);
    if ($type != 'project_module') {
      $instance = field_read_instance('node', 'taxonomy_vocabulary_3', $type);
      if ($instance) {
        // Remove the association with the individual project types.
        field_delete_instance($instance, FALSE);
      }
    }
  }

  // Finally, we need to fix the field instance on module projects.
  $instance = field_read_instance('node', 'taxonomy_vocabulary_3', 'project_module');
  $instance['label'] = 'Module categories';
  $instance['required'] = FALSE;
  $instance['description'] = '';
  field_update_instance($instance);
}

/**
 * Place new blocks in theme.
 */
function drupalorg_project_update_7004() {
   // Update maintainers block visibility
   db_update('block')
     ->fields(array('status' => 1, 'visibility' => 0))
     ->condition('theme', 'bluecheese')
     ->condition('module', 'versioncontrol_project')
     ->condition('delta', 'project_maintainers')
     ->execute();

  // Update project issue metadata placement
  db_update('block')
   ->fields(array('status' => 1, 'visibility' => 0, 'region' => 'sidebar_second'))
   ->condition('theme', 'bluecheese')
   ->condition('module', 'project_issue')
   ->condition('delta', 'issue-metadata')
   ->execute();

  // Update change records block placement
  db_update('block')
    ->fields(array('status' => 1, 'visibility' => 0, 'weight' => -10, 'region' => 'sidebar_second'))
    ->condition('theme', 'bluecheese')
    ->condition('module', 'views')
    ->condition('delta', 'change_records-block_1')
    ->execute();
}

/**
 * Attempt to work around a dependency issue by resaving issue node types.
 */
function drupalorg_project_update_7005() {
  module_load_install('project_release');
  // It's safe to run this an arbitrary number of times.
  project_release_update_7011();
}

/**
 * Force the project selection widget to use auto-complete.
 */
function drupalorg_project_update_7006() {
  variable_set('project_selection_widget', 'auto');
}

/**
 * Drupal.org customizations for the D7 project_issue node type.
 *
 * Enables and configures the 'Extended File Field' field formatter.
 */
function drupalorg_project_update_7007() {
  // Enable new dependencies.
  module_enable(array('field_formatter_settings', 'extended_file_field'));

  // Enable the 'Display' bit on the file field attached to issues:
  $file_field = field_info_field('field_issue_files');
  $file_field['settings']['display_field'] = 1;
  $file_field['settings']['display_default'] = 1;
  field_update_field($file_field);

  // Set up formatter settings.
  $display = array(
    'label' => 'above',
    'type' => 'extended_file_field',
    'settings' => array(
      'filetypes' => 'all',
      'extensions' => 'patch,diff',
      'columns' => array('cid', 'filename', 'filesize', 'uid'),
      'showhidden' => 'fieldset',
      'sortby' => 'default',
      'sortorder' => 'asc',
    ),
    'module' => 'extended_file_field',
    'weight' => 4,
  );

  // Set up widget settings.
  $widget_settings = array(
    'extended_file_field_show_remove' => 0,
    'extended_file_field_hidden_toggle' => 1,
    'extended_file_field_widget_metadata' => array(
      'uid' => 'uid',
      'cid' => 'cid',
    ),
  );

  // Cycle through each project_issue node type, and update the
  // field_issue_files instances.
  $bundles = project_issue_issue_node_types();
  foreach ($bundles as $bundle) {
    // Update the display formatter for each bundle
    $instance = field_info_instance('node', 'field_issue_files', $bundle);
    if (!empty($instance)) {
      $instance['display']['default'] = $display;
      $instance['widget']['settings'] = $widget_settings;
      field_update_instance($instance);
    }
  }
}

/**
 * Configure conflict module to be active for issues.
 */
function drupalorg_project_update_7008() {
  foreach (project_issue_issue_node_types() as $type) {
    variable_set('conflict_enable_' . $type, TRUE);
  }
}

/**
 * Add security update information to field description.
 */
function drupalorg_project_update_7009() {
  $instance = field_read_instance('node', 'taxonomy_vocabulary_7', 'project_release');
  $instance['description'] = '<a href="/documentation/releases/types">What is a release type?</a>';
  field_update_instance($instance);
}
